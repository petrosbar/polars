Search.setIndex({"alltitles": {"ABS": [[1396, "abs"]], "ACOS": [[1399, "acos"]], "ACOSD": [[1399, "acosd"]], "ARRAY_AGG": [[1392, "array-agg"]], "ARRAY_CONTAINS": [[1392, "array-contains"]], "ARRAY_GET": [[1392, "array-get"]], "ARRAY_LENGTH": [[1392, "array-length"]], "ARRAY_LOWER": [[1392, "array-lower"]], "ARRAY_MEAN": [[1392, "array-mean"]], "ARRAY_REVERSE": [[1392, "array-reverse"]], "ARRAY_SUM": [[1392, "array-sum"]], "ARRAY_TO_STRING": [[1392, "array-to-string"]], "ARRAY_UNIQUE": [[1392, "array-unique"]], "ARRAY_UPPER": [[1392, "array-upper"]], "ASIN": [[1399, "asin"]], "ASIND": [[1399, "asind"]], "ATAN": [[1399, "atan"]], "ATAN2": [[1399, "atan2"]], "ATAN2D": [[1399, "atan2d"]], "ATAND": [[1399, "atand"]], "AVG": [[1391, "avg"]], "Aggregate": [[1391, null]], "Aggregation": [[209, null], [365, null], [866, null], [978, null]], "Aliases": [[1391, null], [1391, null], [1391, null], [1396, null], [1396, null], [1397, null], [1397, null]], "Array": [[844, null], [1366, null], [1392, null]], "Asserts": [[1405, "asserts"]], "Attributes": [[352, null], [966, null], [1367, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[865, "avro"]], "BIT_AND": [[1393, "bit-and"]], "BIT_COUNT": [[1393, "bit-count"]], "BIT_LENGTH": [[1397, "bit-length"]], "BIT_OR": [[1393, "bit-or"]], "BIT_XOR": [[1393, "bit-xor"]], "Binary": [[845, null], [858, "binary"], [1368, null]], "Bitwise": [[1393, null]], "Boolean": [[846, null], [1369, null]], "CAST": [[1400, "cast"]], "CBRT": [[1396, "cbrt"]], "CEIL": [[1396, "ceil"]], "COALESCE": [[1394, "coalesce"]], "CONCAT": [[1397, "concat"]], "CONCAT_WS": [[1397, "concat-ws"]], "CORR": [[1391, "corr"]], "COS": [[1399, "cos"]], "COSD": [[1399, "cosd"]], "COT": [[1399, "cot"]], "COTD": [[1399, "cotd"]], "COUNT": [[1391, "count"]], "CREATE TABLE": [[1404, "create-table"]], "CSV": [[865, "csv"]], "Catalog": [[206, null]], "Categories": [[847, null], [1370, null]], "Clipboard": [[865, "clipboard"]], "Cloud Credentials": [[865, "cloud-credentials"]], "Columns / names": [[849, null]], "Comparison": [[858, "comparison"], [1378, "comparison"]], "Computation": [[353, null], [850, null], [1371, null]], "Conditional": [[1394, null]], "Config": [[208, null]], "Config load, save, state": [[208, "config-load-save-state"]], "Config options": [[208, "config-options"]], "Conjunction": [[858, "conjunction"]], "Conversion": [[863, "conversion"]], "DATE": [[1397, "date"]], "DATE_PART": [[1398, "date-part"]], "DEGREES": [[1399, "degrees"]], "DELETE": [[1404, "delete"]], "DISTINCT": [[1390, "distinct"]], "DIV": [[1396, "div"]], "DROP TABLES": [[1404, "drop-tables"]], "Data types": [[363, null]], "DataFrame": [[357, null]], "DataType": [[363, "datatype"]], "DataType expressions": [[362, null]], "Database": [[865, "database"]], "Delta Lake": [[865, "delta-lake"]], "Descriptive": [[354, null], [967, null], [1372, null]], "Documentation": [[1402, null], [1402, null], [1402, null]], "ENDS_WITH": [[1397, "ends-with"]], "EXCEPT": [[1403, "except"]], "EXP": [[1396, "exp"]], "EXPLAIN": [[1404, "explain"]], "EXTRACT": [[1398, "extract"]], "Errors": [[364, "errors"]], "Examples": [[1, "examples"], [977, "examples"], [1405, "examples"]], "Excel / ODS": [[865, "excel-ods"]], "Exceptions": [[364, null]], "Export": [[355, null], [1373, null]], "Expression SQL": [[1402, "expression-sql"]], "Expression plugins": [[975, "expression-plugins"]], "Expressions": [[852, null]], "Extending the API": [[1, null]], "FIRST": [[1391, "first"]], "FLOOR": [[1396, "floor"]], "FROM": [[1390, "from"]], "Feather / IPC": [[865, "feather-ipc"]], "Frame SQL": [[1402, "frame-sql"]], "Functions": [[362, "functions"], [851, null], [863, null], [977, "functions"]], "GPUEngine": [[968, null]], "GREATEST": [[1394, "greatest"]], "GROUP BY": [[1390, "group-by"]], "Global SQL": [[1402, "global-sql"]], "GroupBy": [[356, null], [969, null]], "HAVING": [[1390, "having"]], "IF": [[1394, "if"]], "IFNULL": [[1394, "ifnull"]], "INITCAP": [[1397, "initcap"]], "INTERSECT": [[1403, "intersect"]], "IO plugins": [[975, "io-plugins"]], "Iceberg": [[865, "iceberg"]], "Importing": [[977, "importing"]], "InProcessQuery": [[970, null]], "Index": [[0, null]], "Input/output": [[865, null]], "Introduction": [[1402, "introduction"]], "JOIN": [[1390, "join"]], "JSON": [[865, "json"]], "LAST": [[1391, "last"]], "LEAST": [[1394, "least"]], "LEFT": [[1397, "left"]], "LENGTH": [[1397, "length"]], "LIMIT": [[1390, "limit"]], "LN": [[1396, "ln"]], "LOG": [[1396, "log"]], "LOG10": [[1396, "log10"]], "LOG1P": [[1396, "log1p"]], "LOG2": [[1396, "log2"]], "LOWER": [[1397, "lower"]], "LTRIM": [[1397, "ltrim"]], "LazyFrame": [[971, null]], "List": [[853, null], [1375, null]], "MAX": [[1391, "max"]], "MEDIAN": [[1391, "median"]], "MIN": [[1391, "min"]], "MOD": [[1396, "mod"]], "Manipulation/selection": [[359, null], [856, null], [973, null], [1377, null]], "Math": [[1396, null]], "Meta": [[854, null]], "Metadata": [[974, null]], "Methods": [[1402, "methods"]], "Miscellaneous": [[358, null], [855, null], [863, "miscellaneous"], [972, null], [1376, null]], "Multiple Config instances": [[208, "multiple-config-instances"]], "Multiple queries": [[863, "multiple-queries"]], "NORMALIZE": [[1397, "normalize"]], "NULLIF": [[1394, "nullif"]], "Name": [[857, null]], "Nested": [[363, "nested"]], "Numeric": [[363, "numeric"], [858, "numeric"], [1378, "numeric"]], "OCTET_LENGTH": [[1397, "octet-length"]], "OFFSET": [[1390, "offset"]], "ORDER BY": [[1390, "order-by"]], "Operators": [[858, null], [1378, null]], "Other": [[363, "other"]], "PI": [[1396, "pi"]], "POW": [[1396, "pow"]], "Panic": [[364, "panic"]], "Parametric testing": [[1405, "parametric-testing"]], "Parquet": [[865, "parquet"]], "Partition": [[865, "partition"]], "Plot": [[360, null], [1379, null]], "Plugins": [[975, null]], "Polars strategies": [[1405, "polars-strategies"]], "Profiles": [[1405, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[865, "pyarrow-datasets"]], "Python API": [[1402, null]], "Python API reference": [[864, null]], "QUANTILE_CONT": [[1391, "quantile-cont"]], "QUANTILE_DISC": [[1391, "quantile-disc"]], "Querying": [[1402, "querying"]], "RADIANS": [[1399, "radians"]], "REGEXP_LIKE": [[1397, "regexp-like"]], "REPLACE": [[1397, "replace"]], "REVERSE": [[1397, "reverse"]], "RIGHT": [[1397, "right"]], "ROUND": [[1396, "round"]], "RTRIM": [[1397, "rtrim"]], "Random": [[863, "random"]], "SELECT": [[1390, "select"]], "SHOW TABLES": [[1404, "show-tables"]], "SIGN": [[1396, "sign"]], "SIN": [[1399, "sin"]], "SIND": [[1399, "sind"]], "SPLIT_PART": [[1397, "split-part"]], "SQL Clauses": [[1390, null]], "SQL Functions": [[1395, null]], "SQL Interface": [[1401, null]], "SQLContext": [[1402, "sqlcontext"]], "SQRT": [[1396, "sqrt"]], "STARTS_WITH": [[1397, "starts-with"]], "STDDEV": [[1391, "stddev"]], "STRFTIME": [[1398, "strftime"]], "STRING_TO_ARRAY": [[1397, "string-to-array"]], "STRPOS": [[1397, "strpos"]], "STRPTIME": [[1397, "strptime"]], "SUBSTR": [[1397, "substr"]], "SUM": [[1391, "sum"]], "Scan Cast Options": [[865, "scan-cast-options"]], "Schema": [[976, null]], "Selectors": [[977, null]], "Serialization": [[358, "serialization"], [972, "serialization"]], "Series": [[1374, null]], "Set Operations": [[1403, null]], "Set operations": [[977, "set-operations"]], "Strategy helpers": [[1405, "strategy-helpers"]], "String": [[363, "string"], [859, null], [1380, null], [1397, null]], "StringCache": [[863, "stringcache"]], "Struct": [[860, null], [1381, null]], "Style": [[361, null]], "TAN": [[1399, "tan"]], "TAND": [[1399, "tand"]], "TIMESTAMP": [[1397, "timestamp"]], "TRUNCATE": [[1404, "truncate"]], "TRY_CAST": [[1400, "try-cast"]], "Table Operations": [[1404, null]], "Temporal": [[363, "temporal"], [861, null], [1382, null], [1398, null]], "Testing": [[1405, null]], "Trigonometry": [[1399, null]], "Types": [[1400, null]], "UNION": [[1403, "union"]], "UNION ALL": [[1403, "union-all"]], "UNION BY NAME": [[1403, "union-by-name"]], "UNNEST": [[1392, "unnest"], [1404, "unnest"]], "UPPER": [[1397, "upper"]], "Unity Catalog": [[207, null]], "Use as a context manager": [[208, "use-as-a-context-manager"]], "Use as a decorator": [[208, "use-as-a-decorator"]], "VARIANCE": [[1391, "variance"]], "WHERE": [[1390, "where"]], "Warnings": [[364, "warnings"]], "Window": [[862, null]], "polars.Catalog": [[193, null]], "polars.Catalog.get_table_info": [[194, null]], "polars.Catalog.list_catalogs": [[195, null]], "polars.Catalog.list_namespaces": [[196, null]], "polars.Catalog.list_tables": [[197, null]], "polars.Catalog.scan_table": [[198, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_engine_affinity": [[10, null]], "polars.Config.set_float_precision": [[11, null]], "polars.Config.set_fmt_float": [[12, null]], "polars.Config.set_fmt_str_lengths": [[13, null]], "polars.Config.set_fmt_table_cell_list_len": [[14, null]], "polars.Config.set_streaming_chunk_size": [[15, null]], "polars.Config.set_tbl_cell_alignment": [[16, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, null]], "polars.Config.set_tbl_cols": [[18, null]], "polars.Config.set_tbl_column_data_type_inline": [[19, null]], "polars.Config.set_tbl_dataframe_shape_below": [[20, null]], "polars.Config.set_tbl_formatting": [[21, null]], "polars.Config.set_tbl_hide_column_data_types": [[22, null]], "polars.Config.set_tbl_hide_column_names": [[23, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, null]], "polars.Config.set_tbl_hide_dtype_separator": [[25, null]], "polars.Config.set_tbl_rows": [[26, null]], "polars.Config.set_tbl_width_chars": [[27, null]], "polars.Config.set_thousands_separator": [[28, null]], "polars.Config.set_trim_decimal_zeros": [[29, null]], "polars.Config.set_verbose": [[30, null]], "polars.Config.state": [[31, null]], "polars.CredentialProvider": [[32, null]], "polars.CredentialProviderAWS": [[33, null]], "polars.CredentialProviderAzure": [[34, null]], "polars.CredentialProviderGCP": [[35, null]], "polars.DataFrame.__array__": [[210, null]], "polars.DataFrame.__arrow_c_stream__": [[211, null]], "polars.DataFrame.__dataframe__": [[212, null]], "polars.DataFrame.__getitem__": [[213, null]], "polars.DataFrame.__setitem__": [[214, null]], "polars.DataFrame.approx_n_unique": [[215, null]], "polars.DataFrame.bottom_k": [[216, null]], "polars.DataFrame.cast": [[217, null]], "polars.DataFrame.clear": [[218, null]], "polars.DataFrame.clone": [[219, null]], "polars.DataFrame.collect_schema": [[220, null]], "polars.DataFrame.columns": [[221, null]], "polars.DataFrame.corr": [[222, null]], "polars.DataFrame.count": [[223, null]], "polars.DataFrame.describe": [[224, null]], "polars.DataFrame.deserialize": [[225, null]], "polars.DataFrame.drop": [[226, null]], "polars.DataFrame.drop_in_place": [[227, null]], "polars.DataFrame.drop_nans": [[228, null]], "polars.DataFrame.drop_nulls": [[229, null]], "polars.DataFrame.dtypes": [[230, null]], "polars.DataFrame.equals": [[231, null]], "polars.DataFrame.estimated_size": [[232, null]], "polars.DataFrame.explode": [[233, null]], "polars.DataFrame.extend": [[234, null]], "polars.DataFrame.fill_nan": [[235, null]], "polars.DataFrame.fill_null": [[236, null]], "polars.DataFrame.filter": [[237, null]], "polars.DataFrame.flags": [[238, null]], "polars.DataFrame.fold": [[239, null]], "polars.DataFrame.gather_every": [[240, null]], "polars.DataFrame.get_column": [[241, null]], "polars.DataFrame.get_column_index": [[242, null]], "polars.DataFrame.get_columns": [[243, null]], "polars.DataFrame.glimpse": [[244, null]], "polars.DataFrame.group_by": [[245, null]], "polars.DataFrame.group_by_dynamic": [[246, null]], "polars.DataFrame.hash_rows": [[247, null]], "polars.DataFrame.head": [[248, null]], "polars.DataFrame.height": [[249, null]], "polars.DataFrame.hstack": [[250, null]], "polars.DataFrame.insert_column": [[251, null]], "polars.DataFrame.interpolate": [[252, null]], "polars.DataFrame.is_duplicated": [[253, null]], "polars.DataFrame.is_empty": [[254, null]], "polars.DataFrame.is_unique": [[255, null]], "polars.DataFrame.item": [[256, null]], "polars.DataFrame.iter_columns": [[257, null]], "polars.DataFrame.iter_rows": [[258, null]], "polars.DataFrame.iter_slices": [[259, null]], "polars.DataFrame.join": [[260, null]], "polars.DataFrame.join_asof": [[261, null]], "polars.DataFrame.join_where": [[262, null]], "polars.DataFrame.lazy": [[263, null]], "polars.DataFrame.limit": [[264, null]], "polars.DataFrame.map_rows": [[265, null]], "polars.DataFrame.match_to_schema": [[266, null]], "polars.DataFrame.max": [[267, null]], "polars.DataFrame.max_horizontal": [[268, null]], "polars.DataFrame.mean": [[269, null]], "polars.DataFrame.mean_horizontal": [[270, null]], "polars.DataFrame.median": [[271, null]], "polars.DataFrame.melt": [[272, null]], "polars.DataFrame.merge_sorted": [[273, null]], "polars.DataFrame.min": [[274, null]], "polars.DataFrame.min_horizontal": [[275, null]], "polars.DataFrame.n_chunks": [[276, null]], "polars.DataFrame.n_unique": [[277, null]], "polars.DataFrame.null_count": [[278, null]], "polars.DataFrame.partition_by": [[279, null]], "polars.DataFrame.pipe": [[280, null]], "polars.DataFrame.pivot": [[281, null]], "polars.DataFrame.product": [[282, null]], "polars.DataFrame.quantile": [[283, null]], "polars.DataFrame.rechunk": [[284, null]], "polars.DataFrame.remove": [[285, null]], "polars.DataFrame.rename": [[286, null]], "polars.DataFrame.replace_column": [[287, null]], "polars.DataFrame.reverse": [[288, null]], "polars.DataFrame.rolling": [[289, null]], "polars.DataFrame.row": [[290, null]], "polars.DataFrame.rows": [[291, null]], "polars.DataFrame.rows_by_key": [[292, null]], "polars.DataFrame.sample": [[293, null]], "polars.DataFrame.schema": [[294, null]], "polars.DataFrame.select": [[295, null]], "polars.DataFrame.select_seq": [[296, null]], "polars.DataFrame.serialize": [[297, null]], "polars.DataFrame.set_sorted": [[298, null]], "polars.DataFrame.shape": [[299, null]], "polars.DataFrame.shift": [[300, null]], "polars.DataFrame.shrink_to_fit": [[301, null]], "polars.DataFrame.slice": [[302, null]], "polars.DataFrame.sort": [[303, null]], "polars.DataFrame.sql": [[304, null]], "polars.DataFrame.std": [[305, null]], "polars.DataFrame.sum": [[306, null]], "polars.DataFrame.sum_horizontal": [[307, null]], "polars.DataFrame.tail": [[308, null]], "polars.DataFrame.to_arrow": [[309, null]], "polars.DataFrame.to_dict": [[310, null]], "polars.DataFrame.to_dicts": [[311, null]], "polars.DataFrame.to_dummies": [[312, null]], "polars.DataFrame.to_init_repr": [[313, null]], "polars.DataFrame.to_jax": [[314, null]], "polars.DataFrame.to_numpy": [[315, null]], "polars.DataFrame.to_pandas": [[316, null]], "polars.DataFrame.to_series": [[317, null]], "polars.DataFrame.to_struct": [[318, null]], "polars.DataFrame.to_torch": [[319, null]], "polars.DataFrame.top_k": [[320, null]], "polars.DataFrame.transpose": [[321, null]], "polars.DataFrame.unique": [[322, null]], "polars.DataFrame.unnest": [[323, null]], "polars.DataFrame.unpivot": [[324, null]], "polars.DataFrame.unstack": [[325, null]], "polars.DataFrame.update": [[326, null]], "polars.DataFrame.upsample": [[327, null]], "polars.DataFrame.var": [[328, null]], "polars.DataFrame.vstack": [[329, null]], "polars.DataFrame.width": [[330, null]], "polars.DataFrame.with_columns": [[331, null]], "polars.DataFrame.with_columns_seq": [[332, null]], "polars.DataFrame.with_row_count": [[333, null]], "polars.DataFrame.with_row_index": [[334, null]], "polars.DataFrame.write_avro": [[36, null]], "polars.DataFrame.write_clipboard": [[37, null]], "polars.DataFrame.write_csv": [[38, null]], "polars.DataFrame.write_database": [[39, null]], "polars.DataFrame.write_delta": [[40, null]], "polars.DataFrame.write_excel": [[41, null]], "polars.DataFrame.write_iceberg": [[42, null]], "polars.DataFrame.write_ipc": [[43, null]], "polars.DataFrame.write_ipc_stream": [[44, null]], "polars.DataFrame.write_json": [[45, null]], "polars.DataFrame.write_ndjson": [[46, null]], "polars.DataFrame.write_parquet": [[47, null]], "polars.DataType.to_dtype_expr": [[48, null]], "polars.Expr.abs": [[366, null]], "polars.Expr.add": [[367, null]], "polars.Expr.agg_groups": [[368, null]], "polars.Expr.alias": [[369, null]], "polars.Expr.all": [[370, null]], "polars.Expr.and_": [[371, null]], "polars.Expr.any": [[372, null]], "polars.Expr.append": [[373, null]], "polars.Expr.approx_n_unique": [[374, null]], "polars.Expr.arccos": [[375, null]], "polars.Expr.arccosh": [[376, null]], "polars.Expr.arcsin": [[377, null]], "polars.Expr.arcsinh": [[378, null]], "polars.Expr.arctan": [[379, null]], "polars.Expr.arctanh": [[380, null]], "polars.Expr.arg_max": [[381, null]], "polars.Expr.arg_min": [[382, null]], "polars.Expr.arg_sort": [[383, null]], "polars.Expr.arg_true": [[384, null]], "polars.Expr.arg_unique": [[385, null]], "polars.Expr.arr.all": [[386, null]], "polars.Expr.arr.any": [[387, null]], "polars.Expr.arr.arg_max": [[388, null]], "polars.Expr.arr.arg_min": [[389, null]], "polars.Expr.arr.contains": [[390, null]], "polars.Expr.arr.count_matches": [[391, null]], "polars.Expr.arr.explode": [[392, null]], "polars.Expr.arr.first": [[393, null]], "polars.Expr.arr.get": [[394, null]], "polars.Expr.arr.join": [[395, null]], "polars.Expr.arr.last": [[396, null]], "polars.Expr.arr.max": [[397, null]], "polars.Expr.arr.median": [[398, null]], "polars.Expr.arr.min": [[399, null]], "polars.Expr.arr.n_unique": [[400, null]], "polars.Expr.arr.reverse": [[401, null]], "polars.Expr.arr.shift": [[402, null]], "polars.Expr.arr.sort": [[403, null]], "polars.Expr.arr.std": [[404, null]], "polars.Expr.arr.sum": [[405, null]], "polars.Expr.arr.to_list": [[406, null]], "polars.Expr.arr.to_struct": [[407, null]], "polars.Expr.arr.unique": [[408, null]], "polars.Expr.arr.var": [[409, null]], "polars.Expr.backward_fill": [[410, null]], "polars.Expr.bin.contains": [[411, null]], "polars.Expr.bin.decode": [[412, null]], "polars.Expr.bin.encode": [[413, null]], "polars.Expr.bin.ends_with": [[414, null]], "polars.Expr.bin.reinterpret": [[415, null]], "polars.Expr.bin.size": [[416, null]], "polars.Expr.bin.starts_with": [[417, null]], "polars.Expr.bitwise_and": [[418, null]], "polars.Expr.bitwise_count_ones": [[419, null]], "polars.Expr.bitwise_count_zeros": [[420, null]], "polars.Expr.bitwise_leading_ones": [[421, null]], "polars.Expr.bitwise_leading_zeros": [[422, null]], "polars.Expr.bitwise_or": [[423, null]], "polars.Expr.bitwise_trailing_ones": [[424, null]], "polars.Expr.bitwise_trailing_zeros": [[425, null]], "polars.Expr.bitwise_xor": [[426, null]], "polars.Expr.bottom_k": [[427, null]], "polars.Expr.bottom_k_by": [[428, null]], "polars.Expr.cast": [[429, null]], "polars.Expr.cat.ends_with": [[430, null]], "polars.Expr.cat.get_categories": [[431, null]], "polars.Expr.cat.len_bytes": [[432, null]], "polars.Expr.cat.len_chars": [[433, null]], "polars.Expr.cat.starts_with": [[434, null]], "polars.Expr.cbrt": [[435, null]], "polars.Expr.ceil": [[436, null]], "polars.Expr.clip": [[437, null]], "polars.Expr.cos": [[438, null]], "polars.Expr.cosh": [[439, null]], "polars.Expr.cot": [[440, null]], "polars.Expr.count": [[441, null]], "polars.Expr.cum_count": [[442, null]], "polars.Expr.cum_max": [[443, null]], "polars.Expr.cum_min": [[444, null]], "polars.Expr.cum_prod": [[445, null]], "polars.Expr.cum_sum": [[446, null]], "polars.Expr.cumulative_eval": [[447, null]], "polars.Expr.cut": [[448, null]], "polars.Expr.degrees": [[449, null]], "polars.Expr.deserialize": [[450, null]], "polars.Expr.diff": [[451, null]], "polars.Expr.dot": [[452, null]], "polars.Expr.drop_nans": [[453, null]], "polars.Expr.drop_nulls": [[454, null]], "polars.Expr.dt.add_business_days": [[455, null]], "polars.Expr.dt.base_utc_offset": [[456, null]], "polars.Expr.dt.cast_time_unit": [[457, null]], "polars.Expr.dt.century": [[458, null]], "polars.Expr.dt.combine": [[459, null]], "polars.Expr.dt.convert_time_zone": [[460, null]], "polars.Expr.dt.date": [[461, null]], "polars.Expr.dt.datetime": [[462, null]], "polars.Expr.dt.day": [[463, null]], "polars.Expr.dt.dst_offset": [[464, null]], "polars.Expr.dt.epoch": [[465, null]], "polars.Expr.dt.hour": [[466, null]], "polars.Expr.dt.is_business_day": [[467, null]], "polars.Expr.dt.is_leap_year": [[468, null]], "polars.Expr.dt.iso_year": [[469, null]], "polars.Expr.dt.microsecond": [[470, null]], "polars.Expr.dt.millennium": [[471, null]], "polars.Expr.dt.millisecond": [[472, null]], "polars.Expr.dt.minute": [[473, null]], "polars.Expr.dt.month": [[474, null]], "polars.Expr.dt.month_end": [[475, null]], "polars.Expr.dt.month_start": [[476, null]], "polars.Expr.dt.nanosecond": [[477, null]], "polars.Expr.dt.offset_by": [[478, null]], "polars.Expr.dt.ordinal_day": [[479, null]], "polars.Expr.dt.quarter": [[480, null]], "polars.Expr.dt.replace": [[481, null]], "polars.Expr.dt.replace_time_zone": [[482, null]], "polars.Expr.dt.round": [[483, null]], "polars.Expr.dt.second": [[484, null]], "polars.Expr.dt.strftime": [[485, null]], "polars.Expr.dt.time": [[486, null]], "polars.Expr.dt.timestamp": [[487, null]], "polars.Expr.dt.to_string": [[488, null]], "polars.Expr.dt.total_days": [[489, null]], "polars.Expr.dt.total_hours": [[490, null]], "polars.Expr.dt.total_microseconds": [[491, null]], "polars.Expr.dt.total_milliseconds": [[492, null]], "polars.Expr.dt.total_minutes": [[493, null]], "polars.Expr.dt.total_nanoseconds": [[494, null]], "polars.Expr.dt.total_seconds": [[495, null]], "polars.Expr.dt.truncate": [[496, null]], "polars.Expr.dt.week": [[497, null]], "polars.Expr.dt.weekday": [[498, null]], "polars.Expr.dt.with_time_unit": [[499, null]], "polars.Expr.dt.year": [[500, null]], "polars.Expr.entropy": [[501, null]], "polars.Expr.eq": [[502, null]], "polars.Expr.eq_missing": [[503, null]], "polars.Expr.ewm_mean": [[504, null]], "polars.Expr.ewm_mean_by": [[505, null]], "polars.Expr.ewm_std": [[506, null]], "polars.Expr.ewm_var": [[507, null]], "polars.Expr.exclude": [[508, null]], "polars.Expr.exp": [[509, null]], "polars.Expr.explode": [[510, null]], "polars.Expr.extend_constant": [[511, null]], "polars.Expr.fill_nan": [[512, null]], "polars.Expr.fill_null": [[513, null]], "polars.Expr.filter": [[514, null]], "polars.Expr.first": [[515, null]], "polars.Expr.flatten": [[516, null]], "polars.Expr.floor": [[517, null]], "polars.Expr.floordiv": [[518, null]], "polars.Expr.forward_fill": [[519, null]], "polars.Expr.from_json": [[520, null]], "polars.Expr.gather": [[521, null]], "polars.Expr.gather_every": [[522, null]], "polars.Expr.ge": [[523, null]], "polars.Expr.get": [[524, null]], "polars.Expr.gt": [[525, null]], "polars.Expr.has_nulls": [[526, null]], "polars.Expr.hash": [[527, null]], "polars.Expr.head": [[528, null]], "polars.Expr.hist": [[529, null]], "polars.Expr.implode": [[530, null]], "polars.Expr.index_of": [[531, null]], "polars.Expr.inspect": [[532, null]], "polars.Expr.interpolate": [[533, null]], "polars.Expr.interpolate_by": [[534, null]], "polars.Expr.is_between": [[535, null]], "polars.Expr.is_close": [[536, null]], "polars.Expr.is_duplicated": [[537, null]], "polars.Expr.is_finite": [[538, null]], "polars.Expr.is_first_distinct": [[539, null]], "polars.Expr.is_in": [[540, null]], "polars.Expr.is_infinite": [[541, null]], "polars.Expr.is_last_distinct": [[542, null]], "polars.Expr.is_nan": [[543, null]], "polars.Expr.is_not_nan": [[544, null]], "polars.Expr.is_not_null": [[545, null]], "polars.Expr.is_null": [[546, null]], "polars.Expr.is_unique": [[547, null]], "polars.Expr.kurtosis": [[548, null]], "polars.Expr.last": [[549, null]], "polars.Expr.le": [[550, null]], "polars.Expr.len": [[551, null]], "polars.Expr.limit": [[552, null]], "polars.Expr.list.all": [[553, null]], "polars.Expr.list.any": [[554, null]], "polars.Expr.list.arg_max": [[555, null]], "polars.Expr.list.arg_min": [[556, null]], "polars.Expr.list.concat": [[557, null]], "polars.Expr.list.contains": [[558, null]], "polars.Expr.list.count_matches": [[559, null]], "polars.Expr.list.diff": [[560, null]], "polars.Expr.list.drop_nulls": [[561, null]], "polars.Expr.list.eval": [[562, null]], "polars.Expr.list.explode": [[563, null]], "polars.Expr.list.first": [[564, null]], "polars.Expr.list.gather": [[565, null]], "polars.Expr.list.gather_every": [[566, null]], "polars.Expr.list.get": [[567, null]], "polars.Expr.list.head": [[568, null]], "polars.Expr.list.join": [[569, null]], "polars.Expr.list.last": [[570, null]], "polars.Expr.list.len": [[571, null]], "polars.Expr.list.max": [[572, null]], "polars.Expr.list.mean": [[573, null]], "polars.Expr.list.median": [[574, null]], "polars.Expr.list.min": [[575, null]], "polars.Expr.list.n_unique": [[576, null]], "polars.Expr.list.reverse": [[577, null]], "polars.Expr.list.sample": [[578, null]], "polars.Expr.list.set_difference": [[579, null]], "polars.Expr.list.set_intersection": [[580, null]], "polars.Expr.list.set_symmetric_difference": [[581, null]], "polars.Expr.list.set_union": [[582, null]], "polars.Expr.list.shift": [[583, null]], "polars.Expr.list.slice": [[584, null]], "polars.Expr.list.sort": [[585, null]], "polars.Expr.list.std": [[586, null]], "polars.Expr.list.sum": [[587, null]], "polars.Expr.list.tail": [[588, null]], "polars.Expr.list.to_array": [[589, null]], "polars.Expr.list.to_struct": [[590, null]], "polars.Expr.list.unique": [[591, null]], "polars.Expr.list.var": [[592, null]], "polars.Expr.log": [[593, null]], "polars.Expr.log10": [[594, null]], "polars.Expr.log1p": [[595, null]], "polars.Expr.lower_bound": [[596, null]], "polars.Expr.lt": [[597, null]], "polars.Expr.map_batches": [[598, null]], "polars.Expr.map_elements": [[599, null]], "polars.Expr.max": [[600, null]], "polars.Expr.mean": [[601, null]], "polars.Expr.median": [[602, null]], "polars.Expr.meta.eq": [[603, null]], "polars.Expr.meta.has_multiple_outputs": [[604, null]], "polars.Expr.meta.is_column": [[605, null]], "polars.Expr.meta.is_column_selection": [[606, null]], "polars.Expr.meta.is_literal": [[607, null]], "polars.Expr.meta.is_regex_projection": [[608, null]], "polars.Expr.meta.ne": [[609, null]], "polars.Expr.meta.output_name": [[610, null]], "polars.Expr.meta.pop": [[611, null]], "polars.Expr.meta.root_names": [[612, null]], "polars.Expr.meta.serialize": [[613, null]], "polars.Expr.meta.show_graph": [[614, null]], "polars.Expr.meta.tree_format": [[615, null]], "polars.Expr.meta.undo_aliases": [[616, null]], "polars.Expr.meta.write_json": [[617, null]], "polars.Expr.min": [[618, null]], "polars.Expr.mod": [[619, null]], "polars.Expr.mode": [[620, null]], "polars.Expr.mul": [[621, null]], "polars.Expr.n_unique": [[622, null]], "polars.Expr.name.keep": [[623, null]], "polars.Expr.name.map": [[624, null]], "polars.Expr.name.map_fields": [[625, null]], "polars.Expr.name.prefix": [[626, null]], "polars.Expr.name.prefix_fields": [[627, null]], "polars.Expr.name.suffix": [[628, null]], "polars.Expr.name.suffix_fields": [[629, null]], "polars.Expr.name.to_lowercase": [[630, null]], "polars.Expr.name.to_uppercase": [[631, null]], "polars.Expr.nan_max": [[632, null]], "polars.Expr.nan_min": [[633, null]], "polars.Expr.ne": [[634, null]], "polars.Expr.ne_missing": [[635, null]], "polars.Expr.neg": [[636, null]], "polars.Expr.not_": [[637, null]], "polars.Expr.null_count": [[638, null]], "polars.Expr.or_": [[639, null]], "polars.Expr.over": [[640, null]], "polars.Expr.pct_change": [[641, null]], "polars.Expr.peak_max": [[642, null]], "polars.Expr.peak_min": [[643, null]], "polars.Expr.pipe": [[644, null]], "polars.Expr.pow": [[645, null]], "polars.Expr.product": [[646, null]], "polars.Expr.qcut": [[647, null]], "polars.Expr.quantile": [[648, null]], "polars.Expr.radians": [[649, null]], "polars.Expr.rank": [[650, null]], "polars.Expr.rechunk": [[651, null]], "polars.Expr.reinterpret": [[652, null]], "polars.Expr.repeat_by": [[653, null]], "polars.Expr.replace": [[654, null]], "polars.Expr.replace_strict": [[655, null]], "polars.Expr.reshape": [[656, null]], "polars.Expr.reverse": [[657, null]], "polars.Expr.rle": [[658, null]], "polars.Expr.rle_id": [[659, null]], "polars.Expr.rolling": [[660, null]], "polars.Expr.rolling_kurtosis": [[661, null]], "polars.Expr.rolling_map": [[662, null]], "polars.Expr.rolling_max": [[663, null]], "polars.Expr.rolling_max_by": [[664, null]], "polars.Expr.rolling_mean": [[665, null]], "polars.Expr.rolling_mean_by": [[666, null]], "polars.Expr.rolling_median": [[667, null]], "polars.Expr.rolling_median_by": [[668, null]], "polars.Expr.rolling_min": [[669, null]], "polars.Expr.rolling_min_by": [[670, null]], "polars.Expr.rolling_quantile": [[671, null]], "polars.Expr.rolling_quantile_by": [[672, null]], "polars.Expr.rolling_skew": [[673, null]], "polars.Expr.rolling_std": [[674, null]], "polars.Expr.rolling_std_by": [[675, null]], "polars.Expr.rolling_sum": [[676, null]], "polars.Expr.rolling_sum_by": [[677, null]], "polars.Expr.rolling_var": [[678, null]], "polars.Expr.rolling_var_by": [[679, null]], "polars.Expr.round": [[680, null]], "polars.Expr.round_sig_figs": [[681, null]], "polars.Expr.sample": [[682, null]], "polars.Expr.search_sorted": [[683, null]], "polars.Expr.set_sorted": [[684, null]], "polars.Expr.shift": [[685, null]], "polars.Expr.shrink_dtype": [[686, null]], "polars.Expr.shuffle": [[687, null]], "polars.Expr.sign": [[688, null]], "polars.Expr.sin": [[689, null]], "polars.Expr.sinh": [[690, null]], "polars.Expr.skew": [[691, null]], "polars.Expr.slice": [[692, null]], "polars.Expr.sort": [[693, null]], "polars.Expr.sort_by": [[694, null]], "polars.Expr.sqrt": [[695, null]], "polars.Expr.std": [[696, null]], "polars.Expr.str.concat": [[697, null]], "polars.Expr.str.contains": [[698, null]], "polars.Expr.str.contains_any": [[699, null]], "polars.Expr.str.count_matches": [[700, null]], "polars.Expr.str.decode": [[701, null]], "polars.Expr.str.encode": [[702, null]], "polars.Expr.str.ends_with": [[703, null]], "polars.Expr.str.escape_regex": [[704, null]], "polars.Expr.str.explode": [[705, null]], "polars.Expr.str.extract": [[706, null]], "polars.Expr.str.extract_all": [[707, null]], "polars.Expr.str.extract_groups": [[708, null]], "polars.Expr.str.extract_many": [[709, null]], "polars.Expr.str.find": [[710, null]], "polars.Expr.str.find_many": [[711, null]], "polars.Expr.str.head": [[712, null]], "polars.Expr.str.join": [[713, null]], "polars.Expr.str.json_decode": [[714, null]], "polars.Expr.str.json_path_match": [[715, null]], "polars.Expr.str.len_bytes": [[716, null]], "polars.Expr.str.len_chars": [[717, null]], "polars.Expr.str.normalize": [[718, null]], "polars.Expr.str.pad_end": [[719, null]], "polars.Expr.str.pad_start": [[720, null]], "polars.Expr.str.replace": [[721, null]], "polars.Expr.str.replace_all": [[722, null]], "polars.Expr.str.replace_many": [[723, null]], "polars.Expr.str.reverse": [[724, null]], "polars.Expr.str.slice": [[725, null]], "polars.Expr.str.split": [[726, null]], "polars.Expr.str.split_exact": [[727, null]], "polars.Expr.str.splitn": [[728, null]], "polars.Expr.str.starts_with": [[729, null]], "polars.Expr.str.strip_chars": [[730, null]], "polars.Expr.str.strip_chars_end": [[731, null]], "polars.Expr.str.strip_chars_start": [[732, null]], "polars.Expr.str.strip_prefix": [[733, null]], "polars.Expr.str.strip_suffix": [[734, null]], "polars.Expr.str.strptime": [[735, null]], "polars.Expr.str.tail": [[736, null]], "polars.Expr.str.to_date": [[737, null]], "polars.Expr.str.to_datetime": [[738, null]], "polars.Expr.str.to_decimal": [[739, null]], "polars.Expr.str.to_integer": [[740, null]], "polars.Expr.str.to_lowercase": [[741, null]], "polars.Expr.str.to_time": [[742, null]], "polars.Expr.str.to_titlecase": [[743, null]], "polars.Expr.str.to_uppercase": [[744, null]], "polars.Expr.str.zfill": [[745, null]], "polars.Expr.struct.field": [[746, null]], "polars.Expr.struct.json_encode": [[747, null]], "polars.Expr.struct.rename_fields": [[748, null]], "polars.Expr.struct.unnest": [[749, null]], "polars.Expr.struct.with_fields": [[750, null]], "polars.Expr.sub": [[751, null]], "polars.Expr.sum": [[752, null]], "polars.Expr.tail": [[753, null]], "polars.Expr.tan": [[754, null]], "polars.Expr.tanh": [[755, null]], "polars.Expr.to_physical": [[756, null]], "polars.Expr.top_k": [[757, null]], "polars.Expr.top_k_by": [[758, null]], "polars.Expr.truediv": [[759, null]], "polars.Expr.unique": [[760, null]], "polars.Expr.unique_counts": [[761, null]], "polars.Expr.upper_bound": [[762, null]], "polars.Expr.value_counts": [[763, null]], "polars.Expr.var": [[764, null]], "polars.Expr.where": [[765, null]], "polars.Expr.xor": [[766, null]], "polars.LazyFrame.__getitem__": [[867, null]], "polars.LazyFrame.approx_n_unique": [[868, null]], "polars.LazyFrame.bottom_k": [[869, null]], "polars.LazyFrame.cache": [[870, null]], "polars.LazyFrame.cast": [[871, null]], "polars.LazyFrame.clear": [[872, null]], "polars.LazyFrame.clone": [[873, null]], "polars.LazyFrame.collect": [[874, null]], "polars.LazyFrame.collect_async": [[875, null]], "polars.LazyFrame.collect_schema": [[876, null]], "polars.LazyFrame.columns": [[877, null]], "polars.LazyFrame.count": [[878, null]], "polars.LazyFrame.describe": [[879, null]], "polars.LazyFrame.deserialize": [[880, null]], "polars.LazyFrame.drop": [[881, null]], "polars.LazyFrame.drop_nans": [[882, null]], "polars.LazyFrame.drop_nulls": [[883, null]], "polars.LazyFrame.dtypes": [[884, null]], "polars.LazyFrame.explain": [[885, null]], "polars.LazyFrame.explode": [[886, null]], "polars.LazyFrame.fill_nan": [[887, null]], "polars.LazyFrame.fill_null": [[888, null]], "polars.LazyFrame.filter": [[889, null]], "polars.LazyFrame.first": [[890, null]], "polars.LazyFrame.gather_every": [[891, null]], "polars.LazyFrame.group_by": [[892, null]], "polars.LazyFrame.group_by_dynamic": [[893, null]], "polars.LazyFrame.head": [[894, null]], "polars.LazyFrame.inspect": [[895, null]], "polars.LazyFrame.interpolate": [[896, null]], "polars.LazyFrame.join": [[897, null]], "polars.LazyFrame.join_asof": [[898, null]], "polars.LazyFrame.join_where": [[899, null]], "polars.LazyFrame.last": [[900, null]], "polars.LazyFrame.lazy": [[901, null]], "polars.LazyFrame.limit": [[902, null]], "polars.LazyFrame.map_batches": [[903, null]], "polars.LazyFrame.match_to_schema": [[904, null]], "polars.LazyFrame.max": [[905, null]], "polars.LazyFrame.mean": [[906, null]], "polars.LazyFrame.median": [[907, null]], "polars.LazyFrame.melt": [[908, null]], "polars.LazyFrame.merge_sorted": [[909, null]], "polars.LazyFrame.min": [[910, null]], "polars.LazyFrame.null_count": [[911, null]], "polars.LazyFrame.pipe": [[912, null]], "polars.LazyFrame.profile": [[913, null]], "polars.LazyFrame.quantile": [[914, null]], "polars.LazyFrame.remote": [[915, null]], "polars.LazyFrame.remove": [[916, null]], "polars.LazyFrame.rename": [[917, null]], "polars.LazyFrame.reverse": [[918, null]], "polars.LazyFrame.rolling": [[919, null]], "polars.LazyFrame.schema": [[920, null]], "polars.LazyFrame.select": [[921, null]], "polars.LazyFrame.select_seq": [[922, null]], "polars.LazyFrame.serialize": [[923, null]], "polars.LazyFrame.set_sorted": [[924, null]], "polars.LazyFrame.shift": [[925, null]], "polars.LazyFrame.show_graph": [[926, null]], "polars.LazyFrame.sink_csv": [[49, null]], "polars.LazyFrame.sink_ipc": [[50, null]], "polars.LazyFrame.sink_ndjson": [[51, null]], "polars.LazyFrame.sink_parquet": [[52, null]], "polars.LazyFrame.slice": [[927, null]], "polars.LazyFrame.sort": [[928, null]], "polars.LazyFrame.sql": [[929, null]], "polars.LazyFrame.std": [[930, null]], "polars.LazyFrame.sum": [[931, null]], "polars.LazyFrame.tail": [[932, null]], "polars.LazyFrame.top_k": [[933, null]], "polars.LazyFrame.unique": [[934, null]], "polars.LazyFrame.unnest": [[935, null]], "polars.LazyFrame.unpivot": [[936, null]], "polars.LazyFrame.update": [[937, null]], "polars.LazyFrame.var": [[938, null]], "polars.LazyFrame.width": [[939, null]], "polars.LazyFrame.with_columns": [[940, null]], "polars.LazyFrame.with_columns_seq": [[941, null]], "polars.LazyFrame.with_context": [[942, null]], "polars.LazyFrame.with_row_count": [[943, null]], "polars.LazyFrame.with_row_index": [[944, null]], "polars.PartitionByKey": [[53, null]], "polars.PartitionMaxSize": [[54, null]], "polars.PartitionParted": [[55, null]], "polars.QueryOptFlags": [[945, null]], "polars.SQLContext.execute": [[1383, null]], "polars.SQLContext.execute_global": [[1384, null]], "polars.SQLContext.register": [[1385, null]], "polars.SQLContext.register_globals": [[1386, null]], "polars.SQLContext.register_many": [[1387, null]], "polars.SQLContext.tables": [[1388, null]], "polars.SQLContext.unregister": [[1389, null]], "polars.ScanCastOptions": [[56, null]], "polars.Series.__array__": [[979, null]], "polars.Series.__arrow_c_stream__": [[980, null]], "polars.Series.__getitem__": [[981, null]], "polars.Series.abs": [[982, null]], "polars.Series.alias": [[983, null]], "polars.Series.all": [[984, null]], "polars.Series.any": [[985, null]], "polars.Series.append": [[986, null]], "polars.Series.approx_n_unique": [[987, null]], "polars.Series.arccos": [[988, null]], "polars.Series.arccosh": [[989, null]], "polars.Series.arcsin": [[990, null]], "polars.Series.arcsinh": [[991, null]], "polars.Series.arctan": [[992, null]], "polars.Series.arctanh": [[993, null]], "polars.Series.arg_max": [[994, null]], "polars.Series.arg_min": [[995, null]], "polars.Series.arg_sort": [[996, null]], "polars.Series.arg_true": [[997, null]], "polars.Series.arg_unique": [[998, null]], "polars.Series.arr.all": [[999, null]], "polars.Series.arr.any": [[1000, null]], "polars.Series.arr.arg_max": [[1001, null]], "polars.Series.arr.arg_min": [[1002, null]], "polars.Series.arr.contains": [[1003, null]], "polars.Series.arr.count_matches": [[1004, null]], "polars.Series.arr.explode": [[1005, null]], "polars.Series.arr.first": [[1006, null]], "polars.Series.arr.get": [[1007, null]], "polars.Series.arr.join": [[1008, null]], "polars.Series.arr.last": [[1009, null]], "polars.Series.arr.max": [[1010, null]], "polars.Series.arr.median": [[1011, null]], "polars.Series.arr.min": [[1012, null]], "polars.Series.arr.n_unique": [[1013, null]], "polars.Series.arr.reverse": [[1014, null]], "polars.Series.arr.shift": [[1015, null]], "polars.Series.arr.sort": [[1016, null]], "polars.Series.arr.std": [[1017, null]], "polars.Series.arr.sum": [[1018, null]], "polars.Series.arr.to_list": [[1019, null]], "polars.Series.arr.to_struct": [[1020, null]], "polars.Series.arr.unique": [[1021, null]], "polars.Series.arr.var": [[1022, null]], "polars.Series.backward_fill": [[1023, null]], "polars.Series.bin.contains": [[1024, null]], "polars.Series.bin.decode": [[1025, null]], "polars.Series.bin.encode": [[1026, null]], "polars.Series.bin.ends_with": [[1027, null]], "polars.Series.bin.reinterpret": [[1028, null]], "polars.Series.bin.size": [[1029, null]], "polars.Series.bin.starts_with": [[1030, null]], "polars.Series.bitwise_and": [[1031, null]], "polars.Series.bitwise_count_ones": [[1032, null]], "polars.Series.bitwise_count_zeros": [[1033, null]], "polars.Series.bitwise_leading_ones": [[1034, null]], "polars.Series.bitwise_leading_zeros": [[1035, null]], "polars.Series.bitwise_or": [[1036, null]], "polars.Series.bitwise_trailing_ones": [[1037, null]], "polars.Series.bitwise_trailing_zeros": [[1038, null]], "polars.Series.bitwise_xor": [[1039, null]], "polars.Series.bottom_k": [[1040, null]], "polars.Series.bottom_k_by": [[1041, null]], "polars.Series.cast": [[1042, null]], "polars.Series.cat.ends_with": [[1043, null]], "polars.Series.cat.get_categories": [[1044, null]], "polars.Series.cat.is_local": [[1045, null]], "polars.Series.cat.len_bytes": [[1046, null]], "polars.Series.cat.len_chars": [[1047, null]], "polars.Series.cat.starts_with": [[1048, null]], "polars.Series.cat.to_local": [[1049, null]], "polars.Series.cat.uses_lexical_ordering": [[1050, null]], "polars.Series.cbrt": [[1051, null]], "polars.Series.ceil": [[1052, null]], "polars.Series.chunk_lengths": [[1053, null]], "polars.Series.clear": [[1054, null]], "polars.Series.clip": [[1055, null]], "polars.Series.clone": [[1056, null]], "polars.Series.cos": [[1057, null]], "polars.Series.cosh": [[1058, null]], "polars.Series.cot": [[1059, null]], "polars.Series.count": [[1060, null]], "polars.Series.cum_count": [[1061, null]], "polars.Series.cum_max": [[1062, null]], "polars.Series.cum_min": [[1063, null]], "polars.Series.cum_prod": [[1064, null]], "polars.Series.cum_sum": [[1065, null]], "polars.Series.cumulative_eval": [[1066, null]], "polars.Series.cut": [[1067, null]], "polars.Series.describe": [[1068, null]], "polars.Series.diff": [[1069, null]], "polars.Series.dot": [[1070, null]], "polars.Series.drop_nans": [[1071, null]], "polars.Series.drop_nulls": [[1072, null]], "polars.Series.dt.add_business_days": [[1073, null]], "polars.Series.dt.base_utc_offset": [[1074, null]], "polars.Series.dt.cast_time_unit": [[1075, null]], "polars.Series.dt.century": [[1076, null]], "polars.Series.dt.combine": [[1077, null]], "polars.Series.dt.convert_time_zone": [[1078, null]], "polars.Series.dt.date": [[1079, null]], "polars.Series.dt.datetime": [[1080, null]], "polars.Series.dt.day": [[1081, null]], "polars.Series.dt.dst_offset": [[1082, null]], "polars.Series.dt.epoch": [[1083, null]], "polars.Series.dt.hour": [[1084, null]], "polars.Series.dt.is_business_day": [[1085, null]], "polars.Series.dt.is_leap_year": [[1086, null]], "polars.Series.dt.iso_year": [[1087, null]], "polars.Series.dt.max": [[1088, null]], "polars.Series.dt.mean": [[1089, null]], "polars.Series.dt.median": [[1090, null]], "polars.Series.dt.microsecond": [[1091, null]], "polars.Series.dt.millennium": [[1092, null]], "polars.Series.dt.millisecond": [[1093, null]], "polars.Series.dt.min": [[1094, null]], "polars.Series.dt.minute": [[1095, null]], "polars.Series.dt.month": [[1096, null]], "polars.Series.dt.month_end": [[1097, null]], "polars.Series.dt.month_start": [[1098, null]], "polars.Series.dt.nanosecond": [[1099, null]], "polars.Series.dt.offset_by": [[1100, null]], "polars.Series.dt.ordinal_day": [[1101, null]], "polars.Series.dt.quarter": [[1102, null]], "polars.Series.dt.replace": [[1103, null]], "polars.Series.dt.replace_time_zone": [[1104, null]], "polars.Series.dt.round": [[1105, null]], "polars.Series.dt.second": [[1106, null]], "polars.Series.dt.strftime": [[1107, null]], "polars.Series.dt.time": [[1108, null]], "polars.Series.dt.timestamp": [[1109, null]], "polars.Series.dt.to_string": [[1110, null]], "polars.Series.dt.total_days": [[1111, null]], "polars.Series.dt.total_hours": [[1112, null]], "polars.Series.dt.total_microseconds": [[1113, null]], "polars.Series.dt.total_milliseconds": [[1114, null]], "polars.Series.dt.total_minutes": [[1115, null]], "polars.Series.dt.total_nanoseconds": [[1116, null]], "polars.Series.dt.total_seconds": [[1117, null]], "polars.Series.dt.truncate": [[1118, null]], "polars.Series.dt.week": [[1119, null]], "polars.Series.dt.weekday": [[1120, null]], "polars.Series.dt.with_time_unit": [[1121, null]], "polars.Series.dt.year": [[1122, null]], "polars.Series.dtype": [[1123, null]], "polars.Series.entropy": [[1124, null]], "polars.Series.eq": [[1125, null]], "polars.Series.eq_missing": [[1126, null]], "polars.Series.equals": [[1127, null]], "polars.Series.estimated_size": [[1128, null]], "polars.Series.ewm_mean": [[1129, null]], "polars.Series.ewm_mean_by": [[1130, null]], "polars.Series.ewm_std": [[1131, null]], "polars.Series.ewm_var": [[1132, null]], "polars.Series.exp": [[1133, null]], "polars.Series.explode": [[1134, null]], "polars.Series.extend": [[1135, null]], "polars.Series.extend_constant": [[1136, null]], "polars.Series.fill_nan": [[1137, null]], "polars.Series.fill_null": [[1138, null]], "polars.Series.filter": [[1139, null]], "polars.Series.first": [[1140, null]], "polars.Series.flags": [[1141, null]], "polars.Series.floor": [[1142, null]], "polars.Series.forward_fill": [[1143, null]], "polars.Series.gather": [[1144, null]], "polars.Series.gather_every": [[1145, null]], "polars.Series.ge": [[1146, null]], "polars.Series.get_chunks": [[1147, null]], "polars.Series.gt": [[1148, null]], "polars.Series.has_nulls": [[1149, null]], "polars.Series.has_validity": [[1150, null]], "polars.Series.hash": [[1151, null]], "polars.Series.head": [[1152, null]], "polars.Series.hist": [[1153, null]], "polars.Series.implode": [[1154, null]], "polars.Series.index_of": [[1155, null]], "polars.Series.interpolate": [[1156, null]], "polars.Series.interpolate_by": [[1157, null]], "polars.Series.is_between": [[1158, null]], "polars.Series.is_close": [[1159, null]], "polars.Series.is_duplicated": [[1160, null]], "polars.Series.is_empty": [[1161, null]], "polars.Series.is_finite": [[1162, null]], "polars.Series.is_first_distinct": [[1163, null]], "polars.Series.is_in": [[1164, null]], "polars.Series.is_infinite": [[1165, null]], "polars.Series.is_last_distinct": [[1166, null]], "polars.Series.is_nan": [[1167, null]], "polars.Series.is_not_nan": [[1168, null]], "polars.Series.is_not_null": [[1169, null]], "polars.Series.is_null": [[1170, null]], "polars.Series.is_sorted": [[1171, null]], "polars.Series.is_unique": [[1172, null]], "polars.Series.item": [[1173, null]], "polars.Series.kurtosis": [[1174, null]], "polars.Series.last": [[1175, null]], "polars.Series.le": [[1176, null]], "polars.Series.len": [[1177, null]], "polars.Series.limit": [[1178, null]], "polars.Series.list.all": [[1179, null]], "polars.Series.list.any": [[1180, null]], "polars.Series.list.arg_max": [[1181, null]], "polars.Series.list.arg_min": [[1182, null]], "polars.Series.list.concat": [[1183, null]], "polars.Series.list.contains": [[1184, null]], "polars.Series.list.count_matches": [[1185, null]], "polars.Series.list.diff": [[1186, null]], "polars.Series.list.drop_nulls": [[1187, null]], "polars.Series.list.eval": [[1188, null]], "polars.Series.list.explode": [[1189, null]], "polars.Series.list.first": [[1190, null]], "polars.Series.list.gather": [[1191, null]], "polars.Series.list.gather_every": [[1192, null]], "polars.Series.list.get": [[1193, null]], "polars.Series.list.head": [[1194, null]], "polars.Series.list.join": [[1195, null]], "polars.Series.list.last": [[1196, null]], "polars.Series.list.len": [[1197, null]], "polars.Series.list.max": [[1198, null]], "polars.Series.list.mean": [[1199, null]], "polars.Series.list.median": [[1200, null]], "polars.Series.list.min": [[1201, null]], "polars.Series.list.n_unique": [[1202, null]], "polars.Series.list.reverse": [[1203, null]], "polars.Series.list.sample": [[1204, null]], "polars.Series.list.set_difference": [[1205, null]], "polars.Series.list.set_intersection": [[1206, null]], "polars.Series.list.set_symmetric_difference": [[1207, null]], "polars.Series.list.set_union": [[1208, null]], "polars.Series.list.shift": [[1209, null]], "polars.Series.list.slice": [[1210, null]], "polars.Series.list.sort": [[1211, null]], "polars.Series.list.std": [[1212, null]], "polars.Series.list.sum": [[1213, null]], "polars.Series.list.tail": [[1214, null]], "polars.Series.list.to_array": [[1215, null]], "polars.Series.list.to_struct": [[1216, null]], "polars.Series.list.unique": [[1217, null]], "polars.Series.list.var": [[1218, null]], "polars.Series.log": [[1219, null]], "polars.Series.log10": [[1220, null]], "polars.Series.log1p": [[1221, null]], "polars.Series.lower_bound": [[1222, null]], "polars.Series.lt": [[1223, null]], "polars.Series.map_elements": [[1224, null]], "polars.Series.max": [[1225, null]], "polars.Series.mean": [[1226, null]], "polars.Series.median": [[1227, null]], "polars.Series.min": [[1228, null]], "polars.Series.mode": [[1229, null]], "polars.Series.n_chunks": [[1230, null]], "polars.Series.n_unique": [[1231, null]], "polars.Series.name": [[1232, null]], "polars.Series.nan_max": [[1233, null]], "polars.Series.nan_min": [[1234, null]], "polars.Series.ne": [[1235, null]], "polars.Series.ne_missing": [[1236, null]], "polars.Series.new_from_index": [[1237, null]], "polars.Series.not_": [[1238, null]], "polars.Series.null_count": [[1239, null]], "polars.Series.pct_change": [[1240, null]], "polars.Series.peak_max": [[1241, null]], "polars.Series.peak_min": [[1242, null]], "polars.Series.pow": [[1243, null]], "polars.Series.product": [[1244, null]], "polars.Series.qcut": [[1245, null]], "polars.Series.quantile": [[1246, null]], "polars.Series.rank": [[1247, null]], "polars.Series.rechunk": [[1248, null]], "polars.Series.reinterpret": [[1249, null]], "polars.Series.rename": [[1250, null]], "polars.Series.repeat_by": [[1251, null]], "polars.Series.replace": [[1252, null]], "polars.Series.replace_strict": [[1253, null]], "polars.Series.reshape": [[1254, null]], "polars.Series.reverse": [[1255, null]], "polars.Series.rle": [[1256, null]], "polars.Series.rle_id": [[1257, null]], "polars.Series.rolling_kurtosis": [[1258, null]], "polars.Series.rolling_map": [[1259, null]], "polars.Series.rolling_max": [[1260, null]], "polars.Series.rolling_mean": [[1261, null]], "polars.Series.rolling_median": [[1262, null]], "polars.Series.rolling_min": [[1263, null]], "polars.Series.rolling_quantile": [[1264, null]], "polars.Series.rolling_skew": [[1265, null]], "polars.Series.rolling_std": [[1266, null]], "polars.Series.rolling_sum": [[1267, null]], "polars.Series.rolling_var": [[1268, null]], "polars.Series.round": [[1269, null]], "polars.Series.round_sig_figs": [[1270, null]], "polars.Series.sample": [[1271, null]], "polars.Series.scatter": [[1272, null]], "polars.Series.search_sorted": [[1273, null]], "polars.Series.set": [[1274, null]], "polars.Series.set_sorted": [[1275, null]], "polars.Series.shape": [[1276, null]], "polars.Series.shift": [[1277, null]], "polars.Series.shrink_dtype": [[1278, null]], "polars.Series.shrink_to_fit": [[1279, null]], "polars.Series.shuffle": [[1280, null]], "polars.Series.sign": [[1281, null]], "polars.Series.sin": [[1282, null]], "polars.Series.sinh": [[1283, null]], "polars.Series.skew": [[1284, null]], "polars.Series.slice": [[1285, null]], "polars.Series.sort": [[1286, null]], "polars.Series.sqrt": [[1287, null]], "polars.Series.std": [[1288, null]], "polars.Series.str.concat": [[1289, null]], "polars.Series.str.contains": [[1290, null]], "polars.Series.str.contains_any": [[1291, null]], "polars.Series.str.count_matches": [[1292, null]], "polars.Series.str.decode": [[1293, null]], "polars.Series.str.encode": [[1294, null]], "polars.Series.str.ends_with": [[1295, null]], "polars.Series.str.escape_regex": [[1296, null]], "polars.Series.str.explode": [[1297, null]], "polars.Series.str.extract": [[1298, null]], "polars.Series.str.extract_all": [[1299, null]], "polars.Series.str.extract_groups": [[1300, null]], "polars.Series.str.extract_many": [[1301, null]], "polars.Series.str.find": [[1302, null]], "polars.Series.str.find_many": [[1303, null]], "polars.Series.str.head": [[1304, null]], "polars.Series.str.join": [[1305, null]], "polars.Series.str.json_decode": [[1306, null]], "polars.Series.str.json_path_match": [[1307, null]], "polars.Series.str.len_bytes": [[1308, null]], "polars.Series.str.len_chars": [[1309, null]], "polars.Series.str.normalize": [[1310, null]], "polars.Series.str.pad_end": [[1311, null]], "polars.Series.str.pad_start": [[1312, null]], "polars.Series.str.replace": [[1313, null]], "polars.Series.str.replace_all": [[1314, null]], "polars.Series.str.replace_many": [[1315, null]], "polars.Series.str.reverse": [[1316, null]], "polars.Series.str.slice": [[1317, null]], "polars.Series.str.split": [[1318, null]], "polars.Series.str.split_exact": [[1319, null]], "polars.Series.str.splitn": [[1320, null]], "polars.Series.str.starts_with": [[1321, null]], "polars.Series.str.strip_chars": [[1322, null]], "polars.Series.str.strip_chars_end": [[1323, null]], "polars.Series.str.strip_chars_start": [[1324, null]], "polars.Series.str.strip_prefix": [[1325, null]], "polars.Series.str.strip_suffix": [[1326, null]], "polars.Series.str.strptime": [[1327, null]], "polars.Series.str.tail": [[1328, null]], "polars.Series.str.to_date": [[1329, null]], "polars.Series.str.to_datetime": [[1330, null]], "polars.Series.str.to_decimal": [[1331, null]], "polars.Series.str.to_integer": [[1332, null]], "polars.Series.str.to_lowercase": [[1333, null]], "polars.Series.str.to_time": [[1334, null]], "polars.Series.str.to_titlecase": [[1335, null]], "polars.Series.str.to_uppercase": [[1336, null]], "polars.Series.str.zfill": [[1337, null]], "polars.Series.struct.field": [[1338, null]], "polars.Series.struct.fields": [[1339, null]], "polars.Series.struct.json_encode": [[1340, null]], "polars.Series.struct.rename_fields": [[1341, null]], "polars.Series.struct.schema": [[1342, null]], "polars.Series.struct.unnest": [[1343, null]], "polars.Series.sum": [[1344, null]], "polars.Series.tail": [[1345, null]], "polars.Series.tan": [[1346, null]], "polars.Series.tanh": [[1347, null]], "polars.Series.to_arrow": [[1348, null]], "polars.Series.to_dummies": [[1349, null]], "polars.Series.to_frame": [[1350, null]], "polars.Series.to_init_repr": [[1351, null]], "polars.Series.to_jax": [[1352, null]], "polars.Series.to_list": [[1353, null]], "polars.Series.to_numpy": [[1354, null]], "polars.Series.to_pandas": [[1355, null]], "polars.Series.to_physical": [[1356, null]], "polars.Series.to_torch": [[1357, null]], "polars.Series.top_k": [[1358, null]], "polars.Series.top_k_by": [[1359, null]], "polars.Series.unique": [[1360, null]], "polars.Series.unique_counts": [[1361, null]], "polars.Series.upper_bound": [[1362, null]], "polars.Series.value_counts": [[1363, null]], "polars.Series.var": [[1364, null]], "polars.Series.zip_with": [[1365, null]], "polars.StringCache": [[57, null]], "polars.align_frames": [[58, null]], "polars.all": [[767, null]], "polars.all_horizontal": [[768, null]], "polars.any": [[769, null]], "polars.any_horizontal": [[770, null]], "polars.api.register_dataframe_namespace": [[59, null]], "polars.api.register_expr_namespace": [[60, null]], "polars.api.register_lazyframe_namespace": [[61, null]], "polars.api.register_series_namespace": [[62, null]], "polars.approx_n_unique": [[771, null]], "polars.arange": [[772, null]], "polars.arctan2": [[773, null]], "polars.arctan2d": [[774, null]], "polars.arg_sort_by": [[775, null]], "polars.arg_where": [[776, null]], "polars.build_info": [[63, null]], "polars.business_day_count": [[777, null]], "polars.catalog.unity.CatalogInfo": [[199, null]], "polars.catalog.unity.ColumnInfo": [[200, null]], "polars.catalog.unity.DataSourceFormat": [[201, null]], "polars.catalog.unity.NamespaceInfo": [[202, null]], "polars.catalog.unity.TableInfo": [[203, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[204, null]], "polars.catalog.unity.TableType": [[205, null]], "polars.coalesce": [[778, null]], "polars.col": [[848, null]], "polars.collect_all": [[64, null]], "polars.collect_all_async": [[65, null]], "polars.concat": [[66, null]], "polars.concat_arr": [[779, null]], "polars.concat_list": [[780, null]], "polars.concat_str": [[781, null]], "polars.corr": [[782, null]], "polars.count": [[783, null]], "polars.cov": [[784, null]], "polars.cum_count": [[785, null]], "polars.cum_fold": [[786, null]], "polars.cum_reduce": [[787, null]], "polars.cum_sum": [[788, null]], "polars.cum_sum_horizontal": [[789, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[335, null]], "polars.dataframe.group_by.GroupBy.agg": [[336, null]], "polars.dataframe.group_by.GroupBy.all": [[337, null]], "polars.dataframe.group_by.GroupBy.count": [[338, null]], "polars.dataframe.group_by.GroupBy.first": [[339, null]], "polars.dataframe.group_by.GroupBy.head": [[340, null]], "polars.dataframe.group_by.GroupBy.last": [[341, null]], "polars.dataframe.group_by.GroupBy.len": [[342, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[343, null]], "polars.dataframe.group_by.GroupBy.max": [[344, null]], "polars.dataframe.group_by.GroupBy.mean": [[345, null]], "polars.dataframe.group_by.GroupBy.median": [[346, null]], "polars.dataframe.group_by.GroupBy.min": [[347, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[348, null]], "polars.dataframe.group_by.GroupBy.quantile": [[349, null]], "polars.dataframe.group_by.GroupBy.sum": [[350, null]], "polars.dataframe.group_by.GroupBy.tail": [[351, null]], "polars.datatypes.Array": [[67, null]], "polars.datatypes.Binary": [[68, null]], "polars.datatypes.Boolean": [[69, null]], "polars.datatypes.Categorical": [[70, null]], "polars.datatypes.DataType": [[71, null]], "polars.datatypes.Date": [[72, null]], "polars.datatypes.Datetime": [[73, null]], "polars.datatypes.Decimal": [[74, null]], "polars.datatypes.Duration": [[75, null]], "polars.datatypes.Enum": [[76, null]], "polars.datatypes.Field": [[77, null]], "polars.datatypes.Float32": [[78, null]], "polars.datatypes.Float64": [[79, null]], "polars.datatypes.Int128": [[80, null]], "polars.datatypes.Int16": [[81, null]], "polars.datatypes.Int32": [[82, null]], "polars.datatypes.Int64": [[83, null]], "polars.datatypes.Int8": [[84, null]], "polars.datatypes.List": [[85, null]], "polars.datatypes.Null": [[86, null]], "polars.datatypes.Object": [[87, null]], "polars.datatypes.String": [[88, null]], "polars.datatypes.Struct": [[89, null]], "polars.datatypes.Time": [[90, null]], "polars.datatypes.UInt16": [[91, null]], "polars.datatypes.UInt32": [[92, null]], "polars.datatypes.UInt64": [[93, null]], "polars.datatypes.UInt8": [[94, null]], "polars.datatypes.Unknown": [[95, null]], "polars.datatypes.Utf8": [[96, null]], "polars.date": [[790, null]], "polars.date_range": [[791, null]], "polars.date_ranges": [[792, null]], "polars.datetime": [[793, null]], "polars.datetime_range": [[794, null]], "polars.datetime_ranges": [[795, null]], "polars.defer": [[97, null]], "polars.disable_string_cache": [[98, null]], "polars.dtype_of": [[99, null]], "polars.duration": [[796, null]], "polars.element": [[797, null]], "polars.enable_string_cache": [[100, null]], "polars.escape_regex": [[101, null]], "polars.exceptions.CategoricalRemappingWarning": [[102, null]], "polars.exceptions.ChronoFormatWarning": [[103, null]], "polars.exceptions.ColumnNotFoundError": [[104, null]], "polars.exceptions.ComputeError": [[105, null]], "polars.exceptions.CustomUFuncWarning": [[106, null]], "polars.exceptions.DataOrientationWarning": [[107, null]], "polars.exceptions.DuplicateError": [[108, null]], "polars.exceptions.InvalidOperationError": [[109, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[110, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[111, null]], "polars.exceptions.NoDataError": [[112, null]], "polars.exceptions.NoRowsReturnedError": [[113, null]], "polars.exceptions.OutOfBoundsError": [[114, null]], "polars.exceptions.PanicException": [[115, null]], "polars.exceptions.ParameterCollisionError": [[116, null]], "polars.exceptions.PerformanceWarning": [[117, null]], "polars.exceptions.PolarsError": [[118, null]], "polars.exceptions.PolarsInefficientMapWarning": [[119, null]], "polars.exceptions.PolarsWarning": [[120, null]], "polars.exceptions.RowsError": [[121, null]], "polars.exceptions.SQLInterfaceError": [[122, null]], "polars.exceptions.SQLSyntaxError": [[123, null]], "polars.exceptions.SchemaError": [[124, null]], "polars.exceptions.SchemaFieldNotFoundError": [[125, null]], "polars.exceptions.ShapeError": [[126, null]], "polars.exceptions.StringCacheMismatchError": [[127, null]], "polars.exceptions.StructFieldNotFoundError": [[128, null]], "polars.exceptions.TooManyRowsReturnedError": [[129, null]], "polars.exceptions.UnstableWarning": [[130, null]], "polars.exceptions.UnsuitableSQLError": [[131, null]], "polars.exclude": [[798, null]], "polars.explain_all": [[132, null]], "polars.first": [[799, null]], "polars.fold": [[800, null]], "polars.format": [[801, null]], "polars.from_arrow": [[133, null]], "polars.from_dataframe": [[134, null]], "polars.from_dict": [[135, null]], "polars.from_dicts": [[136, null]], "polars.from_epoch": [[802, null]], "polars.from_numpy": [[137, null]], "polars.from_pandas": [[138, null]], "polars.from_records": [[139, null]], "polars.from_repr": [[140, null]], "polars.get_index_type": [[141, null]], "polars.groups": [[803, null]], "polars.head": [[804, null]], "polars.implode": [[805, null]], "polars.int_range": [[806, null]], "polars.int_ranges": [[807, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[142, null]], "polars.io.parquet.ParquetFieldOverwrites": [[143, null]], "polars.io.partition.BasePartitionContext": [[144, null]], "polars.io.partition.KeyedPartition": [[145, null]], "polars.io.partition.KeyedPartitionContext": [[146, null]], "polars.io.plugins.register_io_source": [[147, null]], "polars.json_normalize": [[148, null]], "polars.last": [[808, null]], "polars.lazyframe.engine_config.GPUEngine": [[946, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[947, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[948, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[949, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[950, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[951, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[952, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[953, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[954, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[955, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[956, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[957, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[958, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[959, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[960, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[961, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[962, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[963, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[964, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[965, null]], "polars.len": [[809, null]], "polars.linear_space": [[810, null]], "polars.linear_spaces": [[811, null]], "polars.lit": [[812, null]], "polars.map_batches": [[813, null]], "polars.map_groups": [[814, null]], "polars.max": [[815, null]], "polars.max_horizontal": [[816, null]], "polars.mean": [[817, null]], "polars.mean_horizontal": [[818, null]], "polars.median": [[819, null]], "polars.min": [[820, null]], "polars.min_horizontal": [[821, null]], "polars.n_unique": [[822, null]], "polars.nth": [[823, null]], "polars.ones": [[824, null]], "polars.plugins.register_plugin_function": [[149, null]], "polars.quantile": [[825, null]], "polars.read_avro": [[150, null]], "polars.read_clipboard": [[151, null]], "polars.read_csv": [[152, null]], "polars.read_csv_batched": [[153, null]], "polars.read_database": [[154, null]], "polars.read_database_uri": [[155, null]], "polars.read_delta": [[156, null]], "polars.read_excel": [[157, null]], "polars.read_ipc": [[158, null]], "polars.read_ipc_schema": [[159, null]], "polars.read_ipc_stream": [[160, null]], "polars.read_json": [[161, null]], "polars.read_ndjson": [[162, null]], "polars.read_ods": [[163, null]], "polars.read_parquet": [[164, null]], "polars.read_parquet_metadata": [[165, null]], "polars.read_parquet_schema": [[166, null]], "polars.reduce": [[826, null]], "polars.repeat": [[827, null]], "polars.rolling_corr": [[828, null]], "polars.rolling_cov": [[829, null]], "polars.scan_csv": [[167, null]], "polars.scan_delta": [[168, null]], "polars.scan_iceberg": [[169, null]], "polars.scan_ipc": [[170, null]], "polars.scan_ndjson": [[171, null]], "polars.scan_parquet": [[172, null]], "polars.scan_pyarrow_dataset": [[173, null]], "polars.select": [[830, null]], "polars.self_dtype": [[174, null]], "polars.set_random_seed": [[175, null]], "polars.show_versions": [[176, null]], "polars.sql": [[831, null]], "polars.sql_expr": [[832, null]], "polars.std": [[833, null]], "polars.struct": [[834, null]], "polars.sum": [[835, null]], "polars.sum_horizontal": [[836, null]], "polars.tail": [[837, null]], "polars.testing.assert_frame_equal": [[177, null]], "polars.testing.assert_frame_not_equal": [[178, null]], "polars.testing.assert_series_equal": [[179, null]], "polars.testing.assert_series_not_equal": [[180, null]], "polars.testing.parametric.column": [[181, null]], "polars.testing.parametric.columns": [[182, null]], "polars.testing.parametric.create_list_strategy": [[183, null]], "polars.testing.parametric.dataframes": [[184, null]], "polars.testing.parametric.dtypes": [[185, null]], "polars.testing.parametric.lists": [[186, null]], "polars.testing.parametric.load_profile": [[187, null]], "polars.testing.parametric.series": [[188, null]], "polars.testing.parametric.set_profile": [[189, null]], "polars.thread_pool_size": [[190, null]], "polars.threadpool_size": [[191, null]], "polars.time": [[838, null]], "polars.time_range": [[839, null]], "polars.time_ranges": [[840, null]], "polars.using_string_cache": [[192, null]], "polars.var": [[841, null]], "polars.when": [[842, null]], "polars.zeros": [[843, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType.to_dtype_expr", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.dtype_of", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.self_dtype", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatype_expr", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_close", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_close", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.to_dtype_expr.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.dtype_of.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.self_dtype.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatype_expr.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_close.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_close.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[210, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[979, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[211, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[980, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[212, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1402, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1402, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[213, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[867, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[981, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[193, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[199, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[200, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[202, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[203, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[32, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[33, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[34, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[35, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[67, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[68, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[69, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[70, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[71, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[72, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[73, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[74, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[75, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[76, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[77, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[78, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[79, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[80, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[81, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[82, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[83, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[84, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[85, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[86, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[87, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[88, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[89, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[90, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[91, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[92, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[93, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[94, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[95, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[143, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[144, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[145, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[146, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[946, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[53, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[54, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[55, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[945, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[56, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1402, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[57, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[181, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[214, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[366, "polars.Expr.abs", false]], "abs() (polars.series method)": [[982, "polars.Series.abs", false]], "add() (polars.expr method)": [[367, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[455, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1073, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[947, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[368, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[369, "polars.Expr.alias", false]], "alias() (polars.series method)": [[983, "polars.Series.alias", false]], "align_frames() (in module polars)": [[58, "polars.align_frames", false]], "all() (in module polars)": [[767, "polars.all", false]], "all() (in module polars.selectors)": [[977, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[370, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[386, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[553, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[948, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[984, "polars.Series.all", false]], "all() (polars.series.arr method)": [[999, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1179, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[768, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[977, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[977, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[371, "polars.Expr.and_", false]], "any() (in module polars)": [[769, "polars.any", false]], "any() (polars.expr method)": [[372, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[387, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[554, "polars.Expr.list.any", false]], "any() (polars.series method)": [[985, "polars.Series.any", false]], "any() (polars.series.arr method)": [[1000, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1180, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[770, "polars.any_horizontal", false]], "append() (polars.expr method)": [[373, "polars.Expr.append", false]], "append() (polars.series method)": [[986, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[771, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[215, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[374, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[868, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[987, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[772, "polars.arange", false]], "arccos() (polars.expr method)": [[375, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[988, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[376, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[989, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[377, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[990, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[378, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[991, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[379, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[992, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[773, "polars.arctan2", false]], "arctan2d() (in module polars)": [[774, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[380, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[993, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[381, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[388, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[555, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[994, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[1001, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1181, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[382, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[389, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[556, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[995, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[1002, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1182, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[383, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[996, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[775, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[384, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[997, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[385, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[998, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[776, "polars.arg_where", false]], "array (class in polars.datatypes)": [[67, "polars.datatypes.Array", false]], "array() (in module polars.selectors)": [[977, "polars.selectors.array", false]], "as_expr() (polars.selectors.selector method)": [[977, "polars.selectors.Selector.as_expr", false]], "assert_frame_equal() (in module polars.testing)": [[177, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[178, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[179, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[180, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[410, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1023, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[456, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1074, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[144, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[68, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[977, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[418, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1031, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[419, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1032, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[420, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1033, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[421, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1034, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[422, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1035, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[423, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1036, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[424, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1037, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[425, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1038, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[426, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1039, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[69, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[977, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[216, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[427, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[869, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1040, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[428, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1041, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[63, "polars.build_info", false]], "business_day_count() (in module polars)": [[777, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[977, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[977, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[977, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[870, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[963, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[217, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[429, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[871, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1042, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[457, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1075, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[193, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[70, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[977, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[102, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[435, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1051, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[436, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1052, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[458, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1076, "polars.Series.dt.century", false]], "chronoformatwarning": [[103, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1053, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[218, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[872, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1054, "polars.Series.clear", false]], "clip() (polars.expr method)": [[437, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1055, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[219, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[873, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1056, "polars.Series.clone", false]], "coalesce() (in module polars)": [[778, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[874, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[64, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[65, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[875, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[220, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[876, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[181, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[200, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[104, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[221, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[877, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[459, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1077, "polars.Series.dt.combine", false]], "computeerror": [[105, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[66, "polars.concat", false]], "concat() (polars.expr.list method)": [[557, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[697, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1183, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1289, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[779, "polars.concat_arr", false]], "concat_list() (in module polars)": [[780, "polars.concat_list", false]], "concat_str() (in module polars)": [[781, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[977, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[390, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[411, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[558, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[698, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[1003, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1024, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1184, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1290, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[699, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1291, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[460, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1078, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[782, "polars.corr", false]], "corr() (polars.dataframe method)": [[222, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[438, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1057, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[439, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1058, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[440, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1059, "polars.Series.cot", false]], "count() (in module polars)": [[783, "polars.count", false]], "count() (polars.dataframe method)": [[223, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[441, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[878, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[949, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1060, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[391, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[559, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[700, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[1004, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1185, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1292, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[784, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[32, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[33, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[34, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[35, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[785, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[442, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1061, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[786, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[443, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1062, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[444, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1063, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[445, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1064, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[787, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[788, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[446, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1065, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[789, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[447, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1066, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[106, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[448, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1067, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[107, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[201, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[71, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[72, "polars.datatypes.Date", false]], "date() (in module polars)": [[790, "polars.date", false]], "date() (in module polars.selectors)": [[977, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[461, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1079, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[791, "polars.date_range", false]], "date_ranges() (in module polars)": [[792, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[73, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[793, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[977, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[462, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1080, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[794, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[795, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[463, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1081, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[74, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[977, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[412, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[701, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1025, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1293, "polars.Series.str.decode", false]], "defer() (in module polars)": [[97, "polars.defer", false]], "degrees() (polars.expr method)": [[449, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[224, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[879, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1068, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[225, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[450, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[880, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[451, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[560, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1069, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1186, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[977, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[98, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[452, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1070, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[226, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[881, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[227, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[228, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[453, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[882, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1071, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[229, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[454, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[561, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[883, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1072, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1187, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[464, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1082, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1123, "polars.Series.dtype", false]], "dtype_of() (in module polars)": [[99, "polars.dtype_of", false]], "dtypes (polars.dataframe property)": [[230, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[884, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[108, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[75, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[796, "polars.duration", false]], "duration() (in module polars.selectors)": [[977, "polars.selectors.duration", false]], "element() (in module polars)": [[797, "polars.element", false]], "enable_string_cache() (in module polars)": [[100, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[413, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[702, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1026, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1294, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[977, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[414, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[430, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[703, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1027, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1043, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1295, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[501, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1124, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[76, "polars.datatypes.Enum", false]], "enum() (in module polars.selectors)": [[977, "polars.selectors.enum", false]], "epoch() (polars.expr.dt method)": [[465, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1083, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[502, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[603, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1125, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[503, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1126, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[231, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1127, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[101, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[704, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1296, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[232, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1128, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[562, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1188, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[504, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1129, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[505, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1130, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[506, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1131, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[507, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1132, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[798, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[977, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[508, "polars.Expr.exclude", false]], "exclude() (polars.selectors.selector method)": [[977, "polars.selectors.Selector.exclude", false]], "execute() (polars.sqlcontext method)": [[1383, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1384, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[509, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1133, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[977, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[885, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[132, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[233, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[510, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[392, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[563, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[705, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[886, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1134, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1005, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1189, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1297, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[234, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1135, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[511, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1136, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[706, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1298, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[707, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1299, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[708, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1300, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[709, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1301, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[964, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[965, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[77, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[746, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1338, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1339, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[235, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[512, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[887, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1137, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[236, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[513, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[888, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1138, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[237, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[514, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[889, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1139, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[710, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1302, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[711, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1303, "polars.Series.str.find_many", false]], "first() (in module polars)": [[799, "polars.first", false]], "first() (in module polars.selectors)": [[977, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[515, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[393, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[564, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[890, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[950, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1140, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1006, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1190, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[238, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1141, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[516, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[977, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[78, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[79, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[517, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1142, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[518, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[800, "polars.fold", false]], "fold() (polars.dataframe method)": [[239, "polars.DataFrame.fold", false]], "format() (in module polars)": [[801, "polars.format", false]], "forward_fill() (polars.expr method)": [[519, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1143, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[133, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[134, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[135, "polars.from_dict", false]], "from_dicts() (in module polars)": [[136, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[802, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[520, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[137, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[138, "polars.from_pandas", false]], "from_records() (in module polars)": [[139, "polars.from_records", false]], "from_repr() (in module polars)": [[140, "polars.from_repr", false]], "gather() (polars.expr method)": [[521, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[565, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1144, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1191, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[240, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[522, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[566, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[891, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1145, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1192, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[523, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1146, "polars.Series.ge", false]], "get() (polars.expr method)": [[524, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[394, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[567, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1007, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1193, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[431, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1044, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1147, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[241, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[242, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[243, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[141, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[204, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[194, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[244, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[946, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[245, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[892, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[246, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[893, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[803, "polars.groups", false]], "gt() (polars.expr method)": [[525, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1148, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[604, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[526, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1149, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1150, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[527, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1151, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[247, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[804, "polars.head", false]], "head() (polars.dataframe method)": [[248, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[528, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[568, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[712, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[894, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[951, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1152, "polars.Series.head", false]], "head() (polars.series.list method)": [[1194, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1304, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[249, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[529, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1153, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[466, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1084, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[250, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[805, "polars.implode", false]], "implode() (polars.expr method)": [[530, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1154, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[531, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1155, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[251, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[532, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[895, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[80, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[81, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[82, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[83, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[84, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[806, "polars.int_range", false]], "int_ranges() (in module polars)": [[807, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[977, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[252, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[533, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[896, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1156, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[534, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1157, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[109, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[535, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1158, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[467, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1085, "polars.Series.dt.is_business_day", false]], "is_close() (polars.expr method)": [[536, "polars.Expr.is_close", false]], "is_close() (polars.series method)": [[1159, "polars.Series.is_close", false]], "is_column() (polars.expr.meta method)": [[605, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[606, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[253, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[537, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1160, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[254, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1161, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[538, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1162, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[539, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1163, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[540, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1164, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[541, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1165, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[542, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1166, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[468, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1086, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[607, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1045, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[543, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1167, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[544, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1168, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[545, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1169, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[546, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1170, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[608, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[977, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1171, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[255, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[547, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1172, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[469, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1087, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[256, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1173, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[257, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[258, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[259, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[260, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[395, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[569, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[713, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[897, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1008, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1195, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1305, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[261, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[898, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[262, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[899, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[714, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1306, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[747, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1340, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[148, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[715, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1307, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[623, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[145, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[146, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[548, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1174, "polars.Series.kurtosis", false]], "last() (in module polars)": [[808, "polars.last", false]], "last() (in module polars.selectors)": [[977, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[549, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[396, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[570, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[900, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[952, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1175, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1009, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1196, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[263, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[901, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[550, "polars.Expr.le", false]], "le() (polars.series method)": [[1176, "polars.Series.le", false]], "len() (in module polars)": [[809, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[551, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[571, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[953, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1177, "polars.Series.len", false]], "len() (polars.series.list method)": [[1197, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[432, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[716, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1046, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1308, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[433, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[717, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1047, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1309, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[264, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[552, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[902, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1178, "polars.Series.limit", false]], "linear_space() (in module polars)": [[810, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[811, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[85, "polars.datatypes.List", false]], "list() (in module polars.selectors)": [[977, "polars.selectors.list", false]], "list_catalogs() (polars.catalog method)": [[195, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[196, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[197, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[812, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[187, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[593, "polars.Expr.log", false]], "log() (polars.series method)": [[1219, "polars.Series.log", false]], "log10() (polars.expr method)": [[594, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1220, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[595, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1221, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[596, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1222, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[597, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1223, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[624, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[813, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[598, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[903, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[599, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1224, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[625, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[814, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[954, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[265, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[110, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[266, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[904, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[977, "polars.selectors.matches", false]], "max() (in module polars)": [[815, "polars.max", false]], "max() (polars.dataframe method)": [[267, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[600, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[397, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[572, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[905, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[955, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1225, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1010, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1088, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1198, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[816, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[268, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[817, "polars.mean", false]], "mean() (polars.dataframe method)": [[269, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[601, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[573, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[906, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[956, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1226, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1089, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1199, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[818, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[270, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[819, "polars.median", false]], "median() (polars.dataframe method)": [[271, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[602, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[398, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[574, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[907, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[957, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1227, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1011, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1090, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1200, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[272, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[908, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[273, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[909, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[470, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1091, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[471, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1092, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[472, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1093, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[820, "polars.min", false]], "min() (polars.dataframe method)": [[274, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[618, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[399, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[575, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[910, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[958, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1228, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1012, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1094, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1201, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[821, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[275, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[473, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1095, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[619, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[620, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1229, "polars.Series.mode", false]], "module": [[977, "module-polars.selectors", false]], "moduleupgraderequirederror": [[111, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[474, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1096, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[475, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1097, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[476, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1098, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[621, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[276, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1230, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[822, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[277, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[622, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[400, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[576, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[959, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1231, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1013, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1202, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1232, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[202, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[632, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1233, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[633, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1234, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[477, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1099, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[634, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[609, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1235, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[635, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1236, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[636, "polars.Expr.neg", false]], "nested() (in module polars.selectors)": [[977, "polars.selectors.nested", false]], "new_from_index() (polars.series method)": [[1237, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[142, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[112, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[718, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1310, "polars.Series.str.normalize", false]], "norowsreturnederror": [[113, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[637, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1238, "polars.Series.not_", false]], "nth() (in module polars)": [[823, "polars.nth", false]], "null (class in polars.datatypes)": [[86, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[278, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[638, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[911, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1239, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[977, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[87, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[478, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1100, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[824, "polars.ones", false]], "or_() (polars.expr method)": [[639, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[479, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1101, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[114, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[610, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[640, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[719, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1311, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[720, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1312, "polars.Series.str.pad_start", false]], "panicexception": [[115, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[116, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[143, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[279, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[53, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[54, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[55, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[641, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1240, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[642, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1241, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[643, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1242, "polars.Series.peak_min", false]], "performancewarning": [[117, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[280, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[644, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[912, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[281, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[360, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1379, "polars.Series.plot", false]], "polars.selectors": [[977, "module-polars.selectors", false]], "polarserror": [[118, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[119, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[120, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[611, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[645, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1243, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[626, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[627, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[282, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[646, "polars.Expr.product", false]], "product() (polars.series method)": [[1244, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[913, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[647, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1245, "polars.Series.qcut", false]], "quantile() (in module polars)": [[825, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[283, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[349, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[648, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[914, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[960, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1246, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[480, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1102, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[945, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[649, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[650, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1247, "polars.Series.rank", false]], "read_avro() (in module polars)": [[150, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[151, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[152, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[153, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[154, "polars.read_database", false]], "read_database_uri() (in module polars)": [[155, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[156, "polars.read_delta", false]], "read_excel() (in module polars)": [[157, "polars.read_excel", false]], "read_ipc() (in module polars)": [[158, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[159, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[160, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[161, "polars.read_json", false]], "read_ndjson() (in module polars)": [[162, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[163, "polars.read_ods", false]], "read_parquet() (in module polars)": [[164, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[165, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[166, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[284, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[651, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1248, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[826, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1385, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[59, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[60, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1386, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[147, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[61, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1387, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[149, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[62, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[652, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[415, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1249, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1028, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[915, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[285, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[916, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[286, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[917, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1250, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[748, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1341, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[827, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[653, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1251, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[654, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[481, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[721, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1252, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1103, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1313, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[722, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1314, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[287, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[723, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1315, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[655, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1253, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[482, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1104, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[656, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1254, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[288, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[657, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[401, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[577, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[724, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[918, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1255, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1014, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1203, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1316, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[658, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1256, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[659, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1257, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[289, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[660, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[919, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[828, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[829, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[661, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1258, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[662, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1259, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[663, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1260, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[664, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[665, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1261, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[666, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[667, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1262, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[668, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[669, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1263, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[670, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[671, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1264, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[672, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[673, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1265, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[674, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1266, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[675, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[676, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1267, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[677, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[678, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1268, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[679, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[612, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[680, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[483, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1269, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1105, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[681, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1270, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[290, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[291, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[292, "polars.DataFrame.rows_by_key", false]], "rowserror": [[121, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[293, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[682, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[578, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1271, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1204, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[167, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[168, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[169, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[170, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[171, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[172, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[173, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[198, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[56, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1272, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[294, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[920, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1342, "polars.Series.struct.schema", false]], "schemaerror": [[124, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[125, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[683, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1273, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[484, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1106, "polars.Series.dt.second", false]], "select() (in module polars)": [[830, "polars.select", false]], "select() (polars.dataframe method)": [[295, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[921, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[296, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[922, "polars.LazyFrame.select_seq", false]], "selector (class in polars.selectors)": [[977, "polars.selectors.Selector", false]], "self_dtype() (in module polars)": [[174, "polars.self_dtype", false]], "serialize() (polars.dataframe method)": [[297, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[613, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[923, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[188, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1274, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[579, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1205, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[10, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[580, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1206, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[189, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[175, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[298, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[684, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[924, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1275, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[581, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1207, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[582, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1208, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[299, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1276, "polars.Series.shape", false]], "shapeerror": [[126, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[300, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[685, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[402, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[583, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[925, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1277, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1015, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1209, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[614, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[926, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[176, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[686, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1278, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[301, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1279, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[687, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1280, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[688, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1281, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[977, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[689, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1282, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[690, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1283, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[416, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1029, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[691, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1284, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[302, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[692, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[584, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[725, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[927, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1285, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1210, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1317, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[303, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[693, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[403, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[585, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[928, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1286, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1016, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1211, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[694, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[726, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1318, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[727, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1319, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[728, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1320, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[831, "polars.sql", false]], "sql() (polars.dataframe method)": [[304, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[929, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[832, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1402, "polars.SQLContext", false]], "sqlinterfaceerror": [[122, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[123, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[695, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1287, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[977, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[417, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[434, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[729, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1030, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1048, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1321, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[31, "polars.Config.state", false]], "std() (in module polars)": [[833, "polars.std", false]], "std() (polars.dataframe method)": [[305, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[696, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[404, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[586, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[930, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1288, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1017, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1212, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[485, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1107, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[88, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[977, "polars.selectors.string", false]], "stringcache (class in polars)": [[57, "polars.StringCache", false]], "stringcachemismatcherror": [[127, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[730, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1322, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[731, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1323, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[732, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1324, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[733, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1325, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[734, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1326, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[735, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1327, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[89, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[834, "polars.struct", false]], "struct() (in module polars.selectors)": [[977, "polars.selectors.struct", false]], "structfieldnotfounderror": [[128, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[361, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[751, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[628, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[629, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[835, "polars.sum", false]], "sum() (polars.dataframe method)": [[306, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[350, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[752, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[405, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[587, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[931, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[961, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1344, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1018, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1213, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[836, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[307, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[203, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1388, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[205, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[837, "polars.tail", false]], "tail() (polars.dataframe method)": [[308, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[351, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[753, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[588, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[736, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[932, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[962, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1345, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1214, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1328, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[754, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1346, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[755, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1347, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[977, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[190, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[191, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[90, "polars.datatypes.Time", false]], "time() (in module polars)": [[838, "polars.time", false]], "time() (in module polars.selectors)": [[977, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[486, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1108, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[839, "polars.time_range", false]], "time_ranges() (in module polars)": [[840, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[487, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1109, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[589, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1215, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[309, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1348, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[737, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1329, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[738, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1330, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[739, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1331, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[310, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[311, "polars.DataFrame.to_dicts", false]], "to_dtype_expr() (polars.datatype method)": [[48, "polars.DataType.to_dtype_expr", false]], "to_dummies() (polars.dataframe method)": [[312, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1349, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1350, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[313, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1351, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[740, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1332, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[314, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1352, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[406, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1353, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1019, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1049, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[630, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[741, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1333, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[315, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1354, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[316, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1355, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[756, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1356, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[317, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[488, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1110, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[318, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[407, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[590, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1020, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1216, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[742, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1334, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[743, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1335, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[319, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1357, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[631, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[744, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1336, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[129, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[320, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[757, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[933, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1358, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[758, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1359, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[489, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1111, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[490, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1112, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[491, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1113, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[492, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1114, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[493, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1115, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[494, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1116, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[495, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1117, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[321, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[615, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[759, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[496, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1118, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[91, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[92, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[93, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[94, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[616, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[322, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[760, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[408, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[591, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[934, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1360, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1021, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1217, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[761, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1361, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[95, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[323, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[749, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[935, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1343, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[324, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[936, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1389, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[977, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[130, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[325, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[131, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[326, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[937, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[762, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1362, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[327, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1050, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[192, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[96, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[763, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1363, "polars.Series.value_counts", false]], "var() (in module polars)": [[841, "polars.var", false]], "var() (polars.dataframe method)": [[328, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[764, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[409, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[592, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[938, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1364, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1022, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1218, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[329, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[497, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1119, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[498, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1120, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[842, "polars.when", false]], "where() (polars.expr method)": [[765, "polars.Expr.where", false]], "width (polars.dataframe property)": [[330, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[939, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[331, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[940, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[332, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[941, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[942, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[750, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[333, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[943, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[334, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[944, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[499, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1121, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[37, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[38, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[39, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[40, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[41, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[42, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[43, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[45, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[617, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[46, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[47, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[766, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[500, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1122, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[843, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[745, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1337, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1365, "polars.Series.zip_with", false]]}, "objects": {"polars": [[193, 0, 1, "", "Catalog"], [32, 0, 1, "", "CredentialProvider"], [33, 0, 1, "", "CredentialProviderAWS"], [34, 0, 1, "", "CredentialProviderAzure"], [35, 0, 1, "", "CredentialProviderGCP"], [53, 0, 1, "", "PartitionByKey"], [54, 0, 1, "", "PartitionMaxSize"], [55, 0, 1, "", "PartitionParted"], [945, 0, 1, "", "QueryOptFlags"], [1402, 0, 1, "", "SQLContext"], [56, 0, 1, "", "ScanCastOptions"], [57, 0, 1, "", "StringCache"], [58, 4, 1, "", "align_frames"], [767, 4, 1, "", "all"], [768, 4, 1, "", "all_horizontal"], [769, 4, 1, "", "any"], [770, 4, 1, "", "any_horizontal"], [771, 4, 1, "", "approx_n_unique"], [772, 4, 1, "", "arange"], [773, 4, 1, "", "arctan2"], [774, 4, 1, "", "arctan2d"], [775, 4, 1, "", "arg_sort_by"], [776, 4, 1, "", "arg_where"], [63, 4, 1, "", "build_info"], [777, 4, 1, "", "business_day_count"], [778, 4, 1, "", "coalesce"], [64, 4, 1, "", "collect_all"], [65, 4, 1, "", "collect_all_async"], [66, 4, 1, "", "concat"], [779, 4, 1, "", "concat_arr"], [780, 4, 1, "", "concat_list"], [781, 4, 1, "", "concat_str"], [782, 4, 1, "", "corr"], [783, 4, 1, "", "count"], [784, 4, 1, "", "cov"], [785, 4, 1, "", "cum_count"], [786, 4, 1, "", "cum_fold"], [787, 4, 1, "", "cum_reduce"], [788, 4, 1, "", "cum_sum"], [789, 4, 1, "", "cum_sum_horizontal"], [790, 4, 1, "", "date"], [791, 4, 1, "", "date_range"], [792, 4, 1, "", "date_ranges"], [793, 4, 1, "", "datetime"], [794, 4, 1, "", "datetime_range"], [795, 4, 1, "", "datetime_ranges"], [97, 4, 1, "", "defer"], [98, 4, 1, "", "disable_string_cache"], [99, 4, 1, "", "dtype_of"], [796, 4, 1, "", "duration"], [797, 4, 1, "", "element"], [100, 4, 1, "", "enable_string_cache"], [101, 4, 1, "", "escape_regex"], [798, 4, 1, "", "exclude"], [132, 4, 1, "", "explain_all"], [799, 4, 1, "", "first"], [800, 4, 1, "", "fold"], [801, 4, 1, "", "format"], [133, 4, 1, "", "from_arrow"], [134, 4, 1, "", "from_dataframe"], [135, 4, 1, "", "from_dict"], [136, 4, 1, "", "from_dicts"], [802, 4, 1, "", "from_epoch"], [137, 4, 1, "", "from_numpy"], [138, 4, 1, "", "from_pandas"], [139, 4, 1, "", "from_records"], [140, 4, 1, "", "from_repr"], [141, 4, 1, "", "get_index_type"], [803, 4, 1, "", "groups"], [804, 4, 1, "", "head"], [805, 4, 1, "", "implode"], [806, 4, 1, "", "int_range"], [807, 4, 1, "", "int_ranges"], [148, 4, 1, "", "json_normalize"], [808, 4, 1, "", "last"], [809, 4, 1, "", "len"], [810, 4, 1, "", "linear_space"], [811, 4, 1, "", "linear_spaces"], [812, 4, 1, "", "lit"], [813, 4, 1, "", "map_batches"], [814, 4, 1, "", "map_groups"], [815, 4, 1, "", "max"], [816, 4, 1, "", "max_horizontal"], [817, 4, 1, "", "mean"], [818, 4, 1, "", "mean_horizontal"], [819, 4, 1, "", "median"], [820, 4, 1, "", "min"], [821, 4, 1, "", "min_horizontal"], [822, 4, 1, "", "n_unique"], [823, 4, 1, "", "nth"], [824, 4, 1, "", "ones"], [825, 4, 1, "", "quantile"], [150, 4, 1, "", "read_avro"], [151, 4, 1, "", "read_clipboard"], [152, 4, 1, "", "read_csv"], [153, 4, 1, "", "read_csv_batched"], [154, 4, 1, "", "read_database"], [155, 4, 1, "", "read_database_uri"], [156, 4, 1, "", "read_delta"], [157, 4, 1, "", "read_excel"], [158, 4, 1, "", "read_ipc"], [159, 4, 1, "", "read_ipc_schema"], [160, 4, 1, "", "read_ipc_stream"], [161, 4, 1, "", "read_json"], [162, 4, 1, "", "read_ndjson"], [163, 4, 1, "", "read_ods"], [164, 4, 1, "", "read_parquet"], [165, 4, 1, "", "read_parquet_metadata"], [166, 4, 1, "", "read_parquet_schema"], [826, 4, 1, "", "reduce"], [827, 4, 1, "", "repeat"], [828, 4, 1, "", "rolling_corr"], [829, 4, 1, "", "rolling_cov"], [167, 4, 1, "", "scan_csv"], [168, 4, 1, "", "scan_delta"], [169, 4, 1, "", "scan_iceberg"], [170, 4, 1, "", "scan_ipc"], [171, 4, 1, "", "scan_ndjson"], [172, 4, 1, "", "scan_parquet"], [173, 4, 1, "", "scan_pyarrow_dataset"], [830, 4, 1, "", "select"], [977, 7, 0, "-", "selectors"], [174, 4, 1, "", "self_dtype"], [175, 4, 1, "", "set_random_seed"], [176, 4, 1, "", "show_versions"], [831, 4, 1, "", "sql"], [832, 4, 1, "", "sql_expr"], [833, 4, 1, "", "std"], [834, 4, 1, "", "struct"], [835, 4, 1, "", "sum"], [836, 4, 1, "", "sum_horizontal"], [837, 4, 1, "", "tail"], [190, 4, 1, "", "thread_pool_size"], [191, 4, 1, "", "threadpool_size"], [838, 4, 1, "", "time"], [839, 4, 1, "", "time_range"], [840, 4, 1, "", "time_ranges"], [192, 4, 1, "", "using_string_cache"], [841, 4, 1, "", "var"], [842, 4, 1, "", "when"], [843, 4, 1, "", "zeros"]], "polars.Catalog": [[193, 1, 1, "", "__init__"], [194, 1, 1, "", "get_table_info"], [195, 1, 1, "", "list_catalogs"], [196, 1, 1, "", "list_namespaces"], [197, 1, 1, "", "list_tables"], [198, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_engine_affinity"], [11, 1, 1, "", "set_float_precision"], [12, 1, 1, "", "set_fmt_float"], [13, 1, 1, "", "set_fmt_str_lengths"], [14, 1, 1, "", "set_fmt_table_cell_list_len"], [15, 1, 1, "", "set_streaming_chunk_size"], [16, 1, 1, "", "set_tbl_cell_alignment"], [17, 1, 1, "", "set_tbl_cell_numeric_alignment"], [18, 1, 1, "", "set_tbl_cols"], [19, 1, 1, "", "set_tbl_column_data_type_inline"], [20, 1, 1, "", "set_tbl_dataframe_shape_below"], [21, 1, 1, "", "set_tbl_formatting"], [22, 1, 1, "", "set_tbl_hide_column_data_types"], [23, 1, 1, "", "set_tbl_hide_column_names"], [24, 1, 1, "", "set_tbl_hide_dataframe_shape"], [25, 1, 1, "", "set_tbl_hide_dtype_separator"], [26, 1, 1, "", "set_tbl_rows"], [27, 1, 1, "", "set_tbl_width_chars"], [28, 1, 1, "", "set_thousands_separator"], [29, 1, 1, "", "set_trim_decimal_zeros"], [30, 1, 1, "", "set_verbose"], [31, 1, 1, "", "state"]], "polars.CredentialProvider": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[35, 1, 1, "", "__init__"]], "polars.DataFrame": [[210, 1, 1, "", "__array__"], [211, 1, 1, "", "__arrow_c_stream__"], [212, 1, 1, "", "__dataframe__"], [213, 1, 1, "", "__getitem__"], [214, 1, 1, "", "__setitem__"], [215, 1, 1, "", "approx_n_unique"], [216, 1, 1, "", "bottom_k"], [217, 1, 1, "", "cast"], [218, 1, 1, "", "clear"], [219, 1, 1, "", "clone"], [220, 1, 1, "", "collect_schema"], [221, 2, 1, "", "columns"], [222, 1, 1, "", "corr"], [223, 1, 1, "", "count"], [224, 1, 1, "", "describe"], [225, 1, 1, "", "deserialize"], [226, 1, 1, "", "drop"], [227, 1, 1, "", "drop_in_place"], [228, 1, 1, "", "drop_nans"], [229, 1, 1, "", "drop_nulls"], [230, 2, 1, "", "dtypes"], [231, 1, 1, "", "equals"], [232, 1, 1, "", "estimated_size"], [233, 1, 1, "", "explode"], [234, 1, 1, "", "extend"], [235, 1, 1, "", "fill_nan"], [236, 1, 1, "", "fill_null"], [237, 1, 1, "", "filter"], [238, 2, 1, "", "flags"], [239, 1, 1, "", "fold"], [240, 1, 1, "", "gather_every"], [241, 1, 1, "", "get_column"], [242, 1, 1, "", "get_column_index"], [243, 1, 1, "", "get_columns"], [244, 1, 1, "", "glimpse"], [245, 1, 1, "", "group_by"], [246, 1, 1, "", "group_by_dynamic"], [247, 1, 1, "", "hash_rows"], [248, 1, 1, "", "head"], [249, 2, 1, "", "height"], [250, 1, 1, "", "hstack"], [251, 1, 1, "", "insert_column"], [252, 1, 1, "", "interpolate"], [253, 1, 1, "", "is_duplicated"], [254, 1, 1, "", "is_empty"], [255, 1, 1, "", "is_unique"], [256, 1, 1, "", "item"], [257, 1, 1, "", "iter_columns"], [258, 1, 1, "", "iter_rows"], [259, 1, 1, "", "iter_slices"], [260, 1, 1, "", "join"], [261, 1, 1, "", "join_asof"], [262, 1, 1, "", "join_where"], [263, 1, 1, "", "lazy"], [264, 1, 1, "", "limit"], [265, 1, 1, "", "map_rows"], [266, 1, 1, "", "match_to_schema"], [267, 1, 1, "", "max"], [268, 1, 1, "", "max_horizontal"], [269, 1, 1, "", "mean"], [270, 1, 1, "", "mean_horizontal"], [271, 1, 1, "", "median"], [272, 1, 1, "", "melt"], [273, 1, 1, "", "merge_sorted"], [274, 1, 1, "", "min"], [275, 1, 1, "", "min_horizontal"], [276, 1, 1, "", "n_chunks"], [277, 1, 1, "", "n_unique"], [278, 1, 1, "", "null_count"], [279, 1, 1, "", "partition_by"], [280, 1, 1, "", "pipe"], [281, 1, 1, "", "pivot"], [360, 2, 1, "", "plot"], [282, 1, 1, "", "product"], [283, 1, 1, "", "quantile"], [284, 1, 1, "", "rechunk"], [285, 1, 1, "", "remove"], [286, 1, 1, "", "rename"], [287, 1, 1, "", "replace_column"], [288, 1, 1, "", "reverse"], [289, 1, 1, "", "rolling"], [290, 1, 1, "", "row"], [291, 1, 1, "", "rows"], [292, 1, 1, "", "rows_by_key"], [293, 1, 1, "", "sample"], [294, 2, 1, "", "schema"], [295, 1, 1, "", "select"], [296, 1, 1, "", "select_seq"], [297, 1, 1, "", "serialize"], [298, 1, 1, "", "set_sorted"], [299, 2, 1, "", "shape"], [300, 1, 1, "", "shift"], [301, 1, 1, "", "shrink_to_fit"], [302, 1, 1, "", "slice"], [303, 1, 1, "", "sort"], [304, 1, 1, "", "sql"], [305, 1, 1, "", "std"], [361, 2, 1, "", "style"], [306, 1, 1, "", "sum"], [307, 1, 1, "", "sum_horizontal"], [308, 1, 1, "", "tail"], [309, 1, 1, "", "to_arrow"], [310, 1, 1, "", "to_dict"], [311, 1, 1, "", "to_dicts"], [312, 1, 1, "", "to_dummies"], [313, 1, 1, "", "to_init_repr"], [314, 1, 1, "", "to_jax"], [315, 1, 1, "", "to_numpy"], [316, 1, 1, "", "to_pandas"], [317, 1, 1, "", "to_series"], [318, 1, 1, "", "to_struct"], [319, 1, 1, "", "to_torch"], [320, 1, 1, "", "top_k"], [321, 1, 1, "", "transpose"], [322, 1, 1, "", "unique"], [323, 1, 1, "", "unnest"], [324, 1, 1, "", "unpivot"], [325, 1, 1, "", "unstack"], [326, 1, 1, "", "update"], [327, 1, 1, "", "upsample"], [328, 1, 1, "", "var"], [329, 1, 1, "", "vstack"], [330, 2, 1, "", "width"], [331, 1, 1, "", "with_columns"], [332, 1, 1, "", "with_columns_seq"], [333, 1, 1, "", "with_row_count"], [334, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_clipboard"], [38, 1, 1, "", "write_csv"], [39, 1, 1, "", "write_database"], [40, 1, 1, "", "write_delta"], [41, 1, 1, "", "write_excel"], [42, 1, 1, "", "write_iceberg"], [43, 1, 1, "", "write_ipc"], [44, 1, 1, "", "write_ipc_stream"], [45, 1, 1, "", "write_json"], [46, 1, 1, "", "write_ndjson"], [47, 1, 1, "", "write_parquet"]], "polars.DataType": [[48, 1, 1, "", "to_dtype_expr"]], "polars.Expr": [[366, 1, 1, "", "abs"], [367, 1, 1, "", "add"], [368, 1, 1, "", "agg_groups"], [369, 1, 1, "", "alias"], [370, 1, 1, "", "all"], [371, 1, 1, "", "and_"], [372, 1, 1, "", "any"], [373, 1, 1, "", "append"], [374, 1, 1, "", "approx_n_unique"], [375, 1, 1, "", "arccos"], [376, 1, 1, "", "arccosh"], [377, 1, 1, "", "arcsin"], [378, 1, 1, "", "arcsinh"], [379, 1, 1, "", "arctan"], [380, 1, 1, "", "arctanh"], [381, 1, 1, "", "arg_max"], [382, 1, 1, "", "arg_min"], [383, 1, 1, "", "arg_sort"], [384, 1, 1, "", "arg_true"], [385, 1, 1, "", "arg_unique"], [410, 1, 1, "", "backward_fill"], [418, 1, 1, "", "bitwise_and"], [419, 1, 1, "", "bitwise_count_ones"], [420, 1, 1, "", "bitwise_count_zeros"], [421, 1, 1, "", "bitwise_leading_ones"], [422, 1, 1, "", "bitwise_leading_zeros"], [423, 1, 1, "", "bitwise_or"], [424, 1, 1, "", "bitwise_trailing_ones"], [425, 1, 1, "", "bitwise_trailing_zeros"], [426, 1, 1, "", "bitwise_xor"], [427, 1, 1, "", "bottom_k"], [428, 1, 1, "", "bottom_k_by"], [429, 1, 1, "", "cast"], [435, 1, 1, "", "cbrt"], [436, 1, 1, "", "ceil"], [437, 1, 1, "", "clip"], [438, 1, 1, "", "cos"], [439, 1, 1, "", "cosh"], [440, 1, 1, "", "cot"], [441, 1, 1, "", "count"], [442, 1, 1, "", "cum_count"], [443, 1, 1, "", "cum_max"], [444, 1, 1, "", "cum_min"], [445, 1, 1, "", "cum_prod"], [446, 1, 1, "", "cum_sum"], [447, 1, 1, "", "cumulative_eval"], [448, 1, 1, "", "cut"], [449, 1, 1, "", "degrees"], [450, 1, 1, "", "deserialize"], [451, 1, 1, "", "diff"], [452, 1, 1, "", "dot"], [453, 1, 1, "", "drop_nans"], [454, 1, 1, "", "drop_nulls"], [501, 1, 1, "", "entropy"], [502, 1, 1, "", "eq"], [503, 1, 1, "", "eq_missing"], [504, 1, 1, "", "ewm_mean"], [505, 1, 1, "", "ewm_mean_by"], [506, 1, 1, "", "ewm_std"], [507, 1, 1, "", "ewm_var"], [508, 1, 1, "", "exclude"], [509, 1, 1, "", "exp"], [510, 1, 1, "", "explode"], [511, 1, 1, "", "extend_constant"], [512, 1, 1, "", "fill_nan"], [513, 1, 1, "", "fill_null"], [514, 1, 1, "", "filter"], [515, 1, 1, "", "first"], [516, 1, 1, "", "flatten"], [517, 1, 1, "", "floor"], [518, 1, 1, "", "floordiv"], [519, 1, 1, "", "forward_fill"], [520, 1, 1, "", "from_json"], [521, 1, 1, "", "gather"], [522, 1, 1, "", "gather_every"], [523, 1, 1, "", "ge"], [524, 1, 1, "", "get"], [525, 1, 1, "", "gt"], [526, 1, 1, "", "has_nulls"], [527, 1, 1, "", "hash"], [528, 1, 1, "", "head"], [529, 1, 1, "", "hist"], [530, 1, 1, "", "implode"], [531, 1, 1, "", "index_of"], [532, 1, 1, "", "inspect"], [533, 1, 1, "", "interpolate"], [534, 1, 1, "", "interpolate_by"], [535, 1, 1, "", "is_between"], [536, 1, 1, "", "is_close"], [537, 1, 1, "", "is_duplicated"], [538, 1, 1, "", "is_finite"], [539, 1, 1, "", "is_first_distinct"], [540, 1, 1, "", "is_in"], [541, 1, 1, "", "is_infinite"], [542, 1, 1, "", "is_last_distinct"], [543, 1, 1, "", "is_nan"], [544, 1, 1, "", "is_not_nan"], [545, 1, 1, "", "is_not_null"], [546, 1, 1, "", "is_null"], [547, 1, 1, "", "is_unique"], [548, 1, 1, "", "kurtosis"], [549, 1, 1, "", "last"], [550, 1, 1, "", "le"], [551, 1, 1, "", "len"], [552, 1, 1, "", "limit"], [593, 1, 1, "", "log"], [594, 1, 1, "", "log10"], [595, 1, 1, "", "log1p"], [596, 1, 1, "", "lower_bound"], [597, 1, 1, "", "lt"], [598, 1, 1, "", "map_batches"], [599, 1, 1, "", "map_elements"], [600, 1, 1, "", "max"], [601, 1, 1, "", "mean"], [602, 1, 1, "", "median"], [618, 1, 1, "", "min"], [619, 1, 1, "", "mod"], [620, 1, 1, "", "mode"], [621, 1, 1, "", "mul"], [622, 1, 1, "", "n_unique"], [632, 1, 1, "", "nan_max"], [633, 1, 1, "", "nan_min"], [634, 1, 1, "", "ne"], [635, 1, 1, "", "ne_missing"], [636, 1, 1, "", "neg"], [637, 1, 1, "", "not_"], [638, 1, 1, "", "null_count"], [639, 1, 1, "", "or_"], [640, 1, 1, "", "over"], [641, 1, 1, "", "pct_change"], [642, 1, 1, "", "peak_max"], [643, 1, 1, "", "peak_min"], [644, 1, 1, "", "pipe"], [645, 1, 1, "", "pow"], [646, 1, 1, "", "product"], [647, 1, 1, "", "qcut"], [648, 1, 1, "", "quantile"], [649, 1, 1, "", "radians"], [650, 1, 1, "", "rank"], [651, 1, 1, "", "rechunk"], [652, 1, 1, "", "reinterpret"], [653, 1, 1, "", "repeat_by"], [654, 1, 1, "", "replace"], [655, 1, 1, "", "replace_strict"], [656, 1, 1, "", "reshape"], [657, 1, 1, "", "reverse"], [658, 1, 1, "", "rle"], [659, 1, 1, "", "rle_id"], [660, 1, 1, "", "rolling"], [661, 1, 1, "", "rolling_kurtosis"], [662, 1, 1, "", "rolling_map"], [663, 1, 1, "", "rolling_max"], [664, 1, 1, "", "rolling_max_by"], [665, 1, 1, "", "rolling_mean"], [666, 1, 1, "", "rolling_mean_by"], [667, 1, 1, "", "rolling_median"], [668, 1, 1, "", "rolling_median_by"], [669, 1, 1, "", "rolling_min"], [670, 1, 1, "", "rolling_min_by"], [671, 1, 1, "", "rolling_quantile"], [672, 1, 1, "", "rolling_quantile_by"], [673, 1, 1, "", "rolling_skew"], [674, 1, 1, "", "rolling_std"], [675, 1, 1, "", "rolling_std_by"], [676, 1, 1, "", "rolling_sum"], [677, 1, 1, "", "rolling_sum_by"], [678, 1, 1, "", "rolling_var"], [679, 1, 1, "", "rolling_var_by"], [680, 1, 1, "", "round"], [681, 1, 1, "", "round_sig_figs"], [682, 1, 1, "", "sample"], [683, 1, 1, "", "search_sorted"], [684, 1, 1, "", "set_sorted"], [685, 1, 1, "", "shift"], [686, 1, 1, "", "shrink_dtype"], [687, 1, 1, "", "shuffle"], [688, 1, 1, "", "sign"], [689, 1, 1, "", "sin"], [690, 1, 1, "", "sinh"], [691, 1, 1, "", "skew"], [692, 1, 1, "", "slice"], [693, 1, 1, "", "sort"], [694, 1, 1, "", "sort_by"], [695, 1, 1, "", "sqrt"], [696, 1, 1, "", "std"], [751, 1, 1, "", "sub"], [752, 1, 1, "", "sum"], [753, 1, 1, "", "tail"], [754, 1, 1, "", "tan"], [755, 1, 1, "", "tanh"], [756, 1, 1, "", "to_physical"], [757, 1, 1, "", "top_k"], [758, 1, 1, "", "top_k_by"], [759, 1, 1, "", "truediv"], [760, 1, 1, "", "unique"], [761, 1, 1, "", "unique_counts"], [762, 1, 1, "", "upper_bound"], [763, 1, 1, "", "value_counts"], [764, 1, 1, "", "var"], [765, 1, 1, "", "where"], [766, 1, 1, "", "xor"]], "polars.Expr.arr": [[386, 1, 1, "", "all"], [387, 1, 1, "", "any"], [388, 1, 1, "", "arg_max"], [389, 1, 1, "", "arg_min"], [390, 1, 1, "", "contains"], [391, 1, 1, "", "count_matches"], [392, 1, 1, "", "explode"], [393, 1, 1, "", "first"], [394, 1, 1, "", "get"], [395, 1, 1, "", "join"], [396, 1, 1, "", "last"], [397, 1, 1, "", "max"], [398, 1, 1, "", "median"], [399, 1, 1, "", "min"], [400, 1, 1, "", "n_unique"], [401, 1, 1, "", "reverse"], [402, 1, 1, "", "shift"], [403, 1, 1, "", "sort"], [404, 1, 1, "", "std"], [405, 1, 1, "", "sum"], [406, 1, 1, "", "to_list"], [407, 1, 1, "", "to_struct"], [408, 1, 1, "", "unique"], [409, 1, 1, "", "var"]], "polars.Expr.bin": [[411, 1, 1, "", "contains"], [412, 1, 1, "", "decode"], [413, 1, 1, "", "encode"], [414, 1, 1, "", "ends_with"], [415, 1, 1, "", "reinterpret"], [416, 1, 1, "", "size"], [417, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[430, 1, 1, "", "ends_with"], [431, 1, 1, "", "get_categories"], [432, 1, 1, "", "len_bytes"], [433, 1, 1, "", "len_chars"], [434, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[455, 1, 1, "", "add_business_days"], [456, 1, 1, "", "base_utc_offset"], [457, 1, 1, "", "cast_time_unit"], [458, 1, 1, "", "century"], [459, 1, 1, "", "combine"], [460, 1, 1, "", "convert_time_zone"], [461, 1, 1, "", "date"], [462, 1, 1, "", "datetime"], [463, 1, 1, "", "day"], [464, 1, 1, "", "dst_offset"], [465, 1, 1, "", "epoch"], [466, 1, 1, "", "hour"], [467, 1, 1, "", "is_business_day"], [468, 1, 1, "", "is_leap_year"], [469, 1, 1, "", "iso_year"], [470, 1, 1, "", "microsecond"], [471, 1, 1, "", "millennium"], [472, 1, 1, "", "millisecond"], [473, 1, 1, "", "minute"], [474, 1, 1, "", "month"], [475, 1, 1, "", "month_end"], [476, 1, 1, "", "month_start"], [477, 1, 1, "", "nanosecond"], [478, 1, 1, "", "offset_by"], [479, 1, 1, "", "ordinal_day"], [480, 1, 1, "", "quarter"], [481, 1, 1, "", "replace"], [482, 1, 1, "", "replace_time_zone"], [483, 1, 1, "", "round"], [484, 1, 1, "", "second"], [485, 1, 1, "", "strftime"], [486, 1, 1, "", "time"], [487, 1, 1, "", "timestamp"], [488, 1, 1, "", "to_string"], [489, 1, 1, "", "total_days"], [490, 1, 1, "", "total_hours"], [491, 1, 1, "", "total_microseconds"], [492, 1, 1, "", "total_milliseconds"], [493, 1, 1, "", "total_minutes"], [494, 1, 1, "", "total_nanoseconds"], [495, 1, 1, "", "total_seconds"], [496, 1, 1, "", "truncate"], [497, 1, 1, "", "week"], [498, 1, 1, "", "weekday"], [499, 1, 1, "", "with_time_unit"], [500, 1, 1, "", "year"]], "polars.Expr.list": [[553, 1, 1, "", "all"], [554, 1, 1, "", "any"], [555, 1, 1, "", "arg_max"], [556, 1, 1, "", "arg_min"], [557, 1, 1, "", "concat"], [558, 1, 1, "", "contains"], [559, 1, 1, "", "count_matches"], [560, 1, 1, "", "diff"], [561, 1, 1, "", "drop_nulls"], [562, 1, 1, "", "eval"], [563, 1, 1, "", "explode"], [564, 1, 1, "", "first"], [565, 1, 1, "", "gather"], [566, 1, 1, "", "gather_every"], [567, 1, 1, "", "get"], [568, 1, 1, "", "head"], [569, 1, 1, "", "join"], [570, 1, 1, "", "last"], [571, 1, 1, "", "len"], [572, 1, 1, "", "max"], [573, 1, 1, "", "mean"], [574, 1, 1, "", "median"], [575, 1, 1, "", "min"], [576, 1, 1, "", "n_unique"], [577, 1, 1, "", "reverse"], [578, 1, 1, "", "sample"], [579, 1, 1, "", "set_difference"], [580, 1, 1, "", "set_intersection"], [581, 1, 1, "", "set_symmetric_difference"], [582, 1, 1, "", "set_union"], [583, 1, 1, "", "shift"], [584, 1, 1, "", "slice"], [585, 1, 1, "", "sort"], [586, 1, 1, "", "std"], [587, 1, 1, "", "sum"], [588, 1, 1, "", "tail"], [589, 1, 1, "", "to_array"], [590, 1, 1, "", "to_struct"], [591, 1, 1, "", "unique"], [592, 1, 1, "", "var"]], "polars.Expr.meta": [[603, 1, 1, "", "eq"], [604, 1, 1, "", "has_multiple_outputs"], [605, 1, 1, "", "is_column"], [606, 1, 1, "", "is_column_selection"], [607, 1, 1, "", "is_literal"], [608, 1, 1, "", "is_regex_projection"], [609, 1, 1, "", "ne"], [610, 1, 1, "", "output_name"], [611, 1, 1, "", "pop"], [612, 1, 1, "", "root_names"], [613, 1, 1, "", "serialize"], [614, 1, 1, "", "show_graph"], [615, 1, 1, "", "tree_format"], [616, 1, 1, "", "undo_aliases"], [617, 1, 1, "", "write_json"]], "polars.Expr.name": [[623, 1, 1, "", "keep"], [624, 1, 1, "", "map"], [625, 1, 1, "", "map_fields"], [626, 1, 1, "", "prefix"], [627, 1, 1, "", "prefix_fields"], [628, 1, 1, "", "suffix"], [629, 1, 1, "", "suffix_fields"], [630, 1, 1, "", "to_lowercase"], [631, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[697, 1, 1, "", "concat"], [698, 1, 1, "", "contains"], [699, 1, 1, "", "contains_any"], [700, 1, 1, "", "count_matches"], [701, 1, 1, "", "decode"], [702, 1, 1, "", "encode"], [703, 1, 1, "", "ends_with"], [704, 1, 1, "", "escape_regex"], [705, 1, 1, "", "explode"], [706, 1, 1, "", "extract"], [707, 1, 1, "", "extract_all"], [708, 1, 1, "", "extract_groups"], [709, 1, 1, "", "extract_many"], [710, 1, 1, "", "find"], [711, 1, 1, "", "find_many"], [712, 1, 1, "", "head"], [713, 1, 1, "", "join"], [714, 1, 1, "", "json_decode"], [715, 1, 1, "", "json_path_match"], [716, 1, 1, "", "len_bytes"], [717, 1, 1, "", "len_chars"], [718, 1, 1, "", "normalize"], [719, 1, 1, "", "pad_end"], [720, 1, 1, "", "pad_start"], [721, 1, 1, "", "replace"], [722, 1, 1, "", "replace_all"], [723, 1, 1, "", "replace_many"], [724, 1, 1, "", "reverse"], [725, 1, 1, "", "slice"], [726, 1, 1, "", "split"], [727, 1, 1, "", "split_exact"], [728, 1, 1, "", "splitn"], [729, 1, 1, "", "starts_with"], [730, 1, 1, "", "strip_chars"], [731, 1, 1, "", "strip_chars_end"], [732, 1, 1, "", "strip_chars_start"], [733, 1, 1, "", "strip_prefix"], [734, 1, 1, "", "strip_suffix"], [735, 1, 1, "", "strptime"], [736, 1, 1, "", "tail"], [737, 1, 1, "", "to_date"], [738, 1, 1, "", "to_datetime"], [739, 1, 1, "", "to_decimal"], [740, 1, 1, "", "to_integer"], [741, 1, 1, "", "to_lowercase"], [742, 1, 1, "", "to_time"], [743, 1, 1, "", "to_titlecase"], [744, 1, 1, "", "to_uppercase"], [745, 1, 1, "", "zfill"]], "polars.Expr.struct": [[746, 1, 1, "", "field"], [747, 1, 1, "", "json_encode"], [748, 1, 1, "", "rename_fields"], [749, 1, 1, "", "unnest"], [750, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[867, 1, 1, "", "__getitem__"], [868, 1, 1, "", "approx_n_unique"], [869, 1, 1, "", "bottom_k"], [870, 1, 1, "", "cache"], [871, 1, 1, "", "cast"], [872, 1, 1, "", "clear"], [873, 1, 1, "", "clone"], [874, 1, 1, "", "collect"], [875, 1, 1, "", "collect_async"], [876, 1, 1, "", "collect_schema"], [877, 2, 1, "", "columns"], [878, 1, 1, "", "count"], [879, 1, 1, "", "describe"], [880, 1, 1, "", "deserialize"], [881, 1, 1, "", "drop"], [882, 1, 1, "", "drop_nans"], [883, 1, 1, "", "drop_nulls"], [884, 2, 1, "", "dtypes"], [885, 1, 1, "", "explain"], [886, 1, 1, "", "explode"], [887, 1, 1, "", "fill_nan"], [888, 1, 1, "", "fill_null"], [889, 1, 1, "", "filter"], [890, 1, 1, "", "first"], [891, 1, 1, "", "gather_every"], [892, 1, 1, "", "group_by"], [893, 1, 1, "", "group_by_dynamic"], [894, 1, 1, "", "head"], [895, 1, 1, "", "inspect"], [896, 1, 1, "", "interpolate"], [897, 1, 1, "", "join"], [898, 1, 1, "", "join_asof"], [899, 1, 1, "", "join_where"], [900, 1, 1, "", "last"], [901, 1, 1, "", "lazy"], [902, 1, 1, "", "limit"], [903, 1, 1, "", "map_batches"], [904, 1, 1, "", "match_to_schema"], [905, 1, 1, "", "max"], [906, 1, 1, "", "mean"], [907, 1, 1, "", "median"], [908, 1, 1, "", "melt"], [909, 1, 1, "", "merge_sorted"], [910, 1, 1, "", "min"], [911, 1, 1, "", "null_count"], [912, 1, 1, "", "pipe"], [913, 1, 1, "", "profile"], [914, 1, 1, "", "quantile"], [915, 1, 1, "", "remote"], [916, 1, 1, "", "remove"], [917, 1, 1, "", "rename"], [918, 1, 1, "", "reverse"], [919, 1, 1, "", "rolling"], [920, 2, 1, "", "schema"], [921, 1, 1, "", "select"], [922, 1, 1, "", "select_seq"], [923, 1, 1, "", "serialize"], [924, 1, 1, "", "set_sorted"], [925, 1, 1, "", "shift"], [926, 1, 1, "", "show_graph"], [49, 1, 1, "", "sink_csv"], [50, 1, 1, "", "sink_ipc"], [51, 1, 1, "", "sink_ndjson"], [52, 1, 1, "", "sink_parquet"], [927, 1, 1, "", "slice"], [928, 1, 1, "", "sort"], [929, 1, 1, "", "sql"], [930, 1, 1, "", "std"], [931, 1, 1, "", "sum"], [932, 1, 1, "", "tail"], [933, 1, 1, "", "top_k"], [934, 1, 1, "", "unique"], [935, 1, 1, "", "unnest"], [936, 1, 1, "", "unpivot"], [937, 1, 1, "", "update"], [938, 1, 1, "", "var"], [939, 2, 1, "", "width"], [940, 1, 1, "", "with_columns"], [941, 1, 1, "", "with_columns_seq"], [942, 1, 1, "", "with_context"], [943, 1, 1, "", "with_row_count"], [944, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[53, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[54, 1, 1, "", "__init__"]], "polars.PartitionParted": [[55, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[945, 1, 1, "", "__init__"]], "polars.SQLContext": [[1402, 1, 1, "", "__enter__"], [1402, 1, 1, "", "__exit__"], [1402, 1, 1, "", "__init__"], [1383, 1, 1, "", "execute"], [1384, 1, 1, "", "execute_global"], [1385, 1, 1, "", "register"], [1386, 1, 1, "", "register_globals"], [1387, 1, 1, "", "register_many"], [1388, 1, 1, "", "tables"], [1389, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[56, 1, 1, "", "__init__"]], "polars.Series": [[979, 1, 1, "", "__array__"], [980, 1, 1, "", "__arrow_c_stream__"], [981, 1, 1, "", "__getitem__"], [982, 1, 1, "", "abs"], [983, 1, 1, "", "alias"], [984, 1, 1, "", "all"], [985, 1, 1, "", "any"], [986, 1, 1, "", "append"], [987, 1, 1, "", "approx_n_unique"], [988, 1, 1, "", "arccos"], [989, 1, 1, "", "arccosh"], [990, 1, 1, "", "arcsin"], [991, 1, 1, "", "arcsinh"], [992, 1, 1, "", "arctan"], [993, 1, 1, "", "arctanh"], [994, 1, 1, "", "arg_max"], [995, 1, 1, "", "arg_min"], [996, 1, 1, "", "arg_sort"], [997, 1, 1, "", "arg_true"], [998, 1, 1, "", "arg_unique"], [1023, 1, 1, "", "backward_fill"], [1031, 1, 1, "", "bitwise_and"], [1032, 1, 1, "", "bitwise_count_ones"], [1033, 1, 1, "", "bitwise_count_zeros"], [1034, 1, 1, "", "bitwise_leading_ones"], [1035, 1, 1, "", "bitwise_leading_zeros"], [1036, 1, 1, "", "bitwise_or"], [1037, 1, 1, "", "bitwise_trailing_ones"], [1038, 1, 1, "", "bitwise_trailing_zeros"], [1039, 1, 1, "", "bitwise_xor"], [1040, 1, 1, "", "bottom_k"], [1041, 1, 1, "", "bottom_k_by"], [1042, 1, 1, "", "cast"], [1051, 1, 1, "", "cbrt"], [1052, 1, 1, "", "ceil"], [1053, 1, 1, "", "chunk_lengths"], [1054, 1, 1, "", "clear"], [1055, 1, 1, "", "clip"], [1056, 1, 1, "", "clone"], [1057, 1, 1, "", "cos"], [1058, 1, 1, "", "cosh"], [1059, 1, 1, "", "cot"], [1060, 1, 1, "", "count"], [1061, 1, 1, "", "cum_count"], [1062, 1, 1, "", "cum_max"], [1063, 1, 1, "", "cum_min"], [1064, 1, 1, "", "cum_prod"], [1065, 1, 1, "", "cum_sum"], [1066, 1, 1, "", "cumulative_eval"], [1067, 1, 1, "", "cut"], [1068, 1, 1, "", "describe"], [1069, 1, 1, "", "diff"], [1070, 1, 1, "", "dot"], [1071, 1, 1, "", "drop_nans"], [1072, 1, 1, "", "drop_nulls"], [1123, 2, 1, "", "dtype"], [1124, 1, 1, "", "entropy"], [1125, 1, 1, "", "eq"], [1126, 1, 1, "", "eq_missing"], [1127, 1, 1, "", "equals"], [1128, 1, 1, "", "estimated_size"], [1129, 1, 1, "", "ewm_mean"], [1130, 1, 1, "", "ewm_mean_by"], [1131, 1, 1, "", "ewm_std"], [1132, 1, 1, "", "ewm_var"], [1133, 1, 1, "", "exp"], [1134, 1, 1, "", "explode"], [1135, 1, 1, "", "extend"], [1136, 1, 1, "", "extend_constant"], [1137, 1, 1, "", "fill_nan"], [1138, 1, 1, "", "fill_null"], [1139, 1, 1, "", "filter"], [1140, 1, 1, "", "first"], [1141, 2, 1, "", "flags"], [1142, 1, 1, "", "floor"], [1143, 1, 1, "", "forward_fill"], [1144, 1, 1, "", "gather"], [1145, 1, 1, "", "gather_every"], [1146, 1, 1, "", "ge"], [1147, 1, 1, "", "get_chunks"], [1148, 1, 1, "", "gt"], [1149, 1, 1, "", "has_nulls"], [1150, 1, 1, "", "has_validity"], [1151, 1, 1, "", "hash"], [1152, 1, 1, "", "head"], [1153, 1, 1, "", "hist"], [1154, 1, 1, "", "implode"], [1155, 1, 1, "", "index_of"], [1156, 1, 1, "", "interpolate"], [1157, 1, 1, "", "interpolate_by"], [1158, 1, 1, "", "is_between"], [1159, 1, 1, "", "is_close"], [1160, 1, 1, "", "is_duplicated"], [1161, 1, 1, "", "is_empty"], [1162, 1, 1, "", "is_finite"], [1163, 1, 1, "", "is_first_distinct"], [1164, 1, 1, "", "is_in"], [1165, 1, 1, "", "is_infinite"], [1166, 1, 1, "", "is_last_distinct"], [1167, 1, 1, "", "is_nan"], [1168, 1, 1, "", "is_not_nan"], [1169, 1, 1, "", "is_not_null"], [1170, 1, 1, "", "is_null"], [1171, 1, 1, "", "is_sorted"], [1172, 1, 1, "", "is_unique"], [1173, 1, 1, "", "item"], [1174, 1, 1, "", "kurtosis"], [1175, 1, 1, "", "last"], [1176, 1, 1, "", "le"], [1177, 1, 1, "", "len"], [1178, 1, 1, "", "limit"], [1219, 1, 1, "", "log"], [1220, 1, 1, "", "log10"], [1221, 1, 1, "", "log1p"], [1222, 1, 1, "", "lower_bound"], [1223, 1, 1, "", "lt"], [1224, 1, 1, "", "map_elements"], [1225, 1, 1, "", "max"], [1226, 1, 1, "", "mean"], [1227, 1, 1, "", "median"], [1228, 1, 1, "", "min"], [1229, 1, 1, "", "mode"], [1230, 1, 1, "", "n_chunks"], [1231, 1, 1, "", "n_unique"], [1232, 2, 1, "", "name"], [1233, 1, 1, "", "nan_max"], [1234, 1, 1, "", "nan_min"], [1235, 1, 1, "", "ne"], [1236, 1, 1, "", "ne_missing"], [1237, 1, 1, "", "new_from_index"], [1238, 1, 1, "", "not_"], [1239, 1, 1, "", "null_count"], [1240, 1, 1, "", "pct_change"], [1241, 1, 1, "", "peak_max"], [1242, 1, 1, "", "peak_min"], [1379, 2, 1, "", "plot"], [1243, 1, 1, "", "pow"], [1244, 1, 1, "", "product"], [1245, 1, 1, "", "qcut"], [1246, 1, 1, "", "quantile"], [1247, 1, 1, "", "rank"], [1248, 1, 1, "", "rechunk"], [1249, 1, 1, "", "reinterpret"], [1250, 1, 1, "", "rename"], [1251, 1, 1, "", "repeat_by"], [1252, 1, 1, "", "replace"], [1253, 1, 1, "", "replace_strict"], [1254, 1, 1, "", "reshape"], [1255, 1, 1, "", "reverse"], [1256, 1, 1, "", "rle"], [1257, 1, 1, "", "rle_id"], [1258, 1, 1, "", "rolling_kurtosis"], [1259, 1, 1, "", "rolling_map"], [1260, 1, 1, "", "rolling_max"], [1261, 1, 1, "", "rolling_mean"], [1262, 1, 1, "", "rolling_median"], [1263, 1, 1, "", "rolling_min"], [1264, 1, 1, "", "rolling_quantile"], [1265, 1, 1, "", "rolling_skew"], [1266, 1, 1, "", "rolling_std"], [1267, 1, 1, "", "rolling_sum"], [1268, 1, 1, "", "rolling_var"], [1269, 1, 1, "", "round"], [1270, 1, 1, "", "round_sig_figs"], [1271, 1, 1, "", "sample"], [1272, 1, 1, "", "scatter"], [1273, 1, 1, "", "search_sorted"], [1274, 1, 1, "", "set"], [1275, 1, 1, "", "set_sorted"], [1276, 2, 1, "", "shape"], [1277, 1, 1, "", "shift"], [1278, 1, 1, "", "shrink_dtype"], [1279, 1, 1, "", "shrink_to_fit"], [1280, 1, 1, "", "shuffle"], [1281, 1, 1, "", "sign"], [1282, 1, 1, "", "sin"], [1283, 1, 1, "", "sinh"], [1284, 1, 1, "", "skew"], [1285, 1, 1, "", "slice"], [1286, 1, 1, "", "sort"], [1287, 1, 1, "", "sqrt"], [1288, 1, 1, "", "std"], [1344, 1, 1, "", "sum"], [1345, 1, 1, "", "tail"], [1346, 1, 1, "", "tan"], [1347, 1, 1, "", "tanh"], [1348, 1, 1, "", "to_arrow"], [1349, 1, 1, "", "to_dummies"], [1350, 1, 1, "", "to_frame"], [1351, 1, 1, "", "to_init_repr"], [1352, 1, 1, "", "to_jax"], [1353, 1, 1, "", "to_list"], [1354, 1, 1, "", "to_numpy"], [1355, 1, 1, "", "to_pandas"], [1356, 1, 1, "", "to_physical"], [1357, 1, 1, "", "to_torch"], [1358, 1, 1, "", "top_k"], [1359, 1, 1, "", "top_k_by"], [1360, 1, 1, "", "unique"], [1361, 1, 1, "", "unique_counts"], [1362, 1, 1, "", "upper_bound"], [1363, 1, 1, "", "value_counts"], [1364, 1, 1, "", "var"], [1365, 1, 1, "", "zip_with"]], "polars.Series.arr": [[999, 1, 1, "", "all"], [1000, 1, 1, "", "any"], [1001, 1, 1, "", "arg_max"], [1002, 1, 1, "", "arg_min"], [1003, 1, 1, "", "contains"], [1004, 1, 1, "", "count_matches"], [1005, 1, 1, "", "explode"], [1006, 1, 1, "", "first"], [1007, 1, 1, "", "get"], [1008, 1, 1, "", "join"], [1009, 1, 1, "", "last"], [1010, 1, 1, "", "max"], [1011, 1, 1, "", "median"], [1012, 1, 1, "", "min"], [1013, 1, 1, "", "n_unique"], [1014, 1, 1, "", "reverse"], [1015, 1, 1, "", "shift"], [1016, 1, 1, "", "sort"], [1017, 1, 1, "", "std"], [1018, 1, 1, "", "sum"], [1019, 1, 1, "", "to_list"], [1020, 1, 1, "", "to_struct"], [1021, 1, 1, "", "unique"], [1022, 1, 1, "", "var"]], "polars.Series.bin": [[1024, 1, 1, "", "contains"], [1025, 1, 1, "", "decode"], [1026, 1, 1, "", "encode"], [1027, 1, 1, "", "ends_with"], [1028, 1, 1, "", "reinterpret"], [1029, 1, 1, "", "size"], [1030, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1043, 1, 1, "", "ends_with"], [1044, 1, 1, "", "get_categories"], [1045, 1, 1, "", "is_local"], [1046, 1, 1, "", "len_bytes"], [1047, 1, 1, "", "len_chars"], [1048, 1, 1, "", "starts_with"], [1049, 1, 1, "", "to_local"], [1050, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1073, 1, 1, "", "add_business_days"], [1074, 1, 1, "", "base_utc_offset"], [1075, 1, 1, "", "cast_time_unit"], [1076, 1, 1, "", "century"], [1077, 1, 1, "", "combine"], [1078, 1, 1, "", "convert_time_zone"], [1079, 1, 1, "", "date"], [1080, 1, 1, "", "datetime"], [1081, 1, 1, "", "day"], [1082, 1, 1, "", "dst_offset"], [1083, 1, 1, "", "epoch"], [1084, 1, 1, "", "hour"], [1085, 1, 1, "", "is_business_day"], [1086, 1, 1, "", "is_leap_year"], [1087, 1, 1, "", "iso_year"], [1088, 1, 1, "", "max"], [1089, 1, 1, "", "mean"], [1090, 1, 1, "", "median"], [1091, 1, 1, "", "microsecond"], [1092, 1, 1, "", "millennium"], [1093, 1, 1, "", "millisecond"], [1094, 1, 1, "", "min"], [1095, 1, 1, "", "minute"], [1096, 1, 1, "", "month"], [1097, 1, 1, "", "month_end"], [1098, 1, 1, "", "month_start"], [1099, 1, 1, "", "nanosecond"], [1100, 1, 1, "", "offset_by"], [1101, 1, 1, "", "ordinal_day"], [1102, 1, 1, "", "quarter"], [1103, 1, 1, "", "replace"], [1104, 1, 1, "", "replace_time_zone"], [1105, 1, 1, "", "round"], [1106, 1, 1, "", "second"], [1107, 1, 1, "", "strftime"], [1108, 1, 1, "", "time"], [1109, 1, 1, "", "timestamp"], [1110, 1, 1, "", "to_string"], [1111, 1, 1, "", "total_days"], [1112, 1, 1, "", "total_hours"], [1113, 1, 1, "", "total_microseconds"], [1114, 1, 1, "", "total_milliseconds"], [1115, 1, 1, "", "total_minutes"], [1116, 1, 1, "", "total_nanoseconds"], [1117, 1, 1, "", "total_seconds"], [1118, 1, 1, "", "truncate"], [1119, 1, 1, "", "week"], [1120, 1, 1, "", "weekday"], [1121, 1, 1, "", "with_time_unit"], [1122, 1, 1, "", "year"]], "polars.Series.list": [[1179, 1, 1, "", "all"], [1180, 1, 1, "", "any"], [1181, 1, 1, "", "arg_max"], [1182, 1, 1, "", "arg_min"], [1183, 1, 1, "", "concat"], [1184, 1, 1, "", "contains"], [1185, 1, 1, "", "count_matches"], [1186, 1, 1, "", "diff"], [1187, 1, 1, "", "drop_nulls"], [1188, 1, 1, "", "eval"], [1189, 1, 1, "", "explode"], [1190, 1, 1, "", "first"], [1191, 1, 1, "", "gather"], [1192, 1, 1, "", "gather_every"], [1193, 1, 1, "", "get"], [1194, 1, 1, "", "head"], [1195, 1, 1, "", "join"], [1196, 1, 1, "", "last"], [1197, 1, 1, "", "len"], [1198, 1, 1, "", "max"], [1199, 1, 1, "", "mean"], [1200, 1, 1, "", "median"], [1201, 1, 1, "", "min"], [1202, 1, 1, "", "n_unique"], [1203, 1, 1, "", "reverse"], [1204, 1, 1, "", "sample"], [1205, 1, 1, "", "set_difference"], [1206, 1, 1, "", "set_intersection"], [1207, 1, 1, "", "set_symmetric_difference"], [1208, 1, 1, "", "set_union"], [1209, 1, 1, "", "shift"], [1210, 1, 1, "", "slice"], [1211, 1, 1, "", "sort"], [1212, 1, 1, "", "std"], [1213, 1, 1, "", "sum"], [1214, 1, 1, "", "tail"], [1215, 1, 1, "", "to_array"], [1216, 1, 1, "", "to_struct"], [1217, 1, 1, "", "unique"], [1218, 1, 1, "", "var"]], "polars.Series.str": [[1289, 1, 1, "", "concat"], [1290, 1, 1, "", "contains"], [1291, 1, 1, "", "contains_any"], [1292, 1, 1, "", "count_matches"], [1293, 1, 1, "", "decode"], [1294, 1, 1, "", "encode"], [1295, 1, 1, "", "ends_with"], [1296, 1, 1, "", "escape_regex"], [1297, 1, 1, "", "explode"], [1298, 1, 1, "", "extract"], [1299, 1, 1, "", "extract_all"], [1300, 1, 1, "", "extract_groups"], [1301, 1, 1, "", "extract_many"], [1302, 1, 1, "", "find"], [1303, 1, 1, "", "find_many"], [1304, 1, 1, "", "head"], [1305, 1, 1, "", "join"], [1306, 1, 1, "", "json_decode"], [1307, 1, 1, "", "json_path_match"], [1308, 1, 1, "", "len_bytes"], [1309, 1, 1, "", "len_chars"], [1310, 1, 1, "", "normalize"], [1311, 1, 1, "", "pad_end"], [1312, 1, 1, "", "pad_start"], [1313, 1, 1, "", "replace"], [1314, 1, 1, "", "replace_all"], [1315, 1, 1, "", "replace_many"], [1316, 1, 1, "", "reverse"], [1317, 1, 1, "", "slice"], [1318, 1, 1, "", "split"], [1319, 1, 1, "", "split_exact"], [1320, 1, 1, "", "splitn"], [1321, 1, 1, "", "starts_with"], [1322, 1, 1, "", "strip_chars"], [1323, 1, 1, "", "strip_chars_end"], [1324, 1, 1, "", "strip_chars_start"], [1325, 1, 1, "", "strip_prefix"], [1326, 1, 1, "", "strip_suffix"], [1327, 1, 1, "", "strptime"], [1328, 1, 1, "", "tail"], [1329, 1, 1, "", "to_date"], [1330, 1, 1, "", "to_datetime"], [1331, 1, 1, "", "to_decimal"], [1332, 1, 1, "", "to_integer"], [1333, 1, 1, "", "to_lowercase"], [1334, 1, 1, "", "to_time"], [1335, 1, 1, "", "to_titlecase"], [1336, 1, 1, "", "to_uppercase"], [1337, 1, 1, "", "zfill"]], "polars.Series.struct": [[1338, 1, 1, "", "field"], [1339, 3, 1, "", "fields"], [1340, 1, 1, "", "json_encode"], [1341, 1, 1, "", "rename_fields"], [1342, 3, 1, "", "schema"], [1343, 1, 1, "", "unnest"]], "polars.StringCache": [[57, 1, 1, "", "__init__"]], "polars.api": [[59, 4, 1, "", "register_dataframe_namespace"], [60, 4, 1, "", "register_expr_namespace"], [61, 4, 1, "", "register_lazyframe_namespace"], [62, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[199, 0, 1, "", "CatalogInfo"], [200, 0, 1, "", "ColumnInfo"], [201, 5, 1, "", "DataSourceFormat"], [202, 0, 1, "", "NamespaceInfo"], [203, 0, 1, "", "TableInfo"], [205, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[200, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[202, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[203, 1, 1, "", "__init__"], [204, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[335, 1, 1, "", "__iter__"], [336, 1, 1, "", "agg"], [337, 1, 1, "", "all"], [338, 1, 1, "", "count"], [339, 1, 1, "", "first"], [340, 1, 1, "", "head"], [341, 1, 1, "", "last"], [342, 1, 1, "", "len"], [343, 1, 1, "", "map_groups"], [344, 1, 1, "", "max"], [345, 1, 1, "", "mean"], [346, 1, 1, "", "median"], [347, 1, 1, "", "min"], [348, 1, 1, "", "n_unique"], [349, 1, 1, "", "quantile"], [350, 1, 1, "", "sum"], [351, 1, 1, "", "tail"]], "polars.datatypes": [[67, 0, 1, "", "Array"], [68, 0, 1, "", "Binary"], [69, 0, 1, "", "Boolean"], [70, 0, 1, "", "Categorical"], [71, 0, 1, "", "DataType"], [72, 0, 1, "", "Date"], [73, 0, 1, "", "Datetime"], [74, 0, 1, "", "Decimal"], [75, 0, 1, "", "Duration"], [76, 0, 1, "", "Enum"], [77, 0, 1, "", "Field"], [78, 0, 1, "", "Float32"], [79, 0, 1, "", "Float64"], [80, 0, 1, "", "Int128"], [81, 0, 1, "", "Int16"], [82, 0, 1, "", "Int32"], [83, 0, 1, "", "Int64"], [84, 0, 1, "", "Int8"], [85, 0, 1, "", "List"], [86, 0, 1, "", "Null"], [87, 0, 1, "", "Object"], [88, 0, 1, "", "String"], [89, 0, 1, "", "Struct"], [90, 0, 1, "", "Time"], [91, 0, 1, "", "UInt16"], [92, 0, 1, "", "UInt32"], [93, 0, 1, "", "UInt64"], [94, 0, 1, "", "UInt8"], [95, 0, 1, "", "Unknown"], [96, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[70, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[84, 1, 1, "", "__init__"]], "polars.datatypes.List": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[87, 1, 1, "", "__init__"]], "polars.datatypes.String": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[89, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[93, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[94, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[95, 1, 1, "", "__init__"]], "polars.exceptions": [[102, 6, 1, "", "CategoricalRemappingWarning"], [103, 6, 1, "", "ChronoFormatWarning"], [104, 6, 1, "", "ColumnNotFoundError"], [105, 6, 1, "", "ComputeError"], [106, 6, 1, "", "CustomUFuncWarning"], [107, 6, 1, "", "DataOrientationWarning"], [108, 6, 1, "", "DuplicateError"], [109, 6, 1, "", "InvalidOperationError"], [110, 6, 1, "", "MapWithoutReturnDtypeWarning"], [111, 6, 1, "", "ModuleUpgradeRequiredError"], [112, 6, 1, "", "NoDataError"], [113, 6, 1, "", "NoRowsReturnedError"], [114, 6, 1, "", "OutOfBoundsError"], [115, 6, 1, "", "PanicException"], [116, 6, 1, "", "ParameterCollisionError"], [117, 6, 1, "", "PerformanceWarning"], [118, 6, 1, "", "PolarsError"], [119, 6, 1, "", "PolarsInefficientMapWarning"], [120, 6, 1, "", "PolarsWarning"], [121, 6, 1, "", "RowsError"], [122, 6, 1, "", "SQLInterfaceError"], [123, 6, 1, "", "SQLSyntaxError"], [124, 6, 1, "", "SchemaError"], [125, 6, 1, "", "SchemaFieldNotFoundError"], [126, 6, 1, "", "ShapeError"], [127, 6, 1, "", "StringCacheMismatchError"], [128, 6, 1, "", "StructFieldNotFoundError"], [129, 6, 1, "", "TooManyRowsReturnedError"], [130, 6, 1, "", "UnstableWarning"], [131, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[142, 1, 1, "", "next_batches"]], "polars.io.parquet": [[143, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[143, 1, 1, "", "__init__"]], "polars.io.partition": [[144, 0, 1, "", "BasePartitionContext"], [145, 0, 1, "", "KeyedPartition"], [146, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[144, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[145, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[146, 1, 1, "", "__init__"]], "polars.io.plugins": [[147, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[946, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[946, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[947, 1, 1, "", "agg"], [948, 1, 1, "", "all"], [949, 1, 1, "", "count"], [950, 1, 1, "", "first"], [951, 1, 1, "", "head"], [952, 1, 1, "", "last"], [953, 1, 1, "", "len"], [954, 1, 1, "", "map_groups"], [955, 1, 1, "", "max"], [956, 1, 1, "", "mean"], [957, 1, 1, "", "median"], [958, 1, 1, "", "min"], [959, 1, 1, "", "n_unique"], [960, 1, 1, "", "quantile"], [961, 1, 1, "", "sum"], [962, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[963, 1, 1, "", "cancel"], [964, 1, 1, "", "fetch"], [965, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[149, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[977, 0, 1, "", "Selector"], [977, 4, 1, "", "all"], [977, 4, 1, "", "alpha"], [977, 4, 1, "", "alphanumeric"], [977, 4, 1, "", "array"], [977, 4, 1, "", "binary"], [977, 4, 1, "", "boolean"], [977, 4, 1, "", "by_dtype"], [977, 4, 1, "", "by_index"], [977, 4, 1, "", "by_name"], [977, 4, 1, "", "categorical"], [977, 4, 1, "", "contains"], [977, 4, 1, "", "date"], [977, 4, 1, "", "datetime"], [977, 4, 1, "", "decimal"], [977, 4, 1, "", "digit"], [977, 4, 1, "", "duration"], [977, 4, 1, "", "ends_with"], [977, 4, 1, "", "enum"], [977, 4, 1, "", "exclude"], [977, 4, 1, "", "expand_selector"], [977, 4, 1, "", "first"], [977, 4, 1, "", "float"], [977, 4, 1, "", "integer"], [977, 4, 1, "", "is_selector"], [977, 4, 1, "", "last"], [977, 4, 1, "", "list"], [977, 4, 1, "", "matches"], [977, 4, 1, "", "nested"], [977, 4, 1, "", "numeric"], [977, 4, 1, "", "signed_integer"], [977, 4, 1, "", "starts_with"], [977, 4, 1, "", "string"], [977, 4, 1, "", "struct"], [977, 4, 1, "", "temporal"], [977, 4, 1, "", "time"], [977, 4, 1, "", "unsigned_integer"]], "polars.selectors.Selector": [[977, 1, 1, "", "as_expr"], [977, 1, 1, "", "exclude"]], "polars.testing": [[177, 4, 1, "", "assert_frame_equal"], [178, 4, 1, "", "assert_frame_not_equal"], [179, 4, 1, "", "assert_series_equal"], [180, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[181, 0, 1, "", "column"], [182, 4, 1, "", "columns"], [183, 4, 1, "", "create_list_strategy"], [184, 4, 1, "", "dataframes"], [185, 4, 1, "", "dtypes"], [186, 4, 1, "", "lists"], [187, 4, 1, "", "load_profile"], [188, 4, 1, "", "series"], [189, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[181, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 12, 38, 39, 40, 41, 47, 49, 56, 62, 67, 77, 89, 97, 101, 103, 109, 133, 140, 147, 152, 153, 154, 155, 157, 158, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 188, 214, 216, 217, 228, 229, 232, 237, 240, 245, 246, 251, 257, 260, 261, 272, 279, 281, 285, 287, 289, 292, 295, 296, 303, 312, 315, 320, 322, 323, 324, 325, 326, 331, 332, 357, 395, 428, 460, 465, 485, 488, 508, 514, 518, 531, 548, 569, 598, 599, 611, 620, 625, 632, 633, 640, 641, 652, 659, 661, 694, 698, 706, 707, 708, 710, 712, 721, 722, 725, 726, 728, 735, 736, 737, 738, 742, 746, 748, 750, 758, 767, 768, 769, 770, 775, 782, 785, 788, 789, 798, 799, 801, 802, 808, 813, 814, 815, 816, 818, 820, 821, 823, 830, 832, 834, 835, 836, 842, 848, 852, 869, 871, 882, 892, 893, 897, 898, 908, 916, 921, 922, 928, 933, 934, 935, 936, 937, 940, 941, 954, 971, 976, 977, 981, 982, 983, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1081, 1082, 1083, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1097, 1098, 1101, 1103, 1105, 1106, 1107, 1110, 1118, 1120, 1121, 1122, 1123, 1128, 1129, 1131, 1132, 1133, 1134, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1374, 1379, 1383, 1387, 1390, 1397, 1398], "0": [1, 7, 8, 9, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 47, 52, 53, 58, 59, 60, 62, 64, 66, 67, 74, 85, 97, 134, 140, 148, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 230, 231, 235, 236, 237, 239, 240, 243, 244, 245, 246, 247, 251, 252, 256, 258, 259, 260, 263, 265, 266, 268, 269, 270, 271, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 291, 292, 293, 294, 295, 302, 303, 304, 305, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 325, 327, 328, 331, 333, 334, 336, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 357, 360, 361, 366, 368, 369, 371, 375, 376, 377, 378, 379, 380, 383, 384, 385, 388, 389, 391, 394, 404, 407, 409, 416, 418, 423, 426, 428, 429, 435, 436, 437, 438, 439, 440, 447, 448, 449, 453, 454, 455, 461, 462, 466, 470, 472, 473, 477, 481, 484, 486, 488, 491, 492, 494, 495, 499, 502, 503, 504, 505, 506, 507, 509, 511, 512, 513, 514, 517, 518, 520, 522, 523, 525, 527, 529, 533, 534, 536, 538, 541, 543, 544, 545, 546, 548, 550, 555, 556, 559, 562, 565, 566, 567, 573, 574, 586, 587, 590, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 606, 611, 614, 617, 618, 619, 621, 623, 632, 633, 634, 635, 636, 638, 639, 641, 644, 645, 646, 647, 648, 649, 650, 654, 655, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 688, 689, 690, 691, 695, 696, 697, 700, 705, 706, 707, 710, 711, 739, 750, 751, 752, 754, 755, 756, 758, 759, 763, 764, 765, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 786, 793, 797, 800, 806, 807, 809, 810, 811, 814, 817, 818, 819, 823, 825, 826, 828, 829, 830, 831, 835, 838, 839, 840, 841, 842, 843, 848, 852, 868, 869, 871, 872, 873, 874, 876, 878, 879, 881, 882, 884, 885, 887, 888, 889, 891, 892, 893, 896, 897, 901, 903, 904, 907, 908, 911, 913, 914, 916, 919, 920, 921, 926, 928, 929, 930, 933, 938, 940, 942, 943, 944, 947, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 971, 976, 977, 981, 988, 989, 990, 991, 992, 993, 994, 996, 998, 1001, 1007, 1017, 1018, 1020, 1022, 1029, 1042, 1051, 1052, 1054, 1057, 1058, 1059, 1066, 1067, 1068, 1070, 1071, 1072, 1073, 1080, 1084, 1089, 1090, 1091, 1093, 1095, 1099, 1103, 1106, 1110, 1113, 1114, 1116, 1117, 1121, 1124, 1127, 1129, 1130, 1131, 1132, 1137, 1142, 1145, 1150, 1151, 1153, 1156, 1157, 1159, 1162, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1181, 1182, 1185, 1188, 1191, 1192, 1193, 1199, 1200, 1212, 1213, 1216, 1218, 1219, 1220, 1221, 1222, 1226, 1227, 1233, 1234, 1240, 1243, 1245, 1246, 1247, 1252, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1292, 1297, 1298, 1299, 1302, 1303, 1307, 1313, 1331, 1344, 1346, 1347, 1349, 1352, 1354, 1355, 1356, 1357, 1362, 1363, 1364, 1374, 1379, 1383, 1389, 1391, 1392, 1393, 1396, 1397, 1399, 1400, 1402, 1404, 1405], "00": [28, 41, 73, 217, 224, 246, 327, 357, 456, 457, 460, 464, 475, 476, 478, 482, 483, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 664, 666, 668, 670, 672, 675, 677, 679, 735, 738, 742, 793, 794, 795, 796, 810, 838, 839, 840, 852, 871, 879, 893, 971, 977, 1074, 1075, 1078, 1079, 1080, 1082, 1083, 1084, 1090, 1091, 1095, 1097, 1098, 1099, 1100, 1104, 1105, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1313, 1327, 1330, 1334, 1397], "000": [9, 11, 28, 41, 54, 357, 1313, 1405], "0000": [319, 357, 1357, 1374, 1405], "000000": [412, 413, 488, 701, 1025, 1026, 1293], "00000001": [12, 766, 852], "0000001": 745, "00000010": [766, 852], "00000011": [766, 852], "00000100": [766, 852], "00001000": [766, 852], "00001010": [766, 852], "00001011": [766, 852], "0000e": 12, "0000ff": [412, 413, 701, 1025, 1026, 1293], "0001": 488, "000100": 488, "000101": 488, "0005": 977, "00050": 977, "000800": 1110, "001": [60, 745, 796, 1113, 1114, 1116, 1337], "002": [796, 1113, 1114, 1116], "005": [1124, 1374], "00prefix": 977, "00z": [735, 738, 1327, 1330], "01": [29, 58, 72, 73, 184, 217, 224, 244, 246, 261, 289, 327, 357, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 735, 737, 738, 742, 777, 790, 791, 792, 793, 794, 795, 796, 810, 852, 871, 879, 893, 898, 919, 971, 977, 1073, 1075, 1077, 1078, 1079, 1080, 1083, 1084, 1090, 1091, 1095, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1107, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1327, 1329, 1330, 1334, 1397, 1400], "010": [9, 740, 1332], "01000": 29, "01000010": [766, 852], "01000110": [766, 852], "012": [681, 718, 852, 1270, 1310, 1374], "0123": [745, 1337], "01234": [681, 852, 1270, 1374], "012345": 1110, "015625": [1243, 1374], "01\u00b2": [718, 1310], "02": [58, 217, 224, 244, 246, 289, 327, 357, 455, 457, 459, 465, 475, 476, 478, 482, 487, 488, 490, 493, 495, 499, 660, 664, 666, 668, 670, 672, 675, 677, 679, 680, 735, 737, 738, 742, 777, 790, 791, 792, 793, 794, 795, 796, 810, 852, 871, 879, 893, 919, 971, 977, 1020, 1075, 1077, 1079, 1080, 1083, 1084, 1090, 1091, 1095, 1097, 1098, 1099, 1103, 1104, 1105, 1108, 1109, 1112, 1115, 1117, 1118, 1216, 1327, 1329, 1330, 1334, 1397, 1398], "03": [58, 140, 152, 217, 246, 261, 289, 327, 357, 457, 459, 460, 465, 467, 475, 476, 478, 481, 482, 483, 485, 487, 488, 489, 490, 493, 495, 496, 499, 505, 518, 660, 664, 666, 668, 670, 672, 675, 677, 679, 737, 742, 790, 791, 792, 793, 794, 795, 796, 852, 871, 893, 898, 919, 971, 977, 1075, 1077, 1078, 1083, 1084, 1090, 1091, 1097, 1098, 1099, 1104, 1105, 1107, 1109, 1111, 1112, 1115, 1117, 1329, 1334], "037037": [1243, 1374], "04": [173, 217, 224, 246, 327, 357, 459, 460, 475, 476, 481, 482, 483, 485, 489, 490, 493, 495, 499, 664, 666, 668, 670, 672, 675, 677, 679, 735, 777, 790, 793, 794, 796, 852, 871, 879, 893, 971, 977, 1078, 1091, 1095, 1097, 1098, 1099, 1104, 1107, 1111, 1112, 1115, 1117, 1121, 1327, 1397], "047198": 1399, "05": [17, 173, 177, 178, 179, 180, 184, 217, 224, 327, 357, 455, 458, 459, 460, 461, 462, 466, 467, 470, 471, 472, 473, 475, 476, 477, 482, 484, 485, 486, 488, 489, 777, 790, 791, 793, 794, 871, 879, 971, 977, 1077, 1078, 1079, 1080, 1104, 1105, 1107, 1108, 1110, 1111, 1118, 1397, 1398, 1400], "050545": 140, "0522623626787952": [1174, 1374], "0545": [1079, 1080, 1108], "05t10": 1110, "06": [184, 217, 327, 357, 455, 459, 474, 480, 482, 483, 484, 496, 497, 790, 793, 810, 871, 971, 977, 1073, 1104, 1105, 1110, 1118], "060": [461, 462, 466, 470, 472, 473, 477, 484, 486], "0601749420166": [232, 357], "06293300616044681": [1124, 1374], "07": [17, 152, 184, 224, 357, 455, 458, 459, 471, 482, 483, 488, 496, 735, 790, 791, 793, 794, 802, 879, 971, 977, 1073, 1077, 1104, 1110, 1327, 1397, 1400], "071068": [224, 357, 879, 971], "08": [152, 177, 178, 179, 180, 224, 261, 289, 304, 357, 455, 459, 475, 476, 483, 488, 660, 735, 794, 796, 810, 852, 879, 898, 919, 971, 977, 1073, 1105, 1118, 1327, 1397, 1398], "085537": [1133, 1374], "09": [58, 152, 224, 289, 357, 455, 459, 475, 476, 488, 536, 640, 660, 739, 790, 791, 793, 840, 852, 879, 919, 971, 977, 1073, 1159, 1331, 1374], "090909": [641, 852], "094395": 1399, "098612": [595, 852, 1219, 1221, 1374, 1396], "0999": [458, 471], "0_": [41, 357], "0m": [464, 1082], "0x11bc0ad80": 976, "0\u00b5": 488, "1": [1, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 53, 58, 59, 60, 61, 62, 64, 66, 67, 85, 89, 97, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 153, 156, 157, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 184, 188, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 607, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 721, 722, 723, 727, 728, 729, 730, 731, 732, 739, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 848, 852, 867, 868, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 977, 981, 982, 983, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1029, 1040, 1041, 1042, 1046, 1047, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1298, 1300, 1301, 1302, 1303, 1305, 1306, 1307, 1308, 1309, 1313, 1314, 1315, 1319, 1320, 1331, 1337, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374, 1379, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1403, 1404, 1405], "10": [14, 17, 18, 28, 36, 38, 40, 41, 43, 44, 47, 58, 66, 140, 152, 153, 155, 167, 176, 214, 219, 224, 228, 234, 243, 244, 246, 248, 250, 251, 252, 257, 261, 264, 276, 280, 282, 287, 289, 295, 304, 308, 331, 336, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 369, 373, 381, 382, 383, 385, 437, 443, 446, 451, 455, 456, 458, 459, 461, 462, 464, 466, 470, 471, 472, 473, 475, 476, 477, 481, 482, 483, 484, 486, 488, 496, 499, 505, 526, 527, 528, 533, 540, 552, 560, 566, 568, 574, 584, 586, 588, 592, 594, 610, 612, 623, 638, 640, 641, 644, 654, 655, 660, 692, 740, 750, 753, 766, 777, 778, 786, 791, 793, 794, 797, 800, 802, 804, 812, 813, 837, 840, 852, 874, 875, 879, 882, 893, 894, 896, 898, 902, 912, 913, 919, 921, 931, 932, 940, 947, 950, 952, 955, 956, 957, 958, 959, 960, 961, 971, 977, 1055, 1069, 1073, 1074, 1076, 1077, 1082, 1092, 1104, 1110, 1118, 1121, 1124, 1130, 1152, 1164, 1178, 1186, 1194, 1200, 1210, 1212, 1214, 1218, 1220, 1224, 1240, 1253, 1272, 1274, 1332, 1345, 1352, 1354, 1357, 1374, 1383, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1400, 1405], "100": [11, 18, 28, 41, 54, 136, 139, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 214, 262, 281, 300, 357, 488, 654, 655, 685, 699, 709, 711, 714, 723, 739, 795, 852, 899, 925, 971, 977, 1126, 1220, 1236, 1252, 1253, 1260, 1261, 1263, 1277, 1291, 1303, 1306, 1315, 1331, 1374, 1394, 1405], "1000": [154, 232, 313, 334, 357, 374, 852, 944, 971, 1113, 1220, 1351, 1374, 1405], "10000": [152, 259, 357], "100000": [11, 28], "1000000": [12, 1116], "1001": [334, 357, 944, 971], "1002": [334, 357, 944, 971], "10047419486152048166": [247, 357], "1005": [374, 852], "100_000": [54, 830, 903, 971], "100\u00b5": 488, "101": [9, 28, 262, 357, 459, 488, 740, 899, 971, 977, 1332, 1405], "101000": 459, "10101": [28, 1400], "1010101": 9, "101514": [224, 357, 879, 971], "102": [262, 357, 899, 971], "1024": [38, 47, 49, 52, 152, 153, 154, 162, 171, 357, 416, 971, 1029], "1040361802642717": [1174, 1374], "107149": 1399, "10734580197236529959": [1151, 1374], "1073741824": [686, 852], "10783150408545073287": [247, 357], "107_930_000": 1383, "10_000": [41, 357], "10i": [246, 357, 893, 971], "10m": [483, 496, 1105, 1118], "10t00": 488, "11": [11, 17, 47, 52, 176, 184, 215, 224, 261, 289, 357, 369, 475, 476, 478, 483, 496, 520, 533, 566, 617, 641, 650, 660, 662, 676, 692, 766, 810, 835, 840, 848, 852, 868, 874, 875, 879, 894, 898, 902, 913, 919, 932, 971, 977, 1100, 1105, 1118, 1224, 1259, 1374, 1392], "110": [228, 357, 723, 740, 882, 971, 1332], "1101441246220388612": [527, 852], "111": [11, 1394], "11111": 1106, "111110": 1106, "11111001": [766, 852], "11111010": [766, 852], "11111111": 11, "112": [686, 852, 1405], "11330": 183, "1152921504606846976": [1249, 1374], "116": 183, "11638928888656214026": [527, 852], "118034": [930, 971], "11aa": 1397, "11aabb": 1397, "11h": [456, 1074], "12": [27, 41, 58, 140, 152, 176, 184, 224, 246, 257, 261, 262, 289, 304, 327, 357, 369, 445, 455, 456, 458, 459, 463, 471, 474, 475, 476, 478, 479, 480, 481, 488, 497, 498, 505, 533, 566, 598, 614, 641, 649, 660, 676, 686, 700, 721, 739, 787, 790, 793, 794, 795, 810, 813, 838, 839, 840, 852, 879, 893, 894, 898, 899, 902, 919, 926, 932, 971, 977, 1074, 1076, 1077, 1089, 1090, 1092, 1096, 1103, 1110, 1130, 1224, 1269, 1292, 1314, 1331, 1374, 1396, 1397, 1398, 1400, 1402, 1405], "120": [262, 357, 796, 899, 971, 1399], "1200": [681, 852], "120134": [739, 1331], "121": 1405, "123": [9, 607, 700, 707, 722, 745, 842, 977, 1292, 1299, 1337, 1350, 1374], "123000": 977, "1232e": [1057, 1059, 1374], "1234": [28, 681, 852], "12345": [802, 1052, 1110, 1142, 1269, 1374], "1234500": 977, "123456": [9, 977], "1234567": 28, "123456780": 140, "12346": 802, "123465": 977, "123a123": 722, "123abc": [721, 1313, 1314], "125": [1, 41, 62, 357, 367, 645, 831, 852, 929, 971, 1240, 1243, 1374], "1252": 152, "127": [1362, 1374, 1393], "128": [60, 74, 80, 1240, 1374], "129": [686, 852], "13": [143, 218, 219, 224, 235, 236, 243, 262, 263, 276, 289, 331, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 369, 455, 461, 462, 466, 470, 472, 473, 477, 484, 486, 610, 612, 660, 739, 780, 786, 789, 793, 800, 836, 838, 841, 852, 872, 873, 879, 887, 888, 899, 901, 919, 940, 950, 952, 955, 956, 957, 958, 959, 960, 961, 971, 1073, 1105, 1118, 1119, 1224, 1331, 1374, 1393], "130": [262, 357, 899, 971], "13382926553367784577": [527, 852], "134821952": 1383, "134_821_952": 1383, "135": [774, 1399], "13614470193936745724": [527, 852], "13756996518000038261": [1151, 1374], "13d": 488, "13h": [456, 1074], "14": [40, 176, 224, 246, 262, 265, 289, 327, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 456, 461, 462, 466, 470, 472, 473, 477, 484, 486, 488, 533, 607, 650, 793, 838, 839, 852, 879, 893, 899, 919, 950, 952, 955, 956, 957, 958, 959, 960, 961, 971, 977, 1074, 1105, 1110], "140": [262, 357, 899, 971], "141592653589793": 11, "141593": [649, 852, 988, 1374, 1396, 1399], "142857": [1240, 1374], "143": [739, 1331, 1405], "1433": [39, 357], "1436e16": 184, "1438741209321515184": [247, 357], "1440": [493, 1115], "1443e235": 1405, "149": 1405, "14d": 977, "14h": 488, "15": [11, 41, 143, 176, 224, 246, 262, 265, 289, 357, 447, 451, 476, 481, 483, 488, 496, 505, 644, 660, 676, 718, 787, 793, 838, 839, 852, 879, 893, 899, 919, 971, 977, 1066, 1069, 1105, 1110, 1118, 1130, 1310, 1374, 1393, 1397], "150": [262, 357, 899, 971, 1261, 1374], "1500": [176, 187], "15000": [259, 357], "153061": [548, 852], "155": 148, "15836": 184, "15_000": [259, 357], "16": [1, 41, 60, 81, 91, 176, 190, 224, 246, 262, 289, 331, 357, 443, 446, 481, 488, 533, 614, 621, 640, 645, 660, 740, 750, 786, 796, 797, 800, 810, 852, 879, 893, 899, 919, 926, 940, 971, 977, 1105, 1118, 1240, 1282, 1332, 1346, 1374, 1393, 1396, 1397, 1402], "160": [262, 357, 899, 971], "165": [1105, 1118], "1656e15": [1059, 1374], "166667": [763, 852, 1240, 1363, 1374], "1666683077": 802, "1666683099": 802, "167": 58, "16996": 1405, "16h": 977, "17": [140, 176, 184, 232, 261, 336, 357, 505, 531, 640, 662, 680, 782, 802, 839, 852, 898, 947, 971, 1057, 1059, 1105, 1130, 1155, 1259, 1374, 1405], "170": [148, 262, 357, 899, 971], "17293822569102704640": [1249, 1374], "174": 1405, "175201": [690, 852, 1283, 1374], "1755e": [181, 184], "1764": 62, "17888890": [232, 357], "179": 1405, "17_500": [259, 357], "18": [39, 140, 157, 224, 273, 289, 357, 446, 483, 496, 499, 533, 623, 640, 660, 750, 852, 879, 909, 913, 919, 971, 977, 1110, 1121, 1391, 1402], "180": [148, 449, 649, 852, 1399], "1800": [481, 1103], "1844": 184, "18446744073709551614": [1249, 1374], "185_000_000": 1383, "186": 1405, "1875": [678, 852, 938, 971], "1897": [458, 471, 1076, 1092], "18d": 977, "19": [184, 261, 289, 357, 458, 483, 660, 666, 668, 670, 672, 739, 852, 898, 919, 971, 1076, 1105, 1118, 1331], "1920": 1397, "196": 1398, "1964": [913, 971], "1969": [1397, 1398], "1970": [72, 73, 173, 496, 1118, 1383], "1972": 1383, "1976": [469, 500], "1977": [469, 500], "1978": [461, 462, 466, 469, 470, 472, 473, 477, 484, 486, 500, 1398], "1979": [469, 500], "1980": 488, "1985": [791, 794], "1990": [152, 1383], "1993": 1383, "1994": 1383, "1995": 152, "1998": [478, 1100], "1999": [304, 357, 478, 488, 977, 1100, 1110, 1400], "199992": [903, 971], "199994": [903, 971], "199996": [903, 971], "199998": [903, 971], "1_000_000": [232, 357, 1128, 1374], "1_234_500": 977, "1d": [246, 261, 289, 327, 357, 457, 478, 483, 488, 490, 493, 496, 499, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 796, 812, 839, 840, 852, 893, 898, 919, 971, 977, 1075, 1083, 1090, 1100, 1105, 1109, 1112, 1115, 1118, 1130, 1374], "1e": [12, 177, 178, 179, 180, 536, 852, 1159, 1374], "1e6": 12, "1h": [246, 261, 289, 327, 357, 464, 478, 483, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1082, 1084, 1100, 1105, 1118, 1130, 1374], "1i": [246, 289, 327, 357, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 852, 893, 919, 971, 1130, 1374], "1m": [246, 261, 289, 327, 357, 478, 483, 495, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1113, 1114, 1116, 1117, 1118, 1130, 1374], "1mo": [246, 261, 289, 327, 357, 460, 475, 476, 478, 482, 483, 489, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1078, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1105, 1111, 1118, 1119, 1130, 1374], "1n": [246, 261, 289, 327, 357, 478, 483, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118, 1130, 1374], "1q": [246, 261, 289, 327, 357, 478, 483, 496, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118], "1st_col": 977, "1u": [246, 261, 289, 327, 357, 478, 483, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118, 1130, 1374], "1w": [246, 261, 289, 327, 357, 478, 483, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118, 1130, 1374], "1w2d": [791, 792], "1y": [246, 261, 289, 327, 357, 478, 483, 496, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118], "1y2mo": [478, 1100], "1zy3": [700, 1292], "2": [1, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 66, 67, 85, 89, 104, 107, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 155, 161, 162, 164, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 184, 186, 198, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 366, 367, 368, 369, 371, 373, 374, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 415, 416, 418, 423, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 467, 468, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 826, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 848, 852, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 981, 982, 983, 986, 989, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1028, 1029, 1040, 1041, 1047, 1051, 1052, 1053, 1054, 1056, 1057, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1077, 1079, 1080, 1082, 1084, 1085, 1088, 1089, 1090, 1092, 1094, 1095, 1096, 1097, 1098, 1102, 1103, 1104, 1105, 1108, 1118, 1120, 1121, 1122, 1123, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1177, 1178, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1292, 1298, 1300, 1302, 1303, 1304, 1306, 1307, 1309, 1310, 1313, 1314, 1319, 1320, 1322, 1323, 1324, 1327, 1328, 1330, 1331, 1332, 1333, 1336, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374, 1379, 1383, 1384, 1386, 1387, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1403, 1404, 1405], "20": [39, 40, 41, 67, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 214, 215, 224, 228, 234, 246, 250, 273, 280, 282, 287, 289, 304, 314, 315, 319, 327, 333, 338, 357, 381, 382, 383, 437, 451, 458, 461, 462, 466, 470, 471, 472, 473, 477, 483, 484, 486, 488, 496, 499, 520, 527, 533, 598, 606, 617, 644, 664, 666, 668, 670, 672, 675, 677, 679, 705, 739, 750, 765, 793, 802, 812, 831, 839, 852, 868, 879, 882, 885, 893, 909, 912, 919, 929, 943, 949, 971, 977, 1069, 1076, 1080, 1092, 1105, 1110, 1118, 1121, 1127, 1133, 1150, 1252, 1297, 1331, 1352, 1354, 1357, 1374, 1390, 1391, 1394, 1400, 1402], "200": [491, 492, 494, 654, 655, 852, 977, 1126, 1236, 1252, 1253, 1260, 1261, 1263, 1374, 1394], "2000": [458, 468, 471, 475, 476, 478, 977, 1076, 1086, 1092, 1097, 1098, 1100, 1106, 1383, 1397], "200000": [491, 903, 971], "200000000": 494, "2001": [17, 457, 458, 463, 465, 468, 471, 474, 478, 479, 480, 483, 487, 496, 497, 498, 499, 664, 666, 668, 670, 672, 675, 677, 679, 735, 852, 977, 1075, 1076, 1081, 1083, 1084, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1105, 1109, 1118, 1119, 1120, 1121, 1122, 1327], "2002": [152, 468, 478, 1086, 1100, 1122], "2003": [478, 802, 1100], "2004": [478, 1100], "2005": [478, 1100], "2006": [478, 1100], "2008": 1383, "200m": [491, 492, 494], "2010": [304, 357, 488, 977], "2011": [456, 1074], "2012": [456, 1074, 1400], "2013": 1103, "2016": [261, 357, 898, 971], "2017": [261, 357, 898, 971], "2018": [261, 357, 482, 898, 971, 1104], "2019": [261, 357, 898, 971], "202": 1398, "2020": [156, 168, 217, 224, 244, 261, 289, 357, 360, 455, 460, 464, 467, 482, 485, 488, 489, 490, 491, 492, 493, 494, 495, 505, 660, 735, 737, 738, 777, 852, 871, 879, 898, 919, 971, 977, 1073, 1078, 1082, 1085, 1104, 1107, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1130, 1327, 1329, 1330, 1374, 1398], "2021": [217, 224, 244, 246, 327, 357, 735, 812, 871, 879, 893, 971, 977, 1079, 1080, 1087, 1108, 1327, 1397], "2022": [58, 217, 224, 244, 357, 459, 483, 496, 735, 791, 792, 794, 795, 796, 802, 871, 879, 971, 977, 1077, 1087, 1105, 1118, 1327], "2023": [17, 41, 140, 176, 259, 357, 459, 796, 812, 977, 1077], "2024": [176, 455, 461, 462, 466, 467, 470, 472, 473, 477, 481, 484, 486, 640, 777, 790, 791, 793, 794, 796, 852, 977, 1073, 1085, 1103, 1397, 1400], "2025": [455, 467, 481, 777, 810, 977, 1073, 1085], "2026": 1398, "2030": 1397, "2031": 977, "2040": 488, "2047317070637311557": [247, 357], "2055938745": 140, "2065": [461, 462, 466, 470, 472, 473, 477, 484, 486], "2068": 184, "207": 1398, "2077": [304, 357, 488, 977, 1110, 1397, 1398], "2095": 184, "20_000": [41, 357], "20t08": 488, "20t18": 1110, "20word": 155, "21": [176, 224, 273, 306, 357, 447, 458, 504, 506, 507, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 793, 802, 810, 828, 829, 852, 879, 909, 971, 977, 1066, 1076, 1129, 1131, 1132, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1374, 1391], "213": 1405, "2147483647": 1405, "2147483648": [1222, 1374], "21d": 977, "22": [47, 52, 176, 184, 357, 463, 479, 483, 496, 498, 499, 662, 664, 666, 668, 670, 672, 675, 677, 679, 735, 793, 848, 852, 971, 977, 1105, 1118, 1121, 1259, 1327, 1374, 1397, 1398, 1405], "221": 1405, "2246e": [1282, 1346, 1374], "225": [483, 496, 1399], "22500": 830, "22_000_000": 1383, "22_500": 830, "23": [11, 134, 184, 224, 246, 289, 319, 357, 459, 463, 466, 479, 481, 483, 488, 498, 660, 664, 666, 668, 670, 672, 675, 677, 679, 793, 796, 838, 839, 840, 852, 879, 893, 919, 929, 971, 977, 1077, 1084, 1103, 1357, 1374, 1404, 1405], "230498": 12, "230498095872587": 12, "2304980958725870923": 12, "232338648": 1383, "2337": [41, 357], "234": 28, "2345": 977, "23456789": 11, "235": 1405, "23h": 977, "24": [60, 176, 246, 260, 261, 265, 289, 304, 327, 357, 445, 447, 463, 478, 479, 483, 490, 496, 498, 621, 660, 664, 666, 668, 670, 672, 675, 677, 679, 718, 791, 792, 794, 795, 796, 839, 840, 852, 893, 897, 898, 919, 971, 1066, 1100, 1105, 1112, 1118, 1173, 1348, 1374, 1397, 1404], "24030": 183, "249": [766, 852], "25": [1, 28, 41, 62, 140, 224, 228, 246, 251, 261, 289, 314, 319, 327, 331, 357, 416, 451, 463, 464, 479, 488, 498, 505, 645, 647, 650, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 759, 793, 794, 795, 796, 802, 810, 811, 814, 839, 840, 852, 879, 882, 893, 898, 906, 919, 938, 940, 971, 977, 1029, 1068, 1069, 1082, 1110, 1124, 1130, 1153, 1240, 1245, 1313, 1374, 1391, 1396, 1402, 1403], "250": [766, 852, 1261, 1374, 1394, 1405], "2500": [259, 319, 357], "254508": [505, 852, 1130, 1374], "255": 1405, "256": [265, 357, 416, 1029, 1240, 1374, 1396], "2560": 1029, "259921": [435, 852, 1051, 1374, 1396], "25_000_000": 1383, "26": [39, 41, 176, 181, 182, 183, 184, 188, 224, 357, 464, 497, 879, 971, 1082], "266667": [224, 357, 879, 971], "27": [1, 62, 314, 350, 357, 446, 474, 480, 497, 750, 777, 852, 961, 977, 1073, 1243, 1352, 1374, 1404, 1405], "270": 1399, "28": [310, 315, 357, 367, 482, 499, 852, 1104, 1121, 1354, 1374, 1397, 1399, 1404, 1405], "283185": [649, 852], "2846": 357, "285714": [534, 852, 1157, 1374], "289962": 1399, "28_341_469": 1383, "29": [17, 176, 456, 475, 1074, 1097], "29096": 1405, "290994": [930, 971], "292432": [989, 1374], "292893": [505, 852, 1130, 1374], "2_color_scal": [41, 357], "2d": [214, 289, 314, 315, 357, 478, 660, 812, 852, 919, 971, 1074, 1081], "2h": [664, 666, 668, 670, 672, 675, 677, 679, 852], "2i": [246, 357, 893, 971], "2m": [977, 1095], "2x": 183, "3": [1, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 53, 58, 59, 60, 61, 62, 66, 67, 85, 97, 104, 107, 109, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 155, 157, 161, 162, 163, 167, 173, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 367, 368, 369, 370, 372, 383, 384, 385, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 497, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 619, 620, 621, 622, 623, 624, 626, 628, 630, 631, 634, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 693, 694, 695, 698, 699, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 736, 737, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 757, 758, 761, 762, 763, 765, 766, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 982, 983, 986, 988, 990, 991, 992, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1030, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1081, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1094, 1095, 1096, 1101, 1104, 1106, 1107, 1109, 1110, 1111, 1113, 1114, 1116, 1120, 1121, 1123, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1177, 1178, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1291, 1293, 1294, 1295, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1308, 1309, 1313, 1314, 1315, 1316, 1317, 1321, 1328, 1329, 1334, 1335, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1353, 1354, 1355, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374, 1379, 1383, 1384, 1386, 1387, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1403, 1404, 1405], "30": [41, 64, 164, 172, 214, 224, 234, 246, 250, 280, 287, 310, 331, 357, 360, 381, 382, 383, 451, 459, 461, 462, 466, 470, 472, 473, 474, 475, 477, 480, 482, 483, 484, 486, 488, 489, 496, 497, 527, 606, 686, 793, 810, 812, 838, 839, 852, 874, 879, 885, 893, 912, 913, 926, 940, 971, 977, 1069, 1077, 1097, 1104, 1105, 1110, 1111, 1118, 1150, 1374, 1379, 1390, 1391, 1394, 1396, 1397, 1399, 1400, 1403, 1405], "300": [310, 357, 526, 638, 655, 852, 977, 1253, 1260, 1261, 1263, 1374, 1394], "3000": 977, "3002": [458, 471, 1076, 1092], "30103": [594, 852, 1396], "3022416320763508302": [1151, 1374], "30_000": [41, 357], "30m": [246, 357, 483, 496, 893, 971, 1105, 1118], "30t16": 488, "31": [62, 67, 152, 153, 167, 177, 178, 179, 180, 224, 304, 357, 458, 459, 463, 471, 475, 478, 481, 489, 705, 735, 790, 793, 802, 812, 831, 879, 971, 977, 1074, 1076, 1077, 1081, 1092, 1097, 1103, 1110, 1111, 1127, 1252, 1297, 1327, 1374, 1398, 1400, 1402, 1405], "31t06": 1110, "32": [8, 60, 72, 78, 82, 92, 256, 261, 289, 357, 598, 599, 621, 660, 686, 852, 898, 919, 971, 1070, 1101, 1240, 1264, 1374, 1391, 1397], "321": [28, 1405], "3212": [739, 1331], "321cba": 1397, "3265500": 977, "32971": [499, 1121], "32974": [499, 1121], "32976": [499, 1121], "32bit": [314, 357], "33": [224, 273, 357, 680, 852, 879, 909, 971, 1264, 1374, 1398], "333": [17, 681, 852, 1126, 1236, 1270, 1374], "33333": 1400, "333333": [252, 357, 623, 763, 810, 852, 896, 971, 1240, 1268, 1363, 1374, 1391], "34": [224, 357, 721, 735, 879, 971, 1314, 1327], "3420": [739, 1331], "343622": [691, 852], "345": [432, 433, 716, 717, 1046, 1047, 1308, 1309], "3450": [1270, 1374], "3456": 977, "34776706224699483": [1284, 1374], "35": [41, 357, 451, 488, 793, 852, 1069, 1374], "350": [357, 360, 526, 638, 852, 1261, 1374, 1379], "3500": [1270, 1374], "356": [463, 479, 498], "356194": [773, 774, 1399], "357": [463, 479, 498], "358": [463, 479, 498], "359": [463, 479, 498], "36": [224, 357, 879, 971, 1402], "360": [449, 649, 852, 1399], "361": 1405, "363961": [586, 1212], "366": [479, 1101], "37": [13, 143, 977], "370h": [505, 852, 1130, 1374], "37338": 1405, "38": [41, 140, 181, 184, 357], "38180177416060584": [673, 852, 1265, 1374], "381802": [673, 852, 1265, 1374], "386294": [595, 852, 1221, 1374, 1396], "389056": [509, 852, 1133, 1374, 1396], "39": [677, 802, 852], "39m": 977, "3_color_scal": [41, 357], "3d12h4m25": [246, 261, 289, 327, 357, 505, 660, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1130, 1374], "3f": [155, 735, 738, 1327, 1330], "3i": [246, 289, 357, 893, 971], "3rd": [1304, 1328], "3xy": [700, 1292], "4": [1, 8, 10, 14, 18, 26, 36, 38, 40, 41, 43, 44, 47, 58, 59, 60, 61, 62, 66, 67, 85, 107, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 153, 158, 160, 164, 167, 170, 171, 172, 176, 188, 212, 213, 214, 215, 216, 217, 218, 219, 223, 225, 229, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 268, 269, 270, 273, 275, 276, 277, 279, 280, 281, 282, 285, 289, 291, 292, 299, 300, 303, 307, 308, 309, 310, 311, 312, 315, 318, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 366, 367, 368, 369, 371, 373, 385, 392, 393, 394, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 409, 416, 427, 428, 429, 432, 433, 435, 436, 437, 441, 442, 445, 446, 447, 449, 452, 459, 462, 463, 471, 479, 480, 481, 482, 484, 485, 488, 490, 493, 495, 498, 502, 503, 505, 509, 510, 512, 513, 514, 516, 517, 518, 521, 522, 523, 524, 525, 528, 530, 532, 533, 534, 535, 545, 546, 550, 551, 552, 559, 560, 561, 562, 563, 565, 566, 568, 576, 578, 579, 580, 581, 582, 583, 584, 588, 589, 594, 597, 598, 599, 619, 621, 623, 624, 626, 628, 630, 631, 634, 635, 636, 639, 640, 642, 643, 644, 645, 648, 650, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 685, 688, 692, 693, 694, 695, 698, 700, 704, 707, 710, 712, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 733, 734, 735, 736, 740, 745, 746, 748, 749, 750, 751, 753, 756, 757, 758, 759, 765, 766, 768, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 797, 799, 800, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 848, 852, 867, 868, 869, 871, 872, 873, 874, 875, 878, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 909, 910, 912, 913, 914, 916, 919, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 939, 940, 943, 944, 947, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 981, 986, 989, 996, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1029, 1040, 1041, 1046, 1047, 1052, 1053, 1055, 1061, 1066, 1068, 1070, 1080, 1084, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1102, 1104, 1107, 1112, 1115, 1117, 1119, 1120, 1127, 1130, 1134, 1135, 1137, 1138, 1144, 1145, 1147, 1152, 1153, 1156, 1157, 1158, 1159, 1160, 1164, 1167, 1168, 1169, 1170, 1172, 1178, 1185, 1186, 1187, 1188, 1189, 1194, 1198, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1214, 1215, 1230, 1233, 1234, 1237, 1240, 1241, 1242, 1243, 1247, 1248, 1252, 1253, 1254, 1257, 1258, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1273, 1277, 1278, 1281, 1284, 1285, 1286, 1290, 1292, 1296, 1299, 1302, 1304, 1308, 1309, 1311, 1312, 1317, 1319, 1320, 1325, 1326, 1327, 1328, 1332, 1337, 1338, 1341, 1343, 1345, 1351, 1354, 1356, 1358, 1359, 1365, 1374, 1379, 1383, 1384, 1386, 1387, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1402, 1403, 1404, 1405], "40": [41, 214, 224, 234, 261, 280, 357, 483, 488, 496, 527, 592, 739, 750, 852, 879, 898, 912, 971, 977, 1087, 1118, 1218, 1331, 1390, 1391, 1394, 1397], "400": [326, 357, 491, 492, 494, 937, 971, 1260, 1261, 1263, 1374, 1394], "4000000": [1128, 1374], "400157": 97, "404": [262, 357, 706, 708, 899, 971, 1298, 1300], "4096": 1396, "41": [224, 357, 677, 852, 879, 971, 1391, 1405], "412277": 184, "414214": [695, 852, 1287, 1374, 1396], "4160": 62, "416147": 1399, "4164": [261, 357, 898, 971], "4180": 152, "42": [62, 143, 224, 247, 273, 289, 357, 488, 660, 852, 879, 909, 919, 971, 1151, 1374, 1390, 1404], "424778": [649, 852], "428571": [504, 852, 1129, 1374], "429101": 1391, "4294967296": [47, 357], "43": [224, 289, 357, 446, 660, 677, 852, 879, 919, 971], "4321": 977, "433013": [674, 852, 930, 971], "44": [11, 273, 357, 452, 852, 909, 971], "4411": [261, 357, 898, 971], "44225": [1051, 1374], "444": 11, "44444444444": 11, "45": [41, 224, 289, 357, 459, 483, 496, 660, 677, 700, 707, 747, 774, 793, 812, 838, 839, 852, 879, 919, 971, 977, 1077, 1105, 1110, 1118, 1159, 1292, 1299, 1340, 1374, 1396, 1397, 1399, 1403, 1405], "450": [1261, 1374], "45000": 830, "4500000": 977, "456": [9, 11, 459, 977, 1077, 1350, 1374], "456000": [459, 1077], "456001\u00b5": 977, "4566": [261, 357, 898, 971], "456789": [488, 977, 1106], "456789\u00b5": 977, "456m": 977, "457658": 1399, "459148": [501, 852], "46": 977, "4696": [261, 357, 898, 971], "47": [58, 224, 357, 677, 852, 879, 971, 977, 1391], "470": [913, 971], "47033": [673, 852, 1265, 1374], "47033046033698594": [673, 852, 1265, 1374], "475": [913, 971], "48": [13, 184, 289, 357, 660, 750, 852, 919, 971, 977], "4827": [261, 357, 898, 971], "485": 1405, "49": [224, 357, 879, 971, 977], "492474": [505, 852, 1130, 1374], "498": [262, 357, 899, 971], "4_500_000": 977, "4ab4a": 1397, "4d": [505, 852, 1130, 1374], "4f6228": [41, 357], "4f71": [41, 357], "4x": [258, 357], "5": [1, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 38, 40, 43, 44, 47, 53, 58, 59, 61, 62, 66, 107, 133, 136, 137, 138, 139, 140, 142, 153, 176, 177, 179, 182, 184, 188, 213, 214, 217, 218, 219, 224, 225, 228, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 248, 249, 251, 252, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 268, 269, 270, 275, 276, 277, 279, 281, 282, 283, 285, 289, 292, 299, 300, 303, 304, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 321, 324, 325, 326, 327, 330, 331, 333, 334, 336, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 367, 368, 371, 386, 387, 392, 393, 394, 396, 398, 402, 407, 409, 415, 416, 427, 428, 429, 432, 433, 436, 437, 447, 448, 449, 451, 452, 455, 458, 459, 460, 461, 462, 466, 467, 470, 471, 472, 473, 477, 482, 484, 485, 486, 488, 489, 495, 499, 503, 505, 507, 508, 511, 513, 517, 518, 522, 523, 525, 528, 530, 533, 535, 536, 539, 542, 543, 544, 545, 546, 550, 552, 559, 562, 563, 565, 566, 568, 571, 573, 574, 578, 579, 580, 581, 582, 583, 587, 588, 592, 598, 619, 621, 623, 635, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 679, 680, 683, 694, 700, 710, 711, 712, 715, 716, 717, 736, 740, 751, 753, 757, 758, 759, 763, 771, 773, 774, 776, 777, 778, 779, 780, 782, 784, 786, 787, 788, 789, 790, 791, 793, 796, 797, 798, 799, 800, 804, 806, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 830, 831, 833, 835, 836, 837, 841, 842, 848, 852, 867, 871, 872, 873, 874, 875, 879, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 906, 907, 913, 916, 919, 925, 926, 927, 928, 929, 930, 931, 932, 936, 937, 939, 940, 943, 944, 947, 949, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 971, 977, 986, 989, 993, 996, 999, 1000, 1003, 1005, 1006, 1007, 1009, 1011, 1015, 1020, 1021, 1022, 1028, 1029, 1040, 1041, 1046, 1053, 1055, 1062, 1066, 1067, 1068, 1069, 1070, 1073, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1092, 1104, 1106, 1107, 1108, 1110, 1111, 1117, 1119, 1120, 1121, 1127, 1130, 1132, 1134, 1135, 1136, 1147, 1152, 1153, 1156, 1158, 1159, 1163, 1166, 1178, 1185, 1188, 1189, 1194, 1197, 1200, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1214, 1218, 1222, 1230, 1237, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1253, 1254, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1267, 1269, 1271, 1273, 1278, 1284, 1287, 1292, 1302, 1303, 1304, 1307, 1308, 1328, 1332, 1345, 1352, 1354, 1357, 1358, 1359, 1362, 1363, 1365, 1374, 1379, 1384, 1387, 1389, 1391, 1392, 1393, 1396, 1397, 1398, 1399, 1402, 1404, 1405], "50": [13, 28, 41, 214, 224, 234, 244, 357, 437, 483, 488, 496, 791, 792, 852, 879, 971, 977, 1055, 1068, 1118, 1313, 1374, 1390, 1391], "500": [41, 326, 357, 360, 461, 462, 466, 470, 472, 473, 477, 484, 486, 937, 971, 1091, 1093, 1099, 1260, 1261, 1263, 1374, 1379], "5000": [319, 357, 1357, 1374], "50000": 153, "500000": [470, 1091], "500000000": [477, 1099], "5000555": 977, "500_000": [461, 462, 466, 470, 472, 473, 477, 484, 486], "500m": [1091, 1093, 1099], "51": 977, "512": [47, 154, 258, 357, 416, 645, 852, 1029, 1240, 1374], "51966": [740, 1332], "52": [331, 357, 497, 680, 852, 940, 971], "523599": 1399, "527525": [1266, 1374], "53": [497, 1119, 1402], "533316061": 1383, "533_316_061": 1383, "54": [509, 852, 1174, 1374, 1396, 1405], "540": [449, 649, 852], "540302": 1399, "543": 9, "543081": [439, 852, 1058, 1374], "5432": 154, "54321": 9, "544": 1405, "544705": 782, "549306": [993, 1374], "55": [41, 60, 357, 531, 536, 852, 1155, 1374, 1393, 1397, 1398], "5555": 977, "55550": 977, "56": [140, 721, 754, 852, 1314], "566371": [649, 852], "567": 28, "56789": [1052, 1142, 1269, 1374], "57": [677, 852, 1269, 1374, 1399, 1405], "570796": [375, 377, 852, 988, 990, 1374, 1399], "575050513": [181, 184], "58": [148, 281, 357], "581139": [1068, 1374], "584963": [593, 852], "587401": [435, 852, 1396], "59": [140, 224, 357, 459, 473, 481, 484, 488, 518, 793, 838, 839, 840, 852, 879, 971, 977, 1077, 1095, 1103, 1106], "59815": [509, 852, 1396], "5_000_555": 977, "5th": [41, 357], "6": [1, 8, 10, 14, 36, 38, 40, 41, 43, 44, 45, 46, 47, 57, 59, 61, 66, 98, 100, 107, 133, 136, 137, 138, 139, 157, 161, 162, 176, 213, 214, 217, 220, 221, 225, 226, 227, 229, 230, 231, 233, 234, 237, 240, 241, 242, 243, 244, 246, 248, 250, 251, 252, 254, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 274, 275, 278, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 321, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 340, 350, 351, 357, 360, 361, 362, 367, 371, 392, 393, 394, 396, 402, 428, 429, 432, 433, 445, 446, 452, 455, 459, 463, 467, 474, 478, 479, 480, 491, 492, 494, 497, 498, 501, 503, 512, 513, 518, 522, 528, 530, 533, 552, 553, 554, 563, 566, 579, 580, 581, 582, 586, 599, 635, 639, 646, 649, 650, 651, 656, 658, 660, 663, 665, 667, 669, 671, 674, 676, 677, 678, 680, 683, 688, 694, 700, 705, 716, 717, 740, 751, 753, 758, 766, 768, 770, 777, 779, 784, 786, 787, 788, 790, 793, 797, 800, 806, 813, 814, 818, 831, 835, 842, 848, 852, 867, 871, 874, 875, 876, 877, 880, 881, 883, 884, 885, 886, 889, 890, 891, 893, 894, 896, 897, 898, 899, 900, 902, 903, 911, 913, 915, 916, 917, 919, 920, 921, 923, 925, 926, 927, 928, 929, 932, 935, 936, 939, 940, 943, 944, 951, 961, 962, 971, 977, 1003, 1005, 1006, 1007, 1009, 1015, 1046, 1053, 1057, 1059, 1064, 1065, 1070, 1073, 1085, 1100, 1110, 1120, 1127, 1134, 1147, 1153, 1159, 1179, 1180, 1189, 1192, 1205, 1206, 1207, 1208, 1212, 1230, 1244, 1247, 1248, 1254, 1256, 1262, 1264, 1266, 1268, 1273, 1278, 1281, 1292, 1297, 1308, 1332, 1344, 1354, 1374, 1379, 1384, 1387, 1389, 1391, 1392, 1396, 1402, 1403, 1405], "60": [41, 214, 234, 281, 357, 466, 472, 473, 484, 495, 518, 677, 735, 852, 1101, 1106, 1117, 1249, 1327, 1374, 1399], "600": [326, 357, 491, 492, 494, 937, 971, 977], "60000": 470, "600000": 977, "60000000": 477, "60206": [594, 852, 1396], "605551": 833, "605551275463989": 833, "609438": 1396, "60_000": [461, 462, 466, 470, 472, 473, 477, 484, 486], "61": [281, 357], "625": [671, 852], "626172": [702, 1294], "63": [677, 852], "63204": 1405, "6331e16": [1346, 1374, 1399], "636253": 1399, "64": [1, 60, 62, 73, 75, 79, 83, 90, 93, 175, 212, 319, 357, 440, 621, 645, 852, 1240, 1243, 1374, 1396], "64030": [740, 1332], "642093": 1399, "647961": 184, "64bit": [176, 652, 852, 1249, 1374], "65": [228, 357, 882, 971, 1124, 1374], "650": [526, 638, 852], "65280": [740, 1332], "654": [28, 831, 929, 971], "65432": 1400, "654321": 607, "65536": 1396, "65552": [415, 1028], "66": [261, 326, 357, 677, 766, 852, 898, 937, 971, 1174, 1264, 1374], "663053": 140, "666": 977, "666000": 977, "666667": [224, 252, 328, 345, 357, 504, 810, 811, 817, 852, 879, 896, 938, 956, 971, 1129, 1374], "666f6f": [702, 1294], "67500": 830, "676": [262, 357, 899, 971], "678": [700, 707, 1292, 1299], "6789": [29, 977], "67890": 29, "686241": 1391, "69": [677, 852, 1174, 1374], "693147": [595, 852, 1219, 1221, 1374, 1396], "6_000_000": 1383, "7": [1, 17, 28, 36, 38, 40, 41, 43, 44, 45, 46, 47, 53, 59, 61, 66, 157, 161, 162, 176, 191, 213, 217, 220, 221, 222, 224, 226, 227, 230, 231, 233, 237, 240, 242, 246, 248, 250, 252, 260, 264, 267, 269, 271, 273, 274, 278, 281, 283, 286, 287, 289, 290, 292, 293, 294, 295, 297, 300, 302, 305, 306, 307, 308, 313, 315, 316, 317, 325, 327, 328, 329, 357, 360, 361, 367, 371, 393, 394, 396, 405, 446, 458, 459, 463, 471, 479, 482, 483, 488, 496, 498, 509, 522, 528, 533, 534, 552, 566, 579, 580, 581, 582, 639, 640, 650, 656, 660, 676, 677, 694, 710, 739, 753, 777, 786, 787, 790, 793, 794, 800, 805, 813, 814, 831, 835, 842, 852, 871, 876, 877, 879, 881, 884, 886, 889, 891, 893, 894, 896, 897, 902, 909, 911, 914, 917, 919, 920, 921, 925, 929, 932, 971, 977, 993, 1006, 1007, 1009, 1018, 1076, 1077, 1081, 1087, 1092, 1104, 1105, 1110, 1118, 1120, 1133, 1157, 1173, 1192, 1205, 1206, 1207, 1208, 1253, 1254, 1267, 1273, 1302, 1331, 1374, 1379, 1384, 1389, 1391, 1392, 1393, 1396, 1398, 1402, 1405], "70": [224, 357, 766, 794, 852, 879, 971, 1174, 1374, 1391], "700": [326, 357, 937, 971], "702963": [41, 357], "7051579356916758811": 169, "707107": [404, 506, 674, 675, 773, 852, 1017, 1131, 1374, 1399], "712389": 1399, "714": 1405, "714286": [534, 852, 1157, 1374], "718281828459045": [11, 501, 593, 852, 1124, 1219, 1374], "718282": [509, 852, 1133, 1374, 1396], "720": [449, 649, 852], "7264": 1405, "732051": [1287, 1374], "7415e16": 184, "742": [262, 357, 899, 971], "75": [41, 224, 228, 357, 371, 639, 647, 650, 663, 665, 667, 669, 674, 676, 678, 810, 814, 852, 879, 882, 971, 977, 1068, 1153, 1174, 1245, 1313, 1374, 1391, 1399, 1405], "7500": [259, 357], "7508": 1405, "754": [759, 852], "754888": [501, 852], "761594": [755, 852, 1347, 1374], "764052": 97, "7654": 977, "765431": 1106, "7654321": 28, "76933c": [41, 357], "77": 1110, "78": [9, 148, 721, 1314], "780": 9, "784": [261, 357, 898, 971], "785398": [379, 773, 774, 852, 992, 1374, 1399], "789": [11, 977], "79": [1174, 1374], "7d": 977, "8": [1, 12, 36, 38, 40, 43, 44, 45, 46, 47, 49, 58, 59, 61, 62, 66, 84, 88, 94, 161, 162, 176, 213, 217, 220, 221, 222, 224, 226, 227, 229, 230, 231, 233, 237, 240, 242, 244, 248, 250, 257, 260, 261, 262, 264, 265, 267, 269, 271, 274, 283, 286, 287, 289, 290, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 308, 313, 315, 316, 317, 325, 328, 329, 331, 357, 371, 373, 385, 393, 394, 396, 443, 446, 447, 459, 488, 522, 529, 533, 534, 560, 562, 566, 579, 580, 581, 582, 621, 639, 640, 645, 650, 656, 657, 662, 680, 686, 692, 694, 718, 719, 720, 735, 745, 766, 771, 777, 782, 784, 787, 789, 797, 799, 804, 805, 808, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 831, 833, 836, 837, 841, 852, 871, 876, 877, 879, 881, 883, 884, 886, 889, 891, 894, 897, 898, 899, 902, 903, 913, 917, 920, 921, 925, 929, 932, 940, 971, 977, 1006, 1007, 1009, 1059, 1066, 1087, 1153, 1157, 1173, 1186, 1188, 1192, 1205, 1206, 1207, 1208, 1240, 1243, 1254, 1257, 1259, 1262, 1264, 1266, 1268, 1269, 1311, 1312, 1327, 1374, 1383, 1384, 1389, 1391, 1392, 1393, 1396, 1397, 1398, 1402, 1405], "80": [41, 228, 357, 882, 971], "800": [491, 492, 494, 1110], "8000": 154, "803065983": 140, "81": 1396, "814697265625": [1128, 1374], "816497": [305, 357], "8192": 152, "82": [261, 357, 898, 971], "8257e14": 1405, "83": [261, 357, 898, 971], "833": [261, 357, 898, 971], "833333": [345, 956], "848062": 1399, "848808": 184, "85": [41, 148, 357, 1174, 1374, 1405], "850": [526, 638, 852], "8568409950394724": [1124, 1374], "8589934592": [686, 852], "86": 1405, "8601": 1397, "87": 1405, "876": 9, "877809": 1391, "88": [224, 357, 879, 971], "881374": [378, 852, 991, 1374], "888": [831, 929, 971], "8_000_000": 1383, "8a": [1025, 1026], "8nin": 1405, "9": [1, 9, 36, 38, 40, 41, 43, 44, 47, 52, 53, 58, 66, 213, 222, 224, 237, 239, 248, 252, 260, 262, 264, 265, 281, 289, 291, 292, 295, 307, 308, 325, 329, 331, 350, 357, 367, 371, 373, 385, 393, 394, 396, 401, 403, 443, 446, 449, 459, 488, 514, 522, 533, 540, 560, 566, 577, 585, 623, 639, 640, 649, 656, 660, 661, 662, 673, 676, 677, 688, 692, 707, 739, 747, 750, 780, 786, 787, 790, 793, 805, 840, 852, 879, 889, 894, 896, 897, 899, 902, 919, 921, 932, 940, 961, 971, 977, 1001, 1002, 1006, 1007, 1009, 1014, 1016, 1068, 1081, 1091, 1093, 1099, 1105, 1118, 1119, 1164, 1173, 1186, 1192, 1203, 1211, 1254, 1258, 1259, 1265, 1267, 1269, 1281, 1299, 1331, 1340, 1374, 1383, 1384, 1389, 1391, 1392, 1393, 1402], "90": [224, 262, 357, 739, 879, 899, 971, 1331, 1391, 1399], "90000": 830, "901234": [1052, 1142, 1269, 1374], "909": [261, 357, 898, 971], "910": [261, 357, 707, 898, 971, 1299], "910t": [700, 707, 1292, 1299], "914": [261, 357, 898, 971], "9223372036854775807": [762, 852], "9223372036854775808": [596, 852], "927295": 1399, "928571": [507, 852, 1132, 1374], "93": [1174, 1374], "94": [368, 852], "9477376373212048": [1174, 1374], "95": [18, 368, 852, 977], "95b3d7": [41, 357], "96": [18, 224, 357, 368, 852, 879, 971, 1174, 1374], "961": 62, "963624": [506, 852, 1131, 1374], "964028": [281, 357], "96_067_179": 1383, "97": [18, 251, 357, 368, 852, 1174, 1374], "9774092659964970114": [527, 852], "978307200": [465, 1083], "978307200000": 487, "978307200000000": [465, 487, 1083, 1109], "978307200000000000": 1109, "978393600": [465, 1083], "978393600000": 487, "978393600000000": [465, 487, 1083, 1109], "978393600000000000": 1109, "978480000": [465, 1083], "978480000000": 487, "978480000000000": [465, 487, 1083, 1109], "978480000000000000": 1109, "978738": 97, "98": [18, 251, 281, 357, 427, 521, 524, 693, 739, 757, 852, 1331], "987": [28, 607], "987000": 977, "9876": 9, "987654": [28, 977], "987654321": 11, "9876543210": 140, "987m": 977, "988": 11, "99": [18, 41, 235, 236, 251, 254, 281, 326, 357, 368, 427, 511, 513, 521, 524, 693, 757, 852, 887, 888, 937, 971, 1110, 1124, 1136, 1374, 1396], "9914e218": 184, "998347": [281, 357], "999": [458, 471, 977, 1076, 1092, 1394, 1405], "999000": 977, "999954": [281, 357], "999999": [481, 745, 793, 838, 839, 840, 977, 1103, 1110, 1337], "999999\u00b5": 977, "9bbb59": [41, 357], "A": [14, 38, 41, 47, 49, 52, 53, 54, 55, 64, 65, 70, 76, 132, 140, 145, 147, 152, 153, 154, 155, 167, 169, 175, 190, 221, 228, 229, 230, 235, 236, 239, 246, 261, 266, 268, 270, 275, 281, 307, 310, 325, 326, 327, 331, 332, 357, 362, 366, 433, 453, 454, 459, 485, 488, 502, 503, 511, 512, 513, 523, 525, 538, 541, 543, 544, 550, 590, 597, 598, 611, 625, 634, 635, 657, 663, 665, 667, 669, 671, 674, 676, 678, 698, 699, 700, 706, 707, 708, 709, 710, 711, 712, 715, 717, 721, 722, 723, 725, 736, 745, 780, 796, 797, 801, 852, 877, 882, 883, 884, 887, 888, 893, 898, 904, 917, 937, 940, 941, 971, 977, 1047, 1071, 1072, 1077, 1107, 1110, 1126, 1136, 1137, 1138, 1236, 1260, 1261, 1263, 1266, 1267, 1268, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1307, 1309, 1313, 1314, 1315, 1317, 1328, 1337, 1374, 1383, 1384, 1387, 1400, 1402], "AND": [262, 357, 767, 768, 831, 899, 971, 977, 1393], "ANDs": [418, 852, 1031, 1374], "AS": [304, 357, 831, 832, 929, 971, 1383, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1404], "And": [743, 1335], "As": [13, 57, 98, 100, 133, 135, 136, 137, 139, 157, 161, 162, 171, 237, 285, 314, 319, 357, 590, 842, 889, 916, 971], "At": [47, 49, 50, 51, 52, 64, 65, 281, 357, 874, 875, 885, 913, 926, 971], "BY": [831, 929, 971, 1383, 1386, 1392, 1401, 1402], "Be": 971, "By": [5, 13, 15, 31, 34, 58, 152, 153, 167, 246, 260, 261, 266, 289, 291, 300, 305, 327, 328, 357, 402, 478, 483, 496, 583, 586, 592, 640, 655, 660, 664, 666, 668, 670, 672, 675, 677, 679, 685, 696, 764, 784, 791, 792, 794, 795, 796, 812, 833, 839, 840, 841, 852, 874, 893, 897, 898, 904, 919, 925, 930, 938, 971, 1015, 1100, 1105, 1118, 1209, 1253, 1277, 1288, 1364, 1374], "For": [15, 40, 41, 53, 54, 55, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 214, 228, 229, 232, 234, 260, 261, 281, 289, 314, 343, 357, 360, 475, 476, 488, 504, 506, 507, 518, 590, 599, 611, 652, 691, 698, 706, 707, 708, 710, 712, 736, 786, 796, 800, 801, 842, 848, 852, 882, 883, 898, 919, 954, 971, 1110, 1128, 1129, 1131, 1132, 1135, 1224, 1249, 1284, 1290, 1298, 1299, 1300, 1302, 1304, 1328, 1352, 1374, 1379], "IF": 1395, "If": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 65, 74, 133, 134, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 185, 186, 187, 198, 212, 214, 217, 229, 234, 237, 244, 246, 248, 256, 257, 258, 260, 261, 264, 265, 270, 277, 281, 285, 289, 291, 292, 293, 297, 300, 302, 304, 307, 308, 311, 312, 314, 315, 321, 322, 324, 325, 326, 357, 360, 370, 372, 390, 395, 402, 407, 415, 429, 455, 459, 460, 467, 475, 476, 485, 488, 514, 529, 535, 540, 548, 553, 554, 558, 569, 578, 583, 584, 587, 590, 598, 599, 606, 607, 613, 615, 640, 645, 646, 647, 650, 652, 654, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 685, 687, 691, 692, 697, 707, 708, 710, 712, 713, 714, 725, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 742, 745, 752, 763, 767, 769, 772, 776, 777, 778, 781, 782, 784, 786, 787, 791, 792, 794, 795, 796, 799, 800, 806, 807, 808, 810, 811, 812, 814, 818, 824, 826, 827, 828, 829, 834, 835, 836, 839, 840, 842, 843, 852, 874, 875, 885, 889, 893, 897, 898, 903, 908, 913, 915, 916, 917, 919, 923, 925, 926, 927, 929, 934, 936, 937, 946, 954, 964, 971, 976, 977, 984, 985, 999, 1000, 1003, 1008, 1015, 1018, 1020, 1028, 1042, 1055, 1073, 1077, 1078, 1085, 1097, 1098, 1107, 1110, 1135, 1152, 1153, 1158, 1164, 1173, 1174, 1178, 1179, 1180, 1184, 1195, 1204, 1209, 1210, 1213, 1216, 1224, 1243, 1244, 1245, 1247, 1249, 1252, 1253, 1254, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1273, 1275, 1277, 1280, 1284, 1285, 1289, 1299, 1300, 1302, 1304, 1305, 1306, 1313, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1334, 1337, 1344, 1345, 1348, 1349, 1352, 1354, 1363, 1374, 1379, 1383, 1384, 1386, 1394, 1397, 1402], "In": [58, 65, 154, 156, 168, 169, 172, 184, 188, 208, 213, 232, 234, 237, 246, 261, 262, 265, 277, 281, 289, 315, 324, 357, 360, 598, 640, 660, 721, 722, 842, 852, 875, 893, 898, 899, 919, 936, 971, 1128, 1135, 1243, 1248, 1314, 1374, 1379], "It": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 74, 80, 97, 99, 100, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 210, 224, 262, 266, 273, 280, 304, 314, 319, 326, 334, 343, 357, 360, 361, 362, 447, 448, 455, 467, 529, 590, 599, 610, 647, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 777, 779, 810, 811, 842, 848, 852, 870, 874, 875, 879, 885, 899, 903, 904, 909, 913, 929, 937, 944, 945, 954, 971, 977, 979, 1050, 1066, 1067, 1073, 1085, 1153, 1245, 1258, 1259, 1262, 1264, 1265, 1272, 1274, 1352, 1357, 1374, 1379], "Its": [247, 357, 527, 852, 1151, 1374], "NO": 977, "NOT": [136, 257, 298, 357, 590, 609, 684, 852, 924, 971, 1402], "No": [21, 260, 273, 357, 842, 897, 909, 971], "Not": [214, 260, 357, 543, 544, 852, 874, 885, 897, 913, 926, 971], "ON": 1402, "OR": [262, 357, 769, 770, 889, 899, 971, 977, 1393], "ORs": [423, 852, 1036, 1374], "On": [759, 852, 901, 971], "One": [58, 224, 260, 277, 314, 319, 357, 371, 639, 771, 783, 799, 805, 808, 817, 819, 822, 823, 832, 852, 879, 897, 971, 977, 1068, 1374], "Or": [245, 246, 261, 289, 303, 327, 336, 357, 360, 505, 660, 694, 791, 792, 794, 795, 839, 840, 848, 852, 892, 893, 898, 919, 928, 947, 971, 1130, 1374], "That": [158, 903, 971], "The": [10, 21, 34, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 85, 89, 90, 97, 100, 101, 103, 132, 133, 135, 136, 137, 139, 140, 147, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 184, 185, 186, 188, 190, 198, 214, 216, 224, 225, 227, 228, 229, 230, 233, 234, 237, 244, 245, 246, 247, 252, 258, 260, 261, 262, 265, 273, 279, 281, 285, 289, 290, 291, 292, 295, 296, 297, 304, 309, 314, 315, 320, 323, 327, 331, 332, 334, 335, 336, 343, 357, 369, 410, 411, 412, 413, 427, 428, 447, 448, 450, 453, 454, 455, 463, 467, 474, 478, 479, 483, 485, 488, 496, 497, 504, 506, 507, 508, 511, 514, 518, 519, 527, 536, 561, 565, 598, 599, 613, 640, 647, 650, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 691, 697, 701, 702, 706, 711, 712, 713, 714, 719, 720, 721, 722, 730, 731, 732, 733, 734, 735, 736, 746, 750, 756, 757, 758, 777, 780, 798, 802, 811, 812, 814, 828, 829, 830, 831, 834, 842, 844, 845, 847, 848, 852, 853, 854, 857, 859, 860, 861, 869, 874, 875, 879, 880, 882, 883, 885, 886, 889, 892, 893, 896, 897, 898, 899, 903, 909, 913, 916, 919, 921, 922, 923, 926, 929, 933, 935, 940, 941, 944, 945, 947, 954, 971, 975, 976, 977, 983, 986, 1023, 1024, 1025, 1026, 1040, 1041, 1054, 1066, 1067, 1068, 1071, 1072, 1073, 1081, 1085, 1096, 1100, 1101, 1105, 1107, 1110, 1118, 1119, 1127, 1129, 1131, 1132, 1135, 1136, 1139, 1143, 1151, 1159, 1187, 1191, 1224, 1243, 1245, 1247, 1251, 1252, 1253, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1281, 1284, 1289, 1293, 1294, 1303, 1304, 1305, 1306, 1311, 1312, 1313, 1314, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1348, 1354, 1356, 1358, 1359, 1366, 1368, 1370, 1374, 1375, 1380, 1381, 1382, 1383, 1388, 1402, 1403, 1405], "Then": 172, "There": 1402, "These": [1, 33, 41, 142, 149, 154, 155, 208, 321, 357, 851, 852], "To": [40, 65, 228, 229, 235, 236, 262, 357, 437, 453, 454, 512, 513, 698, 705, 706, 707, 710, 721, 722, 731, 732, 733, 734, 743, 852, 882, 883, 887, 888, 899, 971, 977, 1055, 1071, 1072, 1137, 1138, 1290, 1297, 1298, 1299, 1302, 1313, 1314, 1335, 1354, 1374, 1402], "Will": [64, 874, 885, 913, 926, 971, 1374], "With": [161, 256, 300, 357, 402, 583, 685, 852, 874, 925, 971, 1015, 1173, 1209, 1277, 1374], "_": [1, 58, 62, 208, 281, 312, 316, 357, 395, 432, 433, 569, 699, 707, 709, 711, 716, 717, 723, 726, 727, 1046, 1047, 1291, 1299, 1303, 1308, 1309, 1315, 1319, 1349, 1374], "__array_ufunc__": 979, "__call__": 848, "__enter__": 1402, "__exit__": 1402, "__getattr__": 848, "__getitem__": 746, "__init__": [1, 32, 33, 34, 35, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 143, 144, 145, 146, 181, 193, 199, 200, 202, 203, 945, 946, 1402], "__name__": [259, 357], "_auto_init_unhandled_kei": 33, "_awai": [680, 852], "_bar_": 801, "_btm_by_a": [428, 852], "_btm_by_b": [428, 852], "_by_ca": [428, 758, 852], "_by_cb": [428, 758, 852], "_check_ord": [926, 971], "_deletion_fil": 172, "_df": [1, 59], "_eager": 590, "_expr": [1, 60], "_foo": 604, "_geventdataframeresult": [65, 875, 971], "_internal_cal": 56, "_is_not_nan": [544, 852], "_is_ufunc": [598, 852], "_isnan": [543, 852], "_isnul": [546, 852], "_kwarg": [874, 913, 971], "_ldf": 1, "_lf": 61, "_lower_boundari": [246, 357, 893, 971], "_mean_squar": [336, 947], "_not_nul": [545, 852], "_o": [432, 433, 716, 717, 1046, 1047, 1308, 1309], "_revers": [624, 628, 657, 852], "_right": [260, 261, 262, 357, 897, 898, 899, 971], "_storage_account": 34, "_storage_options_has_endpoint_url": 33, "_suffix": 629, "_sum": [336, 947], "_to_even": [680, 852], "_top_by_a": [758, 852], "_top_by_b": [758, 852], "_train": [942, 971], "_type": [915, 971], "_type_check": [926, 971], "_upper_boundari": [246, 357, 893, 971], "_world": 801, "a1": [41, 59, 61, 357], "a101": 1405, "a123": [41, 357], "a2": [41, 59, 61, 357], "a_1": [727, 1319, 1349, 1374], "a_2": [1349, 1374], "a_3": [1349, 1374], "a_a": 832, "a_agg_list": [246, 357, 893, 971], "a_b_doubl": 797, "a_btm_by_a": [428, 852], "a_btm_by_b": [428, 852], "a_by_ca": [428, 758, 852], "a_by_cb": [428, 758, 852], "a_div_2": 1396, "a_div_5": 1396, "a_interpol": [534, 852], "a_is_even": [304, 357, 831, 929, 971], "a_isnul": [546, 852], "a_lag_": 780, "a_log2": 1396, "a_mod_2": 1396, "a_not_nul": [545, 852], "a_revers": [624, 628, 657, 852], "a_rol": 780, "a_suffix": 629, "a_times_2": [599, 852], "a_times_b": [598, 852], "a_top_by_a": [758, 852], "a_top_by_b": [758, 852], "a_txt": 832, "aa": [508, 698, 710, 798, 852, 977, 1068, 1290, 1302, 1374, 1397], "aaa": [1, 41, 357, 698, 710, 746, 748, 749, 977, 1290, 1302], "aaaa": [1025, 1026], "aabcdef": 732, "aad": [1025, 1026], "aag": 27, "aazz": 1397, "ab": [248, 264, 308, 331, 357, 722, 746, 748, 749, 852, 940, 971, 977, 1152, 1178, 1345, 1374, 1395, 1397], "ab12": 722, "ab12cd34ef": 722, "abc": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 367, 704, 707, 721, 731, 852, 977, 1296, 1299, 1313, 1314, 1397], "abc123": 1397, "abc456": [721, 1313, 1314, 1397], "abcabc": 722, "abcd": 1397, "abcdeff": 731, "abf": [156, 168, 169], "abl": [107, 154, 590], "about": [53, 54, 55, 107, 147, 149, 154, 691, 698, 706, 707, 710, 721, 722, 852, 1284, 1290, 1298, 1299, 1302, 1313, 1314, 1374, 1405], "abov": [41, 214, 261, 281, 357, 360, 898, 971], "abs_a": 1396, "abs_tol": [536, 852, 1159, 1374], "absolut": [149, 156, 168, 169, 177, 178, 179, 180, 366, 504, 506, 507, 536, 852, 982, 1129, 1131, 1132, 1159, 1374, 1396], "acc": [786, 787, 800, 826], "accent": 977, "accept": [38, 43, 47, 49, 50, 51, 52, 55, 147, 149, 150, 152, 153, 156, 158, 160, 162, 164, 167, 170, 171, 172, 184, 198, 216, 226, 245, 295, 296, 300, 303, 320, 331, 332, 336, 357, 367, 428, 437, 508, 535, 640, 654, 655, 694, 723, 750, 758, 766, 768, 770, 775, 778, 779, 780, 781, 789, 798, 816, 818, 821, 830, 834, 836, 842, 848, 852, 869, 881, 892, 921, 922, 925, 928, 933, 940, 941, 947, 971, 976, 977, 1041, 1055, 1158, 1243, 1252, 1253, 1277, 1315, 1359, 1374], "access": [38, 43, 47, 49, 50, 51, 52, 59, 60, 61, 62, 158, 162, 164, 167, 169, 170, 171, 172, 198, 212, 220, 258, 281, 290, 291, 304, 357, 708, 746, 876, 929, 942, 971, 976, 1300, 1405], "accord": [290, 357, 647, 791, 792, 794, 795, 839, 840, 852, 1087, 1245, 1374], "accordingli": [147, 150, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166], "account": [41, 140, 155, 169, 357, 478, 504, 506, 507, 852, 1100, 1129, 1131, 1132, 1374], "accumul": [786, 787, 800, 826], "acg": 27, "achiev": [265, 281, 343, 357, 433, 599, 717, 852, 1047, 1224, 1309, 1374], "aco": 1395, "acosd": 1395, "across": [41, 58, 155, 157, 225, 247, 260, 268, 270, 275, 297, 307, 357, 450, 527, 613, 768, 770, 786, 787, 789, 816, 818, 821, 836, 852, 880, 897, 923, 971, 1151, 1374], "action": [40, 357], "activ": [7, 8, 19, 20, 22, 23, 24, 25, 29, 30, 562, 707, 1188, 1299], "actual": [41, 136, 184, 188, 292, 357, 1279, 1374, 1397, 1404], "ad": [39, 41, 136, 157, 246, 266, 304, 314, 319, 321, 326, 331, 332, 357, 373, 488, 511, 606, 607, 750, 786, 787, 831, 852, 893, 904, 929, 937, 940, 941, 971, 977, 1110, 1136, 1352, 1357, 1374], "adbc": [39, 154, 155, 357], "adbc_driver_manag": 176, "adbc_ingest": [39, 357], "add": [40, 41, 42, 47, 52, 153, 214, 234, 246, 265, 331, 332, 333, 334, 357, 360, 448, 626, 627, 628, 629, 647, 750, 796, 800, 842, 852, 893, 897, 940, 941, 942, 943, 944, 971, 1135, 1374, 1379], "add_calendar_dai": 796, "add_calendar_month": 796, "add_calendar_year": 796, "add_chart": [41, 357], "add_dai": 796, "add_format": [41, 357], "add_hour": 796, "add_milli": 796, "add_second": 796, "add_seri": [41, 357], "add_week": 796, "add_worksheet": [41, 357], "addit": [30, 37, 39, 40, 41, 136, 151, 156, 157, 168, 169, 182, 184, 186, 188, 198, 229, 233, 245, 263, 266, 279, 295, 296, 303, 316, 323, 331, 332, 336, 357, 367, 464, 508, 511, 640, 694, 698, 706, 707, 710, 721, 722, 746, 750, 775, 778, 779, 780, 781, 798, 830, 831, 834, 848, 852, 886, 892, 904, 921, 922, 928, 935, 940, 941, 947, 971, 977, 1074, 1082, 1136, 1290, 1298, 1299, 1302, 1313, 1314, 1355, 1374, 1384, 1402], "addition": [66, 157, 290, 357, 977], "address": 707, "adjac": [41, 357], "adjust": [504, 506, 507, 691, 852, 1129, 1131, 1132, 1284, 1374], "adl": [156, 168, 169], "adlf": 169, "advanc": [41, 281, 357, 407, 590, 623, 626, 628, 630, 631, 1020, 1216, 1405], "advantag": [41, 208, 280, 357], "advis": [41, 57, 100, 357], "aedt": 793, "aeiuo": [710, 1302], "af1": 58, "af2": 58, "af3": 58, "affect": [39, 177, 178, 179, 180, 357], "afm": 169, "afoo": [942, 971], "after": [41, 136, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 216, 217, 234, 320, 323, 357, 427, 428, 429, 455, 508, 640, 650, 745, 757, 758, 777, 852, 869, 933, 935, 971, 977, 1040, 1041, 1073, 1135, 1247, 1337, 1358, 1359, 1374, 1389], "afterward": [57, 842], "ag": [273, 357, 909, 971, 1403], "again": [599, 852], "against": [39, 109, 152, 154, 237, 285, 304, 357, 562, 710, 831, 889, 916, 929, 971, 1188, 1302, 1383, 1402, 1404, 1405], "agg": [245, 246, 281, 289, 357, 368, 418, 423, 426, 428, 514, 516, 521, 524, 598, 599, 640, 693, 694, 758, 765, 791, 794, 814, 852, 874, 875, 885, 892, 893, 913, 915, 919, 926, 971, 977], "agg_group": [803, 852], "agg_list": [598, 852], "aggreg": [149, 152, 153, 156, 164, 168, 239, 245, 246, 267, 269, 271, 274, 277, 281, 282, 283, 289, 305, 306, 325, 328, 336, 337, 339, 341, 357, 368, 418, 423, 426, 514, 530, 598, 640, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 767, 768, 769, 770, 786, 787, 788, 789, 800, 805, 815, 816, 818, 820, 821, 826, 835, 836, 852, 893, 903, 905, 906, 907, 910, 911, 914, 919, 930, 931, 938, 947, 948, 950, 952, 971, 1031, 1036, 1039, 1154, 1259, 1260, 1261, 1263, 1266, 1267, 1268, 1374, 1390, 1392, 1395, 1401], "aggregate_funct": [281, 357, 977], "aho": [699, 709, 711, 723, 1291, 1301, 1303, 1315], "aiosqlit": 154, "alchemy_conn": 154, "algorithm": [215, 357, 374, 699, 709, 711, 723, 771, 852, 868, 971, 987, 1291, 1301, 1303, 1315, 1374], "alia": [1, 13, 58, 60, 62, 66, 96, 201, 205, 220, 246, 251, 264, 281, 289, 323, 331, 334, 357, 360, 367, 371, 410, 411, 412, 413, 414, 417, 427, 430, 432, 433, 434, 442, 443, 444, 445, 446, 448, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 495, 496, 497, 498, 499, 502, 503, 516, 518, 519, 523, 525, 531, 532, 535, 536, 539, 542, 550, 552, 574, 586, 592, 597, 599, 603, 606, 607, 609, 616, 619, 621, 623, 634, 635, 639, 641, 645, 647, 650, 652, 681, 683, 698, 699, 700, 701, 703, 704, 706, 707, 709, 710, 711, 712, 716, 717, 723, 724, 725, 726, 727, 728, 729, 733, 734, 736, 746, 747, 748, 749, 751, 756, 757, 759, 765, 766, 772, 773, 774, 778, 779, 780, 781, 791, 794, 796, 797, 800, 801, 806, 809, 810, 813, 814, 826, 830, 834, 839, 842, 852, 893, 895, 902, 919, 935, 940, 944, 971, 1023, 1067, 1074, 1075, 1078, 1081, 1082, 1083, 1084, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1107, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1143, 1178, 1245, 1250, 1298, 1299, 1303, 1314, 1319, 1320, 1374], "alias": [304, 357, 606, 607, 929, 971], "alic": [152, 1403], "align": [11, 16, 17, 41, 58, 66, 357, 1403], "align_fram": 66, "align_ful": 66, "align_inn": 66, "align_left": 66, "align_right": 66, "all": [1, 4, 5, 8, 14, 18, 21, 26, 31, 38, 40, 41, 47, 49, 50, 51, 52, 53, 54, 55, 58, 64, 71, 118, 120, 133, 134, 138, 148, 152, 153, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 181, 182, 185, 188, 208, 213, 215, 217, 224, 226, 228, 229, 236, 248, 253, 255, 257, 258, 259, 260, 262, 263, 264, 270, 272, 276, 277, 281, 284, 286, 290, 291, 292, 296, 302, 303, 307, 308, 312, 314, 315, 319, 322, 324, 325, 326, 327, 332, 334, 357, 360, 371, 373, 395, 428, 441, 447, 453, 454, 455, 456, 467, 488, 496, 508, 513, 526, 527, 530, 533, 538, 541, 545, 546, 551, 561, 562, 569, 587, 590, 598, 620, 623, 624, 626, 627, 628, 629, 630, 631, 638, 640, 650, 655, 657, 662, 680, 686, 692, 694, 700, 704, 707, 708, 712, 715, 718, 722, 730, 731, 732, 736, 758, 768, 777, 779, 786, 787, 788, 789, 798, 800, 805, 806, 809, 818, 826, 834, 835, 836, 842, 848, 852, 858, 864, 867, 868, 871, 874, 875, 879, 881, 882, 883, 885, 888, 897, 899, 903, 908, 913, 917, 922, 926, 927, 928, 934, 936, 937, 941, 942, 944, 971, 977, 1008, 1066, 1068, 1071, 1072, 1073, 1074, 1085, 1110, 1118, 1152, 1160, 1172, 1178, 1187, 1188, 1195, 1213, 1216, 1247, 1253, 1259, 1285, 1292, 1296, 1299, 1300, 1303, 1304, 1307, 1314, 1322, 1323, 1324, 1328, 1345, 1354, 1374, 1378, 1379, 1384, 1386, 1391, 1392, 1397, 1401, 1402, 1404, 1405], "all_compat": 1386, "all_data": 1402, "all_horizont": [228, 229, 357, 767, 842, 882, 883, 971], "all_stat": 31, "alloc": [149, 152, 153, 232, 284, 357, 852, 946, 1128, 1374], "allow": [1, 8, 40, 41, 49, 50, 51, 52, 56, 57, 66, 100, 109, 134, 154, 157, 167, 169, 170, 171, 172, 173, 181, 184, 185, 188, 208, 212, 258, 261, 263, 266, 290, 291, 293, 315, 316, 319, 322, 335, 357, 362, 430, 434, 478, 485, 488, 536, 578, 598, 599, 606, 607, 652, 682, 735, 737, 738, 852, 897, 898, 903, 904, 908, 915, 934, 942, 971, 975, 977, 1100, 1107, 1110, 1159, 1204, 1224, 1249, 1271, 1327, 1329, 1330, 1354, 1355, 1374, 1397, 1405], "allow_alias": [606, 607], "allow_chunk": [184, 188], "allow_copi": [134, 212, 315, 357, 1354, 1374], "allow_dupl": [647, 852, 1245, 1374], "allow_exact_match": [261, 357, 898, 971], "allow_infin": [184, 188], "allow_masked_out": [184, 188], "allow_missing_column": [164, 172], "allow_nul": [181, 184, 188, 1405], "allow_object": 812, "allow_parallel": [261, 357, 897, 898, 971], "allow_pyarrow_filt": 173, "allow_time_zon": [184, 185, 188], "allowed_dtyp": [184, 185, 188, 1405], "almost": [65, 265, 343, 357, 536, 735, 737, 738, 852, 875, 971, 975, 1224, 1327, 1329, 1330, 1374], "along": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 198, 357, 971], "alpha": [504, 506, 507, 852, 977, 1129, 1131, 1132, 1374], "alpha_i": [505, 852, 1130, 1374], "alphabet": [977, 1405], "alphanumer": [743, 977, 1335], "alreadi": [39, 40, 108, 314, 357, 562, 614, 763, 852, 926, 971, 1066, 1188, 1363, 1374], "also": [28, 38, 41, 49, 50, 51, 52, 57, 64, 65, 136, 140, 154, 157, 158, 163, 164, 167, 172, 183, 184, 187, 188, 193, 202, 208, 230, 245, 246, 266, 273, 277, 281, 289, 291, 295, 303, 314, 326, 331, 334, 357, 443, 446, 455, 467, 478, 482, 488, 514, 535, 599, 606, 607, 640, 650, 654, 655, 680, 694, 721, 722, 723, 730, 731, 746, 777, 786, 787, 790, 793, 800, 802, 826, 842, 851, 852, 858, 874, 875, 885, 892, 893, 904, 909, 913, 919, 921, 926, 928, 937, 940, 942, 944, 971, 977, 1073, 1085, 1104, 1158, 1247, 1252, 1253, 1269, 1292, 1313, 1314, 1315, 1322, 1374, 1378, 1384, 1386, 1389, 1393, 1397, 1400, 1402, 1403], "alt": [357, 360, 1374, 1379], "altair": [176, 357, 360, 1374, 1379], "altern": [41, 193, 357, 848, 1394], "although": [304, 357, 929, 971], "alwai": [14, 38, 40, 49, 55, 74, 80, 152, 158, 162, 164, 216, 245, 260, 261, 265, 320, 343, 357, 427, 428, 598, 610, 735, 757, 758, 842, 852, 869, 897, 898, 903, 933, 971, 977, 1040, 1041, 1045, 1224, 1327, 1358, 1359, 1374, 1383, 1384, 1402, 1405], "am": [724, 1316], "amarillo": 1397, "amaz": [357, 360, 1374, 1379], "amazonaw": 33, "ambigu": [481, 482, 483, 496, 735, 738, 793, 1103, 1104, 1105, 1118, 1327, 1330], "america": 794, "amount": [53, 57, 75, 100, 162, 167, 170, 171, 599, 796, 852, 1391], "amsterdam": [482, 1104], "an": [1, 31, 34, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 56, 59, 61, 62, 66, 74, 75, 76, 97, 105, 109, 112, 115, 122, 124, 133, 135, 136, 139, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 182, 184, 188, 198, 214, 218, 219, 220, 226, 232, 235, 239, 241, 246, 257, 258, 259, 261, 262, 265, 266, 277, 281, 286, 287, 289, 290, 294, 304, 309, 315, 319, 321, 325, 326, 331, 334, 343, 357, 360, 362, 369, 391, 394, 406, 410, 412, 418, 421, 423, 424, 426, 443, 444, 445, 446, 447, 448, 455, 459, 460, 478, 482, 485, 499, 505, 513, 514, 519, 520, 521, 524, 559, 562, 565, 567, 589, 590, 598, 599, 611, 613, 623, 624, 645, 646, 647, 655, 656, 660, 662, 663, 665, 667, 669, 671, 674, 676, 678, 697, 698, 701, 707, 710, 714, 735, 737, 738, 740, 742, 756, 759, 767, 772, 776, 778, 782, 784, 791, 792, 794, 795, 797, 799, 802, 806, 807, 808, 809, 810, 811, 812, 824, 826, 827, 830, 834, 839, 840, 842, 843, 848, 852, 871, 872, 873, 875, 879, 881, 885, 889, 893, 898, 899, 903, 904, 917, 919, 920, 929, 937, 940, 942, 944, 946, 954, 968, 971, 975, 976, 977, 1004, 1007, 1019, 1023, 1025, 1031, 1034, 1036, 1037, 1039, 1054, 1056, 1062, 1063, 1064, 1065, 1066, 1073, 1077, 1107, 1121, 1128, 1130, 1143, 1173, 1185, 1188, 1191, 1193, 1215, 1224, 1253, 1254, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1272, 1274, 1289, 1290, 1293, 1299, 1302, 1306, 1327, 1329, 1330, 1332, 1334, 1354, 1356, 1374, 1392, 1394, 1397, 1401, 1402, 1404], "ana": [724, 1316], "anan": [724, 1316], "ananab": 1397, "and_": 852, "ang": 1397, "angl": [773, 774], "ani": [4, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 73, 74, 80, 99, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 208, 210, 213, 214, 216, 222, 226, 228, 229, 234, 236, 237, 239, 241, 256, 258, 259, 260, 261, 262, 265, 266, 270, 280, 285, 286, 290, 291, 292, 304, 307, 310, 311, 314, 315, 316, 319, 320, 322, 325, 326, 334, 357, 360, 361, 362, 367, 370, 371, 395, 427, 428, 429, 447, 448, 455, 467, 484, 502, 503, 513, 514, 518, 521, 523, 525, 529, 540, 550, 557, 562, 569, 579, 580, 581, 582, 597, 598, 599, 606, 616, 619, 621, 623, 624, 626, 628, 630, 631, 634, 635, 639, 644, 647, 654, 655, 656, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 683, 687, 697, 699, 713, 731, 732, 733, 734, 735, 737, 738, 740, 742, 751, 757, 758, 759, 766, 767, 768, 770, 777, 779, 781, 782, 783, 810, 811, 812, 814, 818, 836, 842, 852, 869, 874, 875, 881, 882, 883, 885, 888, 889, 897, 898, 899, 904, 912, 913, 916, 917, 929, 933, 934, 937, 944, 945, 946, 971, 975, 977, 979, 981, 984, 1008, 1040, 1041, 1050, 1066, 1067, 1073, 1085, 1106, 1125, 1126, 1135, 1138, 1144, 1146, 1148, 1153, 1164, 1173, 1176, 1183, 1188, 1195, 1205, 1206, 1207, 1208, 1223, 1224, 1235, 1236, 1245, 1252, 1253, 1254, 1258, 1259, 1262, 1264, 1265, 1272, 1273, 1289, 1291, 1305, 1327, 1329, 1330, 1332, 1334, 1352, 1353, 1354, 1355, 1357, 1358, 1359, 1374, 1379, 1402, 1405], "anna": [273, 357, 909, 971], "annex": [718, 1310], "announc": [915, 971], "anoth": [102, 183, 217, 225, 231, 245, 261, 297, 357, 450, 457, 534, 565, 603, 609, 613, 654, 664, 666, 668, 670, 672, 675, 677, 679, 710, 852, 871, 880, 892, 898, 923, 942, 971, 1066, 1075, 1127, 1135, 1157, 1191, 1252, 1253, 1302, 1374, 1396, 1397], "anti": [260, 357, 897, 954, 971, 1272, 1274, 1374, 1390], "antipattern": [152, 158, 162, 164], "any_horizont": [769, 842], "anyth": [40, 290, 357], "anywher": [414, 417, 735, 737, 738, 1327, 1329, 1330], "ap": 1397, "apach": [36, 43, 44, 47, 134, 150, 154, 155, 158, 160, 169, 211, 357, 980], "apaya": [736, 1328], "api": [0, 33, 38, 43, 47, 49, 50, 51, 52, 134, 162, 164, 167, 170, 171, 172, 173, 193, 198, 212, 265, 343, 357, 599, 814, 852, 954, 971, 1224, 1374, 1401], "apia": [456, 1074], "app": [434, 729, 1048, 1321], "appear": [41, 70, 136, 179, 180, 357, 722, 761, 852, 977, 1361, 1374, 1403], "append": [39, 40, 42, 184, 234, 260, 261, 262, 357, 651, 842, 852, 897, 898, 899, 971, 1135, 1374], "appl": [221, 250, 260, 286, 287, 310, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 357, 428, 430, 434, 657, 703, 729, 758, 852, 897, 917, 949, 950, 952, 953, 955, 956, 957, 958, 959, 960, 961, 971, 1043, 1048, 1295, 1321, 1390, 1397], "appli": [11, 21, 38, 41, 49, 64, 66, 132, 147, 154, 167, 181, 184, 188, 208, 224, 239, 262, 265, 280, 303, 304, 314, 343, 357, 383, 458, 461, 462, 463, 466, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 484, 486, 497, 498, 500, 506, 507, 598, 599, 644, 663, 664, 665, 666, 669, 670, 676, 677, 694, 721, 722, 735, 737, 738, 742, 775, 786, 787, 800, 813, 814, 826, 831, 842, 852, 879, 899, 903, 912, 928, 929, 954, 971, 977, 1055, 1076, 1079, 1080, 1081, 1084, 1086, 1087, 1091, 1092, 1093, 1095, 1096, 1099, 1101, 1102, 1106, 1108, 1119, 1120, 1122, 1131, 1132, 1224, 1260, 1261, 1263, 1267, 1313, 1314, 1327, 1329, 1330, 1334, 1374, 1383], "applic": [55, 315, 357, 599, 852], "apply_on_context_ent": 208, "appropri": [41, 173, 237, 285, 315, 357, 488, 650, 852, 889, 916, 971, 1110, 1247, 1374], "approx": [374, 852], "approx_n_uniqu": [357, 852, 971, 1374], "approxim": [47, 215, 357, 374, 505, 771, 852, 868, 971, 987, 1130, 1374, 1396, 1405], "april": [485, 1107, 1397, 1398], "ar": [1, 11, 12, 18, 21, 31, 33, 35, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 64, 65, 66, 97, 98, 100, 107, 113, 129, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 182, 184, 185, 186, 188, 198, 208, 212, 216, 217, 222, 224, 228, 229, 232, 237, 238, 239, 244, 245, 246, 258, 260, 261, 262, 263, 265, 272, 273, 279, 281, 285, 289, 290, 291, 292, 295, 296, 300, 303, 310, 312, 314, 315, 316, 319, 320, 324, 326, 327, 331, 332, 335, 336, 357, 370, 372, 386, 402, 407, 427, 428, 429, 437, 443, 445, 446, 455, 483, 488, 496, 501, 503, 504, 505, 506, 507, 514, 529, 535, 536, 538, 540, 541, 543, 544, 545, 546, 548, 553, 554, 583, 587, 590, 598, 635, 640, 646, 647, 650, 653, 654, 655, 656, 660, 661, 664, 666, 668, 670, 672, 673, 675, 677, 679, 683, 685, 688, 691, 693, 694, 699, 708, 712, 714, 715, 719, 720, 721, 722, 723, 725, 736, 738, 740, 745, 750, 752, 756, 757, 758, 767, 768, 769, 770, 775, 778, 779, 780, 781, 782, 789, 791, 792, 794, 795, 810, 811, 816, 818, 821, 830, 834, 835, 836, 839, 840, 842, 844, 845, 847, 851, 852, 853, 854, 857, 858, 859, 860, 861, 864, 867, 869, 874, 875, 879, 882, 883, 889, 892, 893, 897, 898, 899, 903, 908, 909, 913, 915, 916, 917, 919, 921, 922, 925, 926, 928, 933, 936, 937, 940, 941, 942, 947, 971, 975, 977, 984, 985, 999, 1000, 1015, 1018, 1020, 1040, 1041, 1049, 1055, 1064, 1065, 1073, 1105, 1110, 1118, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1139, 1141, 1153, 1158, 1159, 1162, 1164, 1165, 1167, 1168, 1169, 1170, 1174, 1179, 1180, 1209, 1213, 1216, 1236, 1244, 1245, 1247, 1251, 1252, 1253, 1254, 1258, 1265, 1273, 1277, 1281, 1284, 1291, 1300, 1304, 1306, 1311, 1312, 1313, 1314, 1317, 1328, 1330, 1332, 1337, 1344, 1349, 1352, 1354, 1355, 1356, 1358, 1359, 1366, 1368, 1370, 1374, 1375, 1378, 1380, 1381, 1382, 1384, 1386, 1389, 1394, 1402, 1405], "arbitrari": [53, 87, 241, 357, 450, 852, 880, 971, 977], "arbitrarili": [265, 357], "arcco": [852, 1374], "arccosh": [852, 1374], "arcsin": [852, 1374], "arcsinh": [852, 1374], "arctan": [773, 774, 852, 1374], "arctan2": 774, "arctanh": [852, 1374], "aren": [38, 49, 357, 971], "arg": [32, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 149, 201, 205, 237, 280, 285, 357, 383, 644, 775, 801, 852, 889, 912, 916, 971, 1224, 1374, 1387], "arg_max": [852, 1374], "arg_min": [852, 1374], "arg_sort": [852, 1374], "arg_tru": [776, 852, 1374], "arg_uniqu": [852, 1374], "arg_wher": [384, 852], "argmax": [598, 852], "argument": [37, 40, 47, 97, 147, 149, 151, 152, 156, 164, 167, 168, 184, 186, 188, 198, 222, 226, 233, 245, 246, 261, 279, 280, 289, 295, 296, 303, 316, 323, 327, 331, 332, 336, 357, 455, 483, 496, 508, 514, 535, 598, 640, 644, 660, 694, 730, 731, 732, 739, 750, 767, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 798, 830, 834, 842, 848, 852, 881, 886, 892, 893, 898, 912, 919, 921, 922, 928, 935, 940, 941, 947, 968, 971, 977, 1073, 1105, 1118, 1158, 1322, 1323, 1324, 1331, 1355, 1374, 1396, 1397], "aris": 154, "arithmet": [239, 357], "arm": 176, "arm64": 176, "around": [38, 49, 357, 971], "arr": [315, 357, 844, 1354, 1366, 1374, 1397], "arr_bar": 1392, "arr_foo": 1392, "arrai": [133, 137, 152, 153, 156, 164, 168, 210, 214, 232, 233, 309, 314, 315, 316, 357, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 415, 443, 444, 445, 446, 557, 572, 573, 574, 575, 577, 586, 587, 589, 592, 594, 598, 656, 663, 665, 667, 669, 671, 674, 676, 678, 684, 756, 779, 797, 811, 831, 852, 886, 971, 976, 977, 979, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1028, 1062, 1063, 1064, 1065, 1070, 1128, 1183, 1198, 1199, 1200, 1201, 1203, 1211, 1212, 1213, 1215, 1218, 1220, 1221, 1254, 1260, 1261, 1263, 1266, 1267, 1268, 1275, 1279, 1348, 1352, 1354, 1355, 1356, 1374, 1395, 1397, 1401, 1404], "array_agg": 1395, "array_contain": 1395, "array_get": 1395, "array_length": 1395, "array_low": 1395, "array_mean": 1395, "array_revers": 1395, "array_sum": 1395, "array_to_str": 1395, "array_uniqu": 1395, "array_upp": 1395, "arraylik": [1070, 1374], "arrow": [43, 44, 50, 133, 134, 154, 155, 158, 160, 170, 211, 258, 291, 292, 309, 311, 315, 357, 971, 980, 1348, 1354, 1374], "arrowarrayexport": [133, 134], "arrowinvaliderror": [40, 357], "arrowstreamexport": [133, 134], "as_": [1374, 1379], "as_arrai": 811, "as_dict": [153, 279, 357], "as_expr": 977, "as_seri": [217, 310, 357, 871, 971, 977], "asarrai": [210, 979], "ascend": [246, 273, 289, 357, 640, 660, 852, 893, 909, 919, 971], "ascii": [7, 21, 432, 433, 699, 709, 711, 712, 716, 717, 723, 725, 736, 745, 977, 1046, 1047, 1291, 1301, 1303, 1304, 1308, 1309, 1315, 1317, 1328, 1337], "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_case_insensit": [699, 709, 711, 723, 1291, 1301, 1303, 1315], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_horizontal_onli": 21, "ascii_lett": 1405, "ascii_markdown": 21, "ascii_no_bord": 21, "ascii_onli": 977, "ascii_t": 208, "ascii_uppercas": [325, 357], "asd": [700, 707, 1292, 1299], "asia": [140, 977, 1079, 1080, 1108], "asid": 488, "asin": 1395, "asind": 1395, "asof": [261, 357, 898, 971], "asofjoinstrategi": [261, 357, 898, 971], "assert": [177, 178, 179, 180, 184, 188, 289, 357, 864, 977], "assert_frame_equ": [178, 179, 231, 357, 1405], "assert_frame_not_equ": [177, 180], "assert_series_equ": [177, 180, 1127, 1374, 1405], "assert_series_not_equ": [178, 179], "assert_someth": 182, "assertionerror": [177, 178, 179, 180], "assign": [182, 214, 246, 342, 357, 407, 590, 640, 650, 727, 728, 852, 893, 953, 971, 1020, 1216, 1247, 1319, 1320, 1374], "associ": [39, 41, 58, 155, 157, 183, 186, 292, 357, 976, 1385, 1387, 1391], "assum": [33, 292, 357, 903, 954, 971, 1397], "assume_rol": 33, "assumpt": [598, 852], "async": [64, 65, 154, 875, 971], "async_engin": 154, "asynchron": [65, 154, 875, 971], "asyncio": [65, 154, 875, 971], "asyncresult": [65, 875, 971], "asyncsurrealdb": 154, "ata": 27, "atan": 1395, "atan2": [773, 774, 1395], "atan2_ab": 1399, "atan2d": [774, 1395], "atan2d_ab": 1399, "atand": 1395, "atg": 27, "atgataaaggag": 27, "atol": [177, 178, 179, 180], "attain": [694, 852], "attempt": [1, 10, 49, 50, 51, 52, 64, 65, 214, 450, 852, 874, 875, 880, 885, 913, 926, 971], "attr": [357, 360, 1374, 1379], "attribut": [67, 70, 73, 74, 75, 76, 77, 85, 89, 143, 144, 145, 146, 181, 199, 200, 202, 203, 357, 360, 844, 845, 847, 848, 853, 854, 857, 859, 860, 861, 945, 946, 971, 1366, 1368, 1370, 1374, 1375, 1379, 1380, 1381, 1382], "attributeerror": 1, "audi": [310, 357, 657, 852], "august": 488, "australia": 793, "auth": 35, "authent": [40, 156, 164, 166, 167, 168, 169, 170, 172, 193, 357], "author": 1, "auto": [10, 38, 40, 43, 47, 49, 50, 51, 52, 64, 65, 66, 133, 135, 136, 137, 139, 156, 161, 162, 164, 167, 168, 170, 171, 172, 193, 198, 321, 357, 874, 875, 885, 913, 926, 971, 1405], "autofilt": [41, 357], "autofit": [41, 357], "autogener": [152, 153, 157, 163, 167], "automat": [8, 38, 49, 66, 133, 135, 136, 137, 139, 140, 149, 152, 153, 154, 155, 161, 162, 164, 167, 169, 170, 171, 184, 188, 190, 193, 304, 357, 598, 655, 730, 731, 732, 831, 852, 929, 971, 1252, 1253, 1322, 1323, 1324, 1357, 1374, 1384, 1386, 1389, 1402], "autumn": [721, 722], "avail": [41, 47, 52, 142, 154, 155, 156, 165, 168, 169, 182, 195, 196, 197, 208, 266, 281, 304, 356, 357, 362, 488, 650, 831, 844, 845, 847, 851, 852, 853, 854, 857, 858, 859, 860, 861, 864, 904, 929, 969, 970, 971, 977, 1068, 1247, 1366, 1368, 1370, 1374, 1375, 1378, 1380, 1381, 1382, 1393], "available_timezon": [73, 977], "averag": [41, 357, 504, 505, 506, 507, 650, 852, 1129, 1130, 1131, 1132, 1247, 1374, 1391], "avg": 1395, "avocado": 1397, "avoid": [184, 188, 237, 285, 291, 357, 369, 852, 889, 916, 971], "avro": [36, 150, 201, 357, 864], "avrocompress": [36, 357], "aw": [33, 38, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 198, 357, 971], "awai": [680, 852, 1396], "await": [65, 154, 875, 965, 971], "await_result": [915, 971], "awar": [11, 154, 258, 291, 292, 311, 357, 505, 699, 709, 711, 723, 738, 852, 971, 1130, 1291, 1301, 1303, 1315, 1330, 1374], "aws_access_key_id": [40, 156, 168, 172, 357], "aws_region": [40, 168, 172, 357], "aws_secret_access_kei": [40, 156, 168, 172, 357], "awsassumerolekwarg": 33, "axi": [272, 324, 357, 360, 773, 774, 908, 936, 971, 1374, 1379], "aya": [725, 1317, 1328], "az": [156, 168, 169], "azur": [34, 38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 169, 170, 171, 172, 198, 357, 971], "azure_storage_account_kei": [156, 168, 169], "azure_storage_account_nam": [156, 168, 169], "b": [1, 11, 36, 38, 40, 43, 44, 47, 53, 61, 66, 89, 97, 104, 107, 133, 134, 135, 136, 137, 138, 139, 140, 143, 148, 152, 154, 157, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 253, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 269, 271, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 300, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 367, 369, 370, 372, 373, 383, 385, 390, 395, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 428, 429, 441, 448, 452, 485, 488, 508, 510, 512, 513, 514, 516, 526, 527, 530, 533, 534, 535, 536, 538, 541, 543, 544, 545, 546, 551, 557, 562, 569, 579, 580, 581, 582, 598, 599, 604, 620, 623, 624, 625, 626, 627, 628, 629, 637, 638, 640, 644, 647, 650, 654, 655, 657, 659, 686, 692, 694, 701, 705, 710, 714, 721, 722, 746, 747, 758, 761, 765, 767, 768, 769, 770, 771, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 797, 798, 799, 800, 801, 804, 805, 806, 808, 809, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 828, 829, 831, 833, 834, 835, 836, 837, 841, 848, 852, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 916, 917, 918, 920, 921, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 971, 977, 983, 986, 1008, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1050, 1067, 1070, 1107, 1110, 1124, 1127, 1128, 1135, 1138, 1158, 1159, 1164, 1183, 1205, 1206, 1207, 1208, 1245, 1250, 1293, 1297, 1302, 1306, 1313, 1314, 1338, 1340, 1341, 1343, 1355, 1361, 1374, 1384, 1386, 1387, 1389, 1390, 1391, 1392, 1397, 1398, 1399, 1402], "b1": [59, 61], "b2": [59, 61], "b345": [41, 357], "b4": [41, 357], "b_b": [304, 357], "b_btm_by_a": [428, 852], "b_btm_by_b": [428, 852], "b_by_ca": [428, 758, 852], "b_by_cb": [428, 758, 852], "b_div_a": [251, 357], "b_is_not_nan": [544, 852], "b_isnan": [543, 852], "b_isnul": [546, 852], "b_not_nul": [545, 852], "b_revers": [624, 628, 657, 852], "b_suffix": 629, "b_sum": [336, 947], "b_top_by_a": [758, 852], "b_top_by_b": [758, 852], "ba": [450, 508, 613, 729, 798, 852, 977], "back": [4, 58, 172, 234, 246, 297, 315, 316, 357, 613, 640, 722, 852, 874, 885, 893, 913, 923, 926, 946, 971, 1135, 1355, 1374], "backend": [40, 154, 155, 156, 168, 169, 357, 360, 1374, 1379], "background": [64, 65, 357, 361, 874, 875, 970, 971], "backward": [47, 52, 236, 261, 357, 410, 455, 476, 513, 852, 888, 898, 971, 1023, 1073, 1098, 1138, 1374], "backward_fil": [513, 519, 852, 1138, 1143, 1374], "bad": [721, 722, 1313, 1314], "balanc": [187, 189, 1405], "ballon_dor": [706, 708, 1298, 1300], "banana": [221, 310, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 428, 657, 703, 729, 758, 852, 950, 952, 955, 956, 957, 958, 959, 960, 961, 1397], "banded_column": [41, 357], "banded_row": [41, 357], "banker": [680, 852, 1269, 1374], "bar": [36, 38, 40, 43, 44, 45, 46, 47, 148, 161, 162, 217, 220, 221, 222, 226, 227, 228, 229, 230, 231, 234, 237, 239, 241, 242, 243, 248, 250, 251, 252, 254, 260, 264, 265, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 285, 286, 287, 290, 293, 294, 295, 297, 302, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 322, 323, 328, 329, 330, 335, 357, 360, 431, 450, 532, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 691, 700, 702, 705, 707, 708, 724, 726, 728, 733, 734, 771, 782, 783, 784, 799, 804, 805, 808, 809, 815, 817, 819, 820, 822, 823, 830, 833, 837, 841, 842, 848, 852, 871, 876, 877, 881, 882, 883, 884, 889, 895, 896, 897, 911, 916, 917, 920, 921, 934, 935, 939, 971, 976, 977, 1044, 1195, 1284, 1292, 1294, 1297, 1299, 1300, 1316, 1320, 1325, 1326, 1374, 1388, 1390, 1391, 1392, 1394, 1397, 1400], "bar2": 1397, "bar22": [239, 357], "bar_": 726, "bar_3": [312, 357], "bar_4": [312, 357], "bar_a": [281, 357], "bar_at_2": 1392, "bar_avg": 1391, "bar_b": [281, 357], "bar_color": [41, 357], "bar_max": 1391, "bar_median": 1391, "bar_min": 1391, "bar_negative_border_color_sam": [41, 357], "bar_negative_color_sam": [41, 357], "bar_std": 1391, "bar_sum": 1391, "bar_var": 1391, "bare": [606, 607, 977], "base": [32, 41, 53, 54, 55, 71, 118, 120, 157, 186, 214, 229, 237, 246, 262, 285, 289, 357, 456, 464, 501, 504, 505, 506, 507, 514, 529, 534, 593, 594, 598, 599, 645, 647, 655, 660, 664, 666, 668, 670, 672, 675, 677, 679, 740, 786, 787, 800, 826, 852, 889, 893, 899, 916, 919, 971, 977, 1074, 1082, 1124, 1129, 1130, 1131, 1132, 1153, 1157, 1219, 1220, 1224, 1243, 1245, 1252, 1253, 1332, 1365, 1374, 1390, 1396, 1405], "base64": [412, 413, 701, 702, 1025, 1026, 1293, 1294], "base_nam": [321, 357], "base_path": [53, 54, 55], "base_utc_offset": [464, 1082], "baseexcept": 1402, "basepartitioncontext": 54, "basi": [41, 157, 184, 357], "basic": [41, 210, 357, 605, 979, 1405], "basic_chart": [41, 357], "batch": [44, 97, 142, 147, 153, 154, 160, 162, 171, 173, 291, 319, 357, 874, 903, 971], "batch_siz": [38, 49, 147, 152, 153, 154, 162, 171, 173, 319, 357, 971], "batchedcsvread": 153, "baz": [241, 251, 252, 323, 357, 708, 726, 728, 799, 808, 823, 848, 896, 935, 971, 976, 977, 1300, 1320, 1388, 1394, 1397], "bb": [977, 1068, 1374, 1397, 1402], "bbb": [1, 41, 357, 746, 748, 749, 977], "bc": [710, 722, 835, 1302], "bcbc45": 1397, "bea": 13, "bear": 977, "bearer": 193, "bearer_token": 193, "beauti": 13, "becaus": [162, 171, 232, 246, 263, 265, 325, 343, 357, 518, 562, 590, 852, 893, 954, 971, 1128, 1188, 1224, 1374], "becom": [186, 356, 969, 970], "bed3": [41, 357], "been": [5, 31, 41, 191, 212, 338, 357, 520, 617, 650, 852, 949, 1247, 1374], "beetl": [310, 357, 657, 852], "befor": [41, 49, 50, 51, 52, 53, 72, 73, 147, 149, 152, 154, 157, 167, 173, 177, 178, 179, 180, 190, 208, 234, 246, 261, 304, 314, 319, 323, 357, 421, 422, 424, 425, 445, 446, 447, 640, 641, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 705, 745, 752, 780, 828, 829, 852, 893, 895, 898, 935, 971, 1034, 1035, 1037, 1038, 1064, 1065, 1066, 1135, 1240, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1297, 1337, 1344, 1374, 1390], "beforehand": [735, 737, 738, 1327, 1329, 1330], "begin": [13, 41, 252, 357, 504, 506, 507, 533, 534, 706, 736, 852, 896, 971, 1129, 1131, 1132, 1156, 1157, 1298, 1328, 1374], "behav": [237, 285, 357, 514, 599, 731, 732, 842, 852, 889, 916, 971], "behavior": [47, 52, 56, 152, 164, 172, 214, 228, 229, 237, 260, 261, 357, 394, 520, 536, 565, 567, 705, 799, 808, 852, 882, 883, 897, 898, 968, 971, 1007, 1159, 1191, 1193, 1297, 1374], "behaviour": [11, 58, 228, 229, 237, 285, 304, 357, 698, 706, 707, 710, 721, 722, 759, 831, 852, 882, 883, 889, 916, 929, 971, 1290, 1298, 1299, 1302, 1313, 1314], "behind": 190, "being": [14, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 132, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 157, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 217, 233, 262, 266, 304, 312, 314, 319, 326, 357, 360, 361, 362, 447, 448, 455, 467, 529, 599, 647, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 705, 777, 779, 797, 810, 811, 842, 852, 871, 874, 875, 885, 886, 899, 904, 913, 929, 937, 945, 971, 977, 1050, 1066, 1067, 1073, 1085, 1153, 1159, 1245, 1258, 1259, 1262, 1264, 1265, 1297, 1349, 1352, 1357, 1374, 1379, 1405], "belong": [1, 246, 357, 893, 971], "below": [20, 40, 156, 157, 168, 169, 229, 237, 281, 285, 357, 488, 513, 712, 721, 722, 736, 791, 792, 794, 795, 839, 840, 842, 848, 852, 889, 916, 971, 1110, 1304, 1313, 1314, 1328], "best": [169, 265, 343, 357, 599, 852, 1224, 1374], "better": [265, 314, 315, 343, 357, 433, 599, 717, 852, 870, 954, 971, 1047, 1272, 1274, 1309, 1374], "between": [25, 66, 103, 181, 182, 184, 188, 213, 222, 260, 273, 283, 291, 349, 357, 395, 429, 451, 452, 488, 535, 536, 560, 569, 579, 580, 581, 582, 641, 647, 648, 671, 672, 697, 713, 773, 774, 777, 782, 784, 811, 825, 828, 829, 852, 897, 909, 914, 960, 971, 1008, 1042, 1069, 1070, 1110, 1158, 1159, 1186, 1195, 1205, 1206, 1207, 1208, 1240, 1245, 1246, 1264, 1289, 1305, 1374, 1391, 1399], "between_ab": [535, 852], "beyond": [53, 743, 1335], "bia": [506, 507, 548, 661, 673, 691, 852, 1131, 1132, 1174, 1258, 1265, 1284, 1374], "bias": [548, 691, 852, 1174, 1284, 1374], "big": [153, 415, 1028], "big_fil": 153, "bigidx": 141, "bigqueri": 155, "bigquery_format": 201, "bin": [448, 529, 647, 740, 766, 845, 852, 1067, 1153, 1245, 1332, 1368, 1374, 1379], "bin2int": 415, "bin_count": [529, 852, 1153, 1374], "bin_i": [766, 852], "bin_x": [766, 852], "bin_xor_xi": [766, 852], "binari": [41, 43, 148, 154, 225, 297, 357, 411, 412, 413, 414, 415, 416, 417, 450, 613, 701, 852, 880, 923, 971, 977, 1024, 1025, 1027, 1028, 1029, 1030, 1293, 1393], "binary_str": [766, 852], "bind": 157, "birthdai": 152, "bit": [72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 419, 420, 421, 422, 424, 425, 652, 698, 852, 1032, 1034, 1035, 1037, 1038, 1249, 1290, 1374, 1393, 1397], "bit_and": 1395, "bit_count": 1395, "bit_length": 1395, "bit_or": 1395, "bit_xor": 1395, "bitmap": [232, 357, 1128, 1374], "bitwis": [371, 418, 423, 426, 639, 766, 767, 768, 769, 770, 852, 1031, 1036, 1039, 1374, 1395, 1401], "bitwise_and": [852, 1374], "bitwise_count_on": [852, 1374], "bitwise_count_zero": [852, 1374], "bitwise_leading_on": [852, 1374], "bitwise_leading_zero": [852, 1374], "bitwise_or": [852, 1374], "bitwise_trailing_on": [852, 1374], "bitwise_trailing_zero": [852, 1374], "bitwise_xor": [852, 1374], "bla": [700, 707, 1292, 1299], "black": [265, 357, 411, 412, 413, 414, 417], "blindli": [562, 1188], "block": [21, 65, 245, 322, 357, 875, 892, 917, 934, 943, 944, 954, 971, 1272, 1274, 1374], "blue": [57, 98, 100, 411, 412, 413, 414, 417, 763, 852, 1363, 1374], "bob": [152, 273, 357, 909, 971, 1403], "bodi": [41, 357, 361], "bold": [41, 357], "bom": [38, 49, 357, 971], "bool": [5, 7, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 38, 40, 41, 47, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 66, 97, 98, 133, 134, 135, 136, 138, 139, 140, 143, 147, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 210, 212, 216, 217, 218, 219, 224, 226, 231, 236, 237, 238, 239, 243, 244, 245, 246, 250, 253, 254, 255, 258, 260, 261, 270, 279, 281, 285, 286, 290, 291, 292, 293, 298, 301, 303, 304, 307, 310, 312, 315, 316, 320, 321, 322, 323, 326, 327, 329, 331, 339, 341, 344, 347, 357, 369, 370, 371, 372, 373, 383, 386, 387, 390, 394, 395, 403, 408, 411, 412, 414, 417, 428, 429, 430, 434, 442, 443, 444, 445, 446, 448, 455, 467, 468, 484, 501, 502, 503, 504, 506, 507, 523, 525, 526, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 558, 562, 565, 567, 569, 578, 585, 590, 591, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 614, 615, 634, 635, 637, 639, 640, 642, 643, 647, 650, 652, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 682, 683, 684, 686, 691, 693, 694, 697, 698, 699, 700, 701, 703, 709, 710, 711, 713, 721, 722, 723, 726, 727, 729, 735, 737, 738, 740, 742, 746, 748, 749, 758, 760, 763, 766, 767, 768, 769, 770, 772, 775, 776, 777, 778, 781, 782, 784, 785, 786, 787, 791, 792, 794, 795, 800, 806, 807, 810, 811, 812, 814, 818, 823, 824, 826, 827, 830, 831, 834, 836, 839, 840, 842, 843, 852, 869, 871, 872, 874, 875, 879, 881, 885, 888, 889, 892, 893, 897, 898, 903, 908, 913, 916, 917, 924, 926, 928, 929, 933, 934, 935, 936, 937, 940, 945, 946, 950, 952, 955, 958, 971, 976, 977, 979, 984, 985, 996, 999, 1000, 1003, 1007, 1008, 1016, 1021, 1024, 1025, 1027, 1030, 1041, 1042, 1043, 1045, 1048, 1050, 1054, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1085, 1086, 1106, 1124, 1126, 1127, 1129, 1131, 1132, 1139, 1141, 1149, 1150, 1153, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1179, 1180, 1184, 1188, 1191, 1193, 1195, 1204, 1211, 1217, 1224, 1236, 1238, 1241, 1242, 1245, 1247, 1248, 1249, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1273, 1274, 1275, 1279, 1284, 1286, 1289, 1290, 1291, 1292, 1293, 1295, 1301, 1302, 1303, 1305, 1313, 1314, 1315, 1318, 1319, 1321, 1327, 1329, 1330, 1332, 1334, 1349, 1354, 1355, 1359, 1360, 1363, 1374, 1383, 1384, 1386, 1392, 1397, 1402], "boolean": [58, 97, 184, 216, 237, 239, 285, 303, 320, 357, 370, 371, 372, 386, 387, 390, 411, 414, 417, 428, 467, 468, 514, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 553, 554, 558, 637, 639, 642, 643, 683, 694, 714, 758, 765, 766, 775, 776, 834, 842, 852, 869, 889, 916, 928, 933, 971, 977, 984, 985, 997, 999, 1000, 1003, 1024, 1041, 1085, 1086, 1139, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1179, 1180, 1184, 1238, 1241, 1242, 1273, 1274, 1290, 1359, 1365, 1374, 1394], "border": 21, "both": [11, 26, 38, 49, 57, 98, 100, 154, 157, 172, 220, 246, 260, 261, 262, 273, 289, 290, 316, 326, 357, 373, 437, 448, 488, 508, 535, 647, 660, 664, 666, 668, 670, 672, 675, 677, 679, 725, 791, 792, 794, 795, 810, 811, 839, 840, 842, 848, 852, 863, 893, 897, 898, 899, 909, 919, 926, 937, 971, 977, 1055, 1110, 1158, 1317, 1355, 1374, 1402, 1403], "boto3": 33, "bottom": [216, 357, 428, 852, 869, 971], "bottom_k": [320, 357, 428, 757, 758, 852, 933, 971, 1041, 1358, 1359, 1374], "bottom_k_bi": [427, 757, 758, 852, 1040, 1358, 1359, 1374], "bound": [114, 152, 153, 232, 246, 357, 394, 437, 535, 565, 567, 590, 596, 762, 772, 791, 792, 794, 795, 810, 811, 839, 840, 852, 893, 971, 1007, 1055, 1128, 1158, 1191, 1193, 1222, 1362, 1374, 1392], "boundari": [246, 357, 437, 743, 852, 893, 971, 1055, 1335, 1374], "box": [21, 265, 357], "box_draw": 21, "branch": [64, 842, 874, 885, 913, 926, 971], "break": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 260, 262, 266, 304, 314, 319, 326, 357, 360, 361, 362, 447, 448, 455, 467, 529, 599, 647, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 777, 779, 810, 811, 852, 874, 875, 885, 897, 899, 904, 913, 929, 937, 945, 971, 977, 1050, 1066, 1067, 1073, 1085, 1153, 1245, 1258, 1259, 1262, 1264, 1265, 1352, 1357, 1374, 1379], "breakpoint": [448, 529, 647, 852, 1067, 1153, 1245, 1374], "breezah": 167, "breviti": 208, "broadcast": [723, 779, 977, 1315], "broader": 977, "brotli": [47, 52, 357, 971], "brussel": [482, 1104], "bst": [460, 464, 482, 1078, 1082, 1104], "bucket": [40, 156, 168, 169, 172, 357, 483, 496, 529, 852, 1105, 1118, 1153, 1374], "bud": [721, 722, 1313, 1314], "budget": 1383, "buffer": [53, 152, 153, 154, 232, 258, 357, 415, 1028, 1128, 1374], "buffer_s": [258, 357], "bug": [97, 147, 598, 599, 852, 903, 954, 971, 1224, 1374], "build": [63, 134, 977, 1405], "built": 103, "builtin": [150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 225, 357, 450, 852, 880, 971], "bundl": 208, "busi": [455, 467, 777, 1073, 1085], "by_alternate_row": 1, "by_dtyp": 977, "by_first_letter_of_column_nam": 59, "by_first_letter_of_column_valu": 59, "by_index": 977, "by_left": [261, 357, 898, 971], "by_nam": 977, "by_pred": [290, 357], "by_right": [261, 357, 898, 971], "bye": 1, "byi": 1397, "bys": [246, 357, 893, 971], "byte": [36, 38, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 148, 150, 151, 152, 153, 158, 159, 160, 161, 162, 165, 166, 167, 170, 171, 225, 232, 297, 357, 415, 432, 433, 450, 613, 710, 711, 712, 716, 717, 725, 736, 852, 880, 923, 971, 1028, 1046, 1047, 1128, 1302, 1303, 1304, 1308, 1309, 1317, 1328, 1374, 1397], "bytesio": [41, 43, 44, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 225, 297, 357, 450, 613, 852, 880, 923, 971], "c": [1, 11, 36, 38, 40, 43, 44, 47, 53, 59, 61, 66, 107, 134, 136, 138, 140, 143, 149, 157, 167, 212, 213, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 231, 233, 237, 239, 242, 243, 244, 245, 246, 248, 250, 251, 259, 260, 263, 264, 266, 267, 269, 271, 274, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 290, 293, 294, 295, 302, 303, 304, 305, 306, 308, 309, 312, 313, 314, 315, 316, 317, 320, 324, 325, 326, 328, 329, 331, 336, 339, 340, 341, 344, 345, 347, 350, 351, 357, 361, 367, 369, 370, 372, 390, 428, 448, 488, 526, 535, 557, 569, 599, 606, 623, 624, 638, 640, 644, 647, 686, 727, 735, 758, 761, 768, 770, 771, 773, 774, 775, 778, 779, 781, 782, 783, 784, 786, 787, 789, 799, 800, 801, 804, 805, 808, 809, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 831, 833, 835, 836, 837, 841, 848, 852, 869, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 889, 892, 893, 897, 901, 904, 911, 913, 916, 917, 918, 920, 921, 926, 927, 928, 929, 933, 936, 937, 940, 942, 947, 950, 951, 952, 955, 956, 958, 961, 962, 971, 977, 1067, 1158, 1183, 1245, 1319, 1327, 1341, 1361, 1374, 1384, 1386, 1387, 1389, 1390, 1391, 1392, 1397, 1402], "c00": 977, "c01": 977, "c02": 977, "c03": 977, "c05": 977, "c1": 407, "c123": 1397, "c2": 407, "c20": 977, "c25": 977, "c3": 407, "c40": 977, "c45": 1397, "c4d79b": [41, 357], "c50": 977, "c567": [41, 357], "c60": 977, "c75": 977, "c80": 977, "c8ae6d2b276": [41, 357], "c93": 977, "c95": 977, "c96": 977, "c97": 977, "c98": 977, "c99": 977, "c_btm_by_a": [428, 852], "c_btm_by_b": [428, 852], "c_by_ca": [428, 758, 852], "c_by_cb": [428, 758, 852], "c_c_c": [831, 929, 971], "c_contigu": [315, 357], "c_max": [640, 852], "c_mean_squar": [336, 947], "c_min": [640, 852], "c_top_by_a": [758, 852], "c_top_by_b": [758, 852], "c_total": 1402, "ca": 785, "cach": [57, 64, 98, 100, 127, 158, 167, 170, 172, 177, 178, 179, 180, 192, 654, 655, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 735, 737, 738, 742, 852, 863, 874, 885, 913, 926, 971, 1252, 1253, 1327, 1329, 1330, 1334, 1374], "cadi": [281, 357], "cafe": [740, 1332], "caf\u00e9": [432, 433, 716, 717, 977, 1046, 1047, 1308, 1309], "calamin": 157, "calcul": [41, 47, 52, 58, 224, 246, 305, 328, 357, 451, 504, 505, 506, 507, 548, 560, 579, 586, 592, 596, 661, 673, 691, 696, 762, 764, 784, 828, 829, 833, 841, 852, 879, 893, 930, 938, 971, 1068, 1069, 1129, 1130, 1131, 1132, 1174, 1186, 1205, 1258, 1265, 1284, 1288, 1364, 1374], "calendar": [72, 73, 246, 261, 289, 327, 357, 458, 469, 471, 478, 483, 496, 500, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 796, 839, 840, 852, 893, 898, 919, 971, 1076, 1087, 1092, 1100, 1105, 1118, 1122, 1130, 1374], "calendar_year": [469, 500], "call": [10, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 57, 64, 138, 147, 149, 152, 153, 154, 156, 157, 158, 162, 164, 167, 168, 170, 171, 172, 177, 178, 179, 180, 184, 188, 198, 208, 216, 245, 246, 263, 265, 289, 304, 315, 320, 356, 357, 427, 428, 443, 446, 455, 467, 598, 599, 623, 624, 626, 628, 630, 631, 654, 655, 687, 757, 758, 777, 783, 848, 852, 869, 874, 885, 892, 893, 913, 919, 926, 929, 933, 968, 969, 970, 971, 977, 1040, 1041, 1073, 1085, 1224, 1253, 1280, 1354, 1358, 1359, 1374, 1384, 1388, 1402], "callabl": [53, 54, 55, 59, 60, 61, 62, 97, 147, 167, 239, 265, 280, 286, 343, 357, 407, 590, 598, 599, 624, 625, 644, 662, 786, 787, 800, 813, 814, 826, 852, 903, 912, 917, 954, 971, 1020, 1216, 1224, 1259, 1374], "callback": [47, 52, 53, 54, 55, 144, 146, 357, 971], "caller": [97, 155, 273, 357, 590, 903, 909, 954, 971], "cam": [286, 357, 917, 971], "can": [1, 15, 28, 38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 57, 58, 64, 72, 73, 75, 89, 97, 98, 100, 136, 147, 152, 153, 154, 156, 157, 158, 162, 163, 164, 167, 168, 170, 171, 172, 173, 182, 183, 184, 188, 190, 193, 198, 208, 210, 216, 218, 228, 229, 230, 239, 241, 245, 246, 253, 255, 257, 260, 261, 265, 266, 277, 281, 289, 291, 292, 295, 297, 298, 303, 314, 315, 319, 320, 321, 325, 331, 334, 343, 357, 360, 362, 370, 407, 428, 443, 446, 447, 450, 455, 467, 475, 476, 478, 482, 485, 488, 505, 511, 514, 535, 562, 590, 598, 599, 606, 610, 613, 614, 620, 623, 624, 626, 628, 630, 631, 640, 645, 646, 647, 652, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 684, 686, 691, 694, 699, 708, 715, 719, 721, 722, 723, 730, 731, 732, 735, 746, 752, 758, 775, 777, 790, 793, 800, 802, 806, 807, 810, 814, 831, 835, 842, 848, 851, 852, 863, 869, 870, 874, 875, 880, 882, 883, 885, 893, 897, 898, 904, 919, 921, 923, 924, 926, 928, 929, 933, 940, 943, 944, 971, 977, 979, 1020, 1041, 1066, 1073, 1085, 1097, 1098, 1100, 1104, 1107, 1110, 1130, 1136, 1158, 1188, 1216, 1224, 1229, 1243, 1244, 1245, 1249, 1253, 1272, 1274, 1275, 1278, 1284, 1291, 1292, 1300, 1307, 1313, 1314, 1315, 1322, 1323, 1324, 1327, 1344, 1352, 1354, 1359, 1374, 1379, 1389, 1402], "cancel": [874, 971], "candid": [706, 708, 1298, 1300], "cannot": [1, 47, 49, 50, 51, 52, 64, 65, 109, 112, 152, 153, 157, 158, 160, 162, 163, 164, 172, 190, 208, 261, 265, 292, 293, 315, 334, 343, 357, 412, 488, 508, 578, 599, 614, 682, 701, 727, 748, 814, 852, 874, 875, 885, 898, 913, 926, 944, 946, 954, 971, 977, 1025, 1110, 1204, 1224, 1271, 1293, 1319, 1354, 1374], "capabl": [1, 41, 357], "capac": [232, 301, 357, 1128, 1279, 1374], "capit": [743, 1335], "captur": [706, 708, 721, 722, 1298, 1300, 1313, 1314], "car": [286, 310, 357, 657, 852, 917, 971], "cardin": [215, 357, 374, 771, 852, 868, 971, 987, 1374], "care": [41, 298, 357, 599, 640, 684, 852, 924, 971, 1275, 1374], "cars_revers": [657, 852], "cartesian": [260, 357, 897, 971], "case": [41, 57, 58, 65, 97, 107, 133, 135, 136, 137, 139, 147, 149, 154, 161, 162, 171, 172, 190, 234, 246, 258, 265, 281, 289, 291, 292, 311, 314, 315, 357, 456, 505, 598, 610, 611, 624, 640, 660, 698, 699, 707, 709, 710, 711, 721, 722, 723, 743, 842, 852, 875, 893, 916, 919, 971, 977, 1074, 1130, 1135, 1290, 1291, 1299, 1301, 1302, 1303, 1313, 1314, 1315, 1335, 1352, 1374], "cast": [1, 40, 56, 60, 61, 133, 135, 136, 139, 149, 172, 177, 178, 179, 180, 239, 246, 266, 280, 289, 314, 315, 319, 331, 357, 373, 445, 446, 457, 485, 488, 499, 639, 644, 645, 652, 654, 660, 714, 715, 745, 752, 756, 780, 781, 832, 852, 864, 893, 904, 912, 919, 940, 971, 977, 1050, 1064, 1065, 1075, 1107, 1110, 1121, 1243, 1249, 1306, 1307, 1332, 1337, 1344, 1350, 1354, 1356, 1357, 1374, 1395], "cast_opt": 172, "cast_str_to_int": [280, 357, 912, 971], "cast_to_supertyp": [149, 852], "cat": [27, 57, 98, 100, 448, 647, 698, 700, 741, 744, 756, 781, 847, 852, 977, 1067, 1153, 1245, 1290, 1292, 1333, 1336, 1370, 1374], "catalog": [0, 864], "catalog_nam": [194, 196, 197, 198], "cataloginfo": [195, 206], "categor": [40, 57, 76, 98, 100, 102, 177, 178, 179, 180, 260, 312, 357, 430, 431, 432, 433, 434, 448, 647, 654, 655, 756, 852, 977, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1067, 1245, 1252, 1253, 1356, 1374], "categori": [41, 57, 76, 100, 312, 357, 431, 448, 529, 647, 852, 1044, 1067, 1153, 1245, 1349, 1374], "categorical_as_str": [177, 178, 179, 180], "categoricalord": 70, "categoricaltyp": [309, 357], "caus": [115, 124, 134, 152, 153, 154, 167, 212, 234, 315, 357, 1135, 1354, 1374], "cb": 785, "cba": 732, "cbrt": [852, 1374, 1395], "cbrt_a": 1396, "cc": [508, 798, 852, 977, 1068, 1374, 1397], "ccc": [1, 41, 357, 746, 748, 749, 977, 1397], "ccy": 1405, "cd": [722, 746, 748, 749, 977], "cd34": 722, "cdatainterfac": [134, 211, 980], "cde": [977, 1397], "cdot": [536, 852, 1159, 1374], "cdt": [483, 496, 1105, 1118], "ceil": [60, 852, 1374, 1395], "ceil_a": 1396, "cell": [16, 17, 41, 281, 357], "cent": [458, 1313], "center": [16, 17, 41, 357, 504, 506, 507, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 852, 1129, 1131, 1132, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374], "central": [168, 169, 208, 548, 691, 852, 1174, 1284, 1374], "centuri": 1398, "certain": [53, 251, 327, 357, 731, 732, 848, 867, 874, 913, 971, 977, 1374], "certainli": [735, 737, 738, 1327, 1329, 1330], "cest": [482, 1104], "cet": [482, 1104], "cfg": [2, 4, 18, 208], "cfg_ascii_fram": 208, "cfg_markdown": 208, "cfg_verbos": 208, "cfoo": [942, 971], "chain": [623, 624, 626, 628, 630, 631, 842], "chanc": [181, 184, 188, 1405], "chang": [31, 32, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 74, 80, 99, 132, 134, 140, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 216, 246, 260, 262, 266, 281, 289, 304, 309, 314, 319, 320, 326, 327, 333, 357, 360, 361, 362, 428, 447, 448, 451, 455, 467, 488, 504, 506, 507, 529, 599, 640, 641, 647, 654, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 739, 758, 777, 779, 810, 811, 828, 829, 842, 852, 869, 874, 875, 885, 893, 897, 899, 904, 913, 919, 929, 933, 937, 943, 945, 971, 977, 1050, 1066, 1067, 1073, 1085, 1110, 1127, 1129, 1131, 1132, 1153, 1240, 1245, 1252, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1279, 1331, 1348, 1352, 1357, 1374, 1379, 1402], "changes_length": [149, 852], "char": [28, 152, 153, 167, 707, 1299], "char_length": 1397, "charact": [7, 9, 13, 21, 27, 28, 29, 38, 39, 49, 101, 151, 152, 153, 155, 167, 357, 432, 433, 478, 704, 705, 707, 712, 716, 717, 719, 720, 721, 722, 725, 726, 727, 730, 731, 732, 733, 734, 736, 743, 745, 913, 971, 977, 1046, 1047, 1100, 1296, 1297, 1299, 1304, 1308, 1309, 1311, 1312, 1313, 1314, 1317, 1318, 1319, 1322, 1323, 1324, 1328, 1335, 1337, 1397], "character_length": 1397, "characterist": [184, 188], "charli": [152, 1403], "chart": [41, 357, 360, 913, 971, 1374, 1379], "cheap": [218, 219, 296, 332, 357, 872, 873, 922, 941, 971, 1054, 1056, 1374], "cheaper": [565, 1191], "check": [40, 73, 109, 152, 153, 167, 177, 178, 179, 180, 192, 231, 256, 260, 261, 357, 390, 411, 414, 417, 430, 434, 526, 535, 536, 540, 558, 698, 703, 710, 729, 852, 897, 898, 903, 971, 1003, 1024, 1027, 1030, 1043, 1048, 1127, 1149, 1150, 1161, 1164, 1171, 1173, 1184, 1290, 1295, 1302, 1321, 1374], "check_column_ord": [177, 178], "check_dtyp": [177, 178, 179, 180, 976, 1127, 1374], "check_exact": [177, 178, 179, 180], "check_nam": [179, 180, 1127, 1374], "check_ord": [179, 180], "check_order_observ": 945, "check_row_ord": [177, 178], "check_sorted": [261, 357, 898, 971], "children": 143, "choos": [47, 50, 52, 246, 281, 357, 488, 893, 971, 977, 1110], "chrono": [38, 49, 103, 357, 485, 488, 735, 737, 738, 742, 971, 1107, 1110, 1327, 1329, 1330, 1334, 1397, 1398], "chunk": [15, 52, 142, 152, 153, 156, 162, 164, 167, 168, 170, 171, 172, 184, 188, 234, 259, 276, 315, 357, 373, 651, 852, 971, 986, 1053, 1135, 1147, 1230, 1248, 1348, 1354, 1374], "chunk_length": 1374, "chunkedarrai": [133, 276, 357], "citi": [721, 722], "clang": 176, "clariti": [290, 357], "class": [1, 18, 32, 33, 34, 35, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 118, 120, 143, 144, 145, 146, 181, 182, 193, 199, 200, 202, 203, 292, 297, 357, 362, 613, 810, 839, 848, 852, 858, 864, 877, 884, 920, 939, 945, 946, 971, 976, 977, 1353, 1374, 1378, 1386, 1402], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 225, 357, 450, 520, 852, 880, 971, 1384, 1402], "claus": [864, 1392, 1401], "clean": [735, 737, 738, 1327, 1329, 1330], "cleaner": 208, "cleanli": [11, 244, 357, 1402], "clear": [57, 98, 219, 357, 873, 971, 1056, 1374], "clearer": 136, "clickhous": 155, "client": [33, 154, 193], "clip": [852, 1374], "clipboard": [37, 151, 357, 864], "clone": [135, 136, 137, 138, 139, 218, 315, 357, 872, 971, 1054, 1374], "close": [41, 49, 50, 51, 52, 54, 154, 246, 289, 304, 357, 448, 535, 536, 595, 647, 660, 664, 666, 668, 670, 672, 675, 677, 679, 691, 791, 792, 794, 795, 810, 811, 839, 840, 852, 893, 919, 929, 971, 1067, 1158, 1159, 1245, 1284, 1374], "closedinterv": [246, 289, 357, 535, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 810, 811, 839, 840, 852, 893, 919, 971, 1158, 1374], "closest": [133, 261, 357, 898, 971, 1391, 1396], "closur": [664, 666, 675, 677, 679, 852], "cloud": [35, 38, 40, 43, 47, 49, 50, 51, 52, 97, 154, 156, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 198, 357, 864, 915, 971], "cloudi": [721, 722], "cloudpickl": 176, "cluster": 172, "cluster_with_column": [64, 874, 885, 913, 926, 945, 971], "co": [707, 852, 1299, 1374, 1395], "coalesc": [66, 260, 261, 326, 357, 533, 709, 711, 735, 842, 852, 897, 898, 937, 971, 1303, 1327, 1390, 1395], "code": [208, 220, 260, 357, 411, 412, 413, 414, 417, 450, 599, 684, 852, 880, 897, 901, 971, 1275, 1374, 1384], "codebas": 208, "coeffici": [222, 357, 691, 852, 1284, 1374, 1391], "coerc": [66, 653, 852, 1251, 1374], "coerce_int96_timestamp_unit": 56, "coercion": [64, 266, 357, 653, 852, 874, 885, 904, 913, 926, 971, 1251, 1374], "col": [1, 13, 38, 41, 49, 53, 58, 59, 60, 61, 137, 139, 167, 182, 184, 237, 245, 246, 251, 254, 256, 260, 261, 262, 265, 266, 277, 280, 281, 285, 289, 290, 295, 303, 314, 319, 323, 325, 331, 336, 357, 361, 362, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 528, 529, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 625, 627, 629, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 775, 776, 778, 779, 780, 781, 783, 785, 788, 790, 791, 793, 794, 796, 800, 801, 802, 803, 804, 805, 815, 817, 819, 820, 822, 825, 826, 830, 831, 833, 835, 837, 838, 841, 842, 852, 889, 892, 893, 895, 897, 898, 899, 904, 912, 916, 919, 921, 928, 929, 935, 940, 942, 947, 971, 977, 1100, 1104, 1188, 1272, 1274, 1303, 1307, 1327, 1374, 1405], "col0": [184, 1405], "col1": [184, 281, 357, 971, 1405], "col2": [184, 281, 357, 971, 1405], "col3": [281, 357, 1405], "col4": 1405, "col_idx": 214, "col_nam": [280, 357, 599, 842, 852, 912, 971], "col_or_expr": 99, "cole": 148, "coli": [41, 357, 630, 631, 977, 1405], "collaps": [64, 874, 885, 913, 926, 971], "collapse_join": [64, 874, 885, 913, 926, 945, 971], "collect": [10, 49, 50, 51, 52, 56, 61, 64, 65, 97, 132, 167, 168, 169, 173, 184, 185, 188, 228, 229, 263, 281, 304, 309, 322, 323, 357, 362, 508, 540, 579, 580, 581, 582, 599, 780, 798, 802, 830, 831, 834, 852, 867, 868, 869, 871, 872, 875, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 921, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 968, 970, 971, 977, 1164, 1205, 1206, 1207, 1208, 1374, 1384, 1385, 1386, 1389, 1390, 1402, 1403, 1405], "collect_al": [61, 65, 132, 874, 875, 971], "collect_all_async": [875, 971], "collect_async": [65, 971], "collect_dtyp": [48, 362], "collect_schema": [61, 166, 263, 357, 877, 884, 912, 920, 939, 971], "collis": 66, "colnam": [25, 41, 167, 357], "color": [57, 98, 100, 343, 357, 360, 411, 412, 413, 414, 417, 701, 763, 852, 954, 1024, 1025, 1026, 1027, 1030, 1293, 1363, 1374, 1397], "column": [11, 17, 18, 19, 22, 23, 25, 40, 41, 47, 52, 53, 54, 55, 57, 58, 59, 66, 73, 89, 99, 100, 104, 108, 133, 135, 136, 137, 138, 139, 140, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 184, 200, 203, 213, 214, 216, 217, 220, 222, 223, 226, 227, 228, 229, 230, 233, 237, 238, 241, 242, 244, 245, 246, 250, 251, 256, 257, 258, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 298, 303, 305, 306, 307, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 342, 357, 360, 361, 362, 369, 370, 372, 383, 392, 401, 403, 406, 415, 428, 437, 441, 442, 448, 458, 459, 461, 462, 463, 466, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 484, 485, 486, 488, 497, 498, 500, 508, 510, 514, 516, 529, 534, 535, 551, 557, 563, 565, 585, 589, 590, 599, 605, 606, 608, 610, 612, 623, 625, 626, 627, 628, 629, 630, 631, 640, 647, 651, 653, 654, 655, 656, 658, 659, 660, 664, 666, 668, 670, 672, 675, 677, 679, 686, 687, 693, 694, 697, 705, 710, 712, 713, 723, 727, 728, 735, 736, 737, 738, 739, 740, 742, 747, 750, 758, 763, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 869, 871, 878, 881, 882, 883, 884, 886, 889, 892, 893, 897, 898, 899, 903, 904, 905, 906, 907, 908, 910, 911, 914, 916, 917, 919, 920, 921, 922, 924, 928, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 953, 954, 971, 976, 977, 984, 985, 1005, 1014, 1016, 1019, 1028, 1041, 1045, 1049, 1055, 1060, 1061, 1067, 1076, 1079, 1080, 1081, 1084, 1086, 1087, 1091, 1092, 1093, 1095, 1096, 1099, 1101, 1102, 1106, 1107, 1108, 1110, 1119, 1120, 1122, 1134, 1153, 1157, 1183, 1189, 1191, 1211, 1215, 1245, 1251, 1253, 1254, 1257, 1278, 1289, 1297, 1302, 1305, 1319, 1320, 1327, 1329, 1330, 1331, 1332, 1334, 1340, 1343, 1349, 1350, 1359, 1363, 1374, 1390, 1391, 1392, 1394, 1396, 1397, 1399, 1400, 1403, 1404, 1405], "column_0": [1, 265, 321, 357, 915, 971], "column_1": [265, 321, 357, 1399], "column_2": [321, 357, 1399], "column_abc": 16, "column_format": [41, 357], "column_nam": [286, 321, 357, 917, 971], "column_tot": [41, 357], "column_width": [41, 357], "column_x": [152, 153, 157, 163, 167], "column_xyz": 16, "columnar": [137, 139, 258, 291, 357], "columnformatdict": [41, 357], "columninfo": [203, 206], "columnnameorselector": [217, 226, 228, 229, 233, 272, 279, 281, 292, 312, 322, 323, 324, 325, 357, 871, 881, 882, 883, 886, 908, 934, 935, 936, 971], "columnnotfounderror": [241, 242, 357], "columntotalsdefinit": [41, 357], "columnwidthsdefinit": [41, 357], "colx": [41, 357, 630, 631, 977, 1389, 1405], "colz": [977, 1405], "com": [33, 41, 155, 357, 504, 506, 507, 706, 707, 708, 852, 1129, 1131, 1132, 1298, 1299, 1300, 1374], "combin": [47, 52, 64, 66, 132, 237, 246, 247, 261, 281, 285, 289, 327, 357, 371, 384, 505, 518, 614, 639, 655, 660, 730, 731, 732, 791, 792, 794, 795, 839, 840, 842, 852, 874, 885, 893, 898, 913, 916, 919, 926, 971, 1130, 1253, 1322, 1323, 1324, 1374, 1390, 1403], "come": [127, 155, 246, 322, 324, 357, 455, 467, 475, 476, 548, 590, 777, 842, 852, 893, 934, 936, 971, 1073, 1085, 1097, 1098, 1174, 1374], "comm_subexpr_elim": [64, 874, 885, 913, 926, 945, 971], "comm_subplan_elim": [64, 874, 885, 913, 926, 945, 971], "comma": [37, 38, 49, 152, 153, 167, 357, 971], "comment": [152, 153, 167, 199, 200, 202, 203], "comment_prefix": [152, 153, 167], "common": [56, 58, 64, 66, 107, 132, 152, 153, 167, 326, 357, 624, 858, 874, 885, 913, 926, 937, 971, 1378], "commonli": 842, "compact": 1400, "compani": 155, "compar": [172, 177, 178, 179, 180, 231, 237, 285, 357, 502, 503, 523, 525, 535, 550, 597, 634, 635, 852, 889, 916, 971, 1126, 1127, 1236, 1374], "comparison": [173, 237, 285, 357, 889, 916, 971], "compat": [21, 41, 43, 44, 47, 50, 52, 102, 140, 309, 357, 698, 700, 706, 707, 708, 710, 721, 722, 971, 977, 1110, 1290, 1292, 1298, 1299, 1300, 1302, 1313, 1314, 1348, 1374, 1384, 1397, 1398, 1402], "compat_level": [43, 44, 50, 309, 357, 971, 1348, 1374], "compatibleframetyp": [1385, 1387, 1402], "compatlevel": [43, 44, 50, 309, 357, 971, 1348, 1374], "competit": [650, 852, 1247, 1374], "compil": [63, 388, 389, 555, 556, 975, 1001, 1002, 1181, 1182], "complement": 977, "complet": [152, 154, 167, 1403], "complex": [185, 427, 428, 447, 757, 758, 852, 1040, 1041, 1066, 1358, 1359, 1374], "compliant": [41, 357, 488, 1110], "compon": [459, 484, 488, 735, 738, 796, 1077, 1106, 1110, 1327, 1330], "compos": 1403, "composit": [89, 1405], "compound": [140, 292, 357, 977], "comprehens": 182, "compress": [36, 40, 43, 44, 47, 50, 52, 357, 658, 852, 971, 1256, 1374], "compression_level": [47, 52, 357, 971], "comput": [64, 66, 105, 232, 245, 261, 281, 316, 322, 336, 349, 357, 366, 375, 376, 377, 378, 379, 380, 397, 398, 399, 404, 405, 409, 435, 438, 439, 440, 443, 444, 445, 446, 452, 501, 504, 505, 506, 507, 509, 548, 572, 573, 574, 575, 579, 580, 581, 582, 586, 592, 593, 594, 595, 620, 640, 641, 646, 650, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 688, 689, 690, 691, 695, 754, 755, 763, 768, 770, 773, 774, 775, 782, 784, 797, 818, 828, 829, 842, 852, 867, 874, 892, 895, 897, 898, 915, 934, 942, 947, 960, 971, 982, 988, 989, 990, 991, 992, 993, 1010, 1011, 1012, 1017, 1018, 1022, 1051, 1057, 1058, 1059, 1062, 1063, 1064, 1065, 1070, 1124, 1128, 1129, 1130, 1131, 1132, 1133, 1174, 1198, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1212, 1218, 1219, 1220, 1221, 1229, 1240, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1281, 1282, 1283, 1284, 1287, 1346, 1347, 1355, 1363, 1374, 1396, 1399], "computecontext": [915, 971], "computeerror": [610, 740, 842, 1332], "concat": [57, 98, 100, 108, 153, 261, 357, 898, 942, 971, 1053, 1147, 1230, 1248, 1374, 1395], "concat_list": [562, 797], "concat_w": [304, 357, 831, 929, 971, 1395, 1402], "concaten": [57, 66, 98, 100, 239, 280, 357, 644, 697, 713, 779, 780, 781, 852, 912, 971, 1053, 1230, 1289, 1305, 1374, 1397], "concatmethod": 66, "conclus": [137, 139, 357, 971], "concret": [184, 188], "condit": [41, 229, 237, 262, 285, 290, 357, 430, 434, 514, 535, 536, 703, 729, 776, 800, 842, 852, 889, 899, 916, 971, 1158, 1159, 1374, 1390, 1395, 1401], "conditional_format": [41, 357], "conditionalformatdict": [41, 357], "config": [0, 58, 224, 314, 357, 699, 709, 711, 723, 791, 792, 794, 795, 796, 864, 874, 879, 971, 1291, 1303, 1315], "configur": [5, 33, 40, 56, 156, 164, 166, 168, 169, 172, 208, 357, 360, 865, 874, 885, 913, 926, 946, 971, 1374, 1379], "configure_axisx": [357, 360, 1374, 1379], "configure_point": [357, 360, 1374, 1379], "conflat": [535, 852], "conform": [152, 1405], "confus": [107, 370, 543, 544, 723, 852], "conjunct": [41, 98, 154, 157, 163, 182, 357, 806, 809, 971], "conn": 154, "connect": [38, 39, 43, 47, 49, 50, 51, 52, 76, 152, 154, 155, 158, 160, 162, 164, 167, 170, 171, 172, 173, 198, 357, 865, 971], "connectionorcursor": [39, 154, 357], "connector": 155, "connectorx": [154, 155, 176], "consecut": [236, 357, 410, 513, 519, 697, 713, 721, 852, 888, 971, 1023, 1138, 1143, 1289, 1305, 1314, 1374], "consid": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 98, 99, 100, 132, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 216, 228, 229, 231, 257, 262, 265, 266, 272, 291, 304, 314, 319, 320, 322, 324, 326, 357, 360, 361, 362, 428, 437, 447, 448, 455, 467, 518, 529, 536, 598, 599, 606, 622, 623, 626, 628, 630, 631, 647, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 758, 777, 779, 786, 800, 810, 811, 848, 852, 869, 874, 875, 882, 883, 885, 899, 904, 908, 913, 926, 929, 933, 934, 936, 937, 945, 954, 971, 977, 1041, 1050, 1055, 1066, 1067, 1073, 1085, 1127, 1153, 1159, 1224, 1245, 1258, 1259, 1262, 1264, 1265, 1272, 1274, 1352, 1357, 1359, 1374, 1379, 1384], "consider": 148, "consist": [245, 279, 315, 357, 735, 791, 792, 810, 842, 892, 971, 977, 986, 1135, 1327, 1354, 1374], "consola": [41, 357], "const": 11, "constant": [232, 289, 357, 456, 505, 511, 811, 852, 919, 971, 1074, 1128, 1130, 1136, 1374], "constrain": [58, 167, 228, 229, 357, 882, 883, 971, 977], "constraint": [237, 285, 357, 514, 623, 624, 626, 628, 630, 631, 842, 852, 889, 916, 971, 977, 1404], "construct": [57, 98, 100, 107, 133, 135, 136, 137, 138, 139, 140, 148, 154, 357, 520, 824, 827, 843, 848, 852, 880, 971, 1374, 1389], "construct_categor": 57, "constructor": [148, 157, 188], "consumpt": [53, 54, 55], "contain": [5, 38, 39, 40, 41, 49, 53, 54, 55, 58, 63, 103, 135, 138, 140, 149, 154, 155, 156, 164, 168, 169, 172, 183, 184, 186, 188, 216, 221, 228, 229, 230, 246, 254, 259, 277, 314, 315, 319, 320, 326, 338, 357, 370, 372, 395, 414, 417, 430, 434, 450, 526, 540, 569, 599, 697, 699, 703, 706, 708, 710, 713, 715, 728, 729, 745, 767, 768, 769, 770, 781, 814, 842, 852, 869, 877, 880, 882, 883, 884, 893, 913, 933, 937, 949, 971, 977, 984, 985, 1008, 1043, 1048, 1149, 1150, 1195, 1230, 1289, 1291, 1295, 1298, 1300, 1302, 1305, 1307, 1320, 1321, 1337, 1348, 1354, 1374, 1392], "contains_with_expr": 411, "contains_with_lit": 411, "content": [14, 49, 50, 51, 52, 687, 852, 971, 975, 1280, 1374], "context": [57, 98, 100, 144, 146, 190, 277, 304, 357, 362, 368, 514, 562, 599, 610, 693, 694, 763, 783, 799, 802, 808, 809, 814, 823, 827, 830, 851, 852, 863, 864, 915, 929, 942, 971, 1188, 1363, 1374, 1389, 1402, 1404], "contigu": [66, 133, 134, 138, 152, 153, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 284, 315, 357], "continu": [448, 647, 691, 852, 1067, 1245, 1284, 1374, 1391], "contrast": 796, "control": [11, 12, 41, 52, 65, 66, 157, 182, 184, 303, 304, 314, 357, 655, 694, 831, 852, 874, 875, 885, 913, 926, 928, 929, 946, 968, 971, 1253, 1352, 1374, 1386, 1389, 1402], "conveni": [234, 319, 357, 963, 986, 1135, 1374, 1384], "convers": [134, 212, 258, 259, 291, 292, 311, 315, 316, 357, 460, 735, 737, 738, 742, 864, 1078, 1327, 1329, 1330, 1334, 1354, 1355, 1374, 1400, 1402], "convert": [40, 56, 103, 134, 138, 149, 156, 157, 163, 168, 212, 292, 310, 311, 312, 313, 314, 315, 316, 318, 319, 357, 406, 407, 449, 460, 485, 488, 589, 590, 598, 624, 649, 708, 735, 737, 738, 739, 740, 742, 747, 852, 971, 1019, 1020, 1078, 1107, 1110, 1215, 1216, 1300, 1327, 1329, 1330, 1331, 1332, 1334, 1340, 1343, 1351, 1352, 1353, 1354, 1355, 1357, 1374, 1397, 1399, 1400, 1402], "convert_time_zon": [482, 1104], "coo": [286, 357, 917, 971], "coord": 750, "coordin": [41, 357, 1157, 1374], "copi": [37, 133, 134, 151, 210, 212, 218, 219, 259, 309, 315, 316, 331, 357, 511, 852, 872, 873, 940, 971, 979, 1054, 1056, 1136, 1348, 1353, 1354, 1355, 1374, 1402], "corasick": [699, 709, 711, 723, 1291, 1301, 1303, 1315], "core": [1, 262, 357, 899, 971, 1402, 1405], "cores_right": [262, 357, 899, 971], "corner": [21, 41, 140, 357], "corr": [357, 1395], "corrcoef": [222, 357], "correct": [97, 149, 157, 163, 506, 507, 548, 590, 661, 673, 691, 852, 903, 971, 1131, 1132, 1174, 1258, 1265, 1284, 1374], "correctli": [41, 357, 786, 800, 826], "correl": [222, 357, 782, 828, 1391], "correlationmethod": 782, "correspond": [246, 261, 289, 315, 327, 357, 428, 469, 478, 483, 496, 650, 660, 664, 666, 668, 670, 672, 675, 677, 679, 758, 791, 792, 794, 795, 839, 840, 852, 874, 893, 898, 919, 971, 1087, 1100, 1105, 1118, 1247, 1374, 1391], "cosd": 1395, "cosh": [852, 1374], "cosin": [375, 376, 438, 439, 598, 852, 988, 989, 1057, 1058, 1374, 1399], "cost": [262, 292, 357, 721, 899, 971, 1314], "cost_usd": [721, 1314], "cot": [852, 1374, 1395], "cotang": [440, 852, 1059, 1374, 1399], "cotd": 1395, "could": [40, 95, 105, 357, 688, 786, 796, 800, 842, 852, 871, 879, 971, 1281, 1374], "count": [41, 173, 215, 224, 246, 277, 278, 289, 321, 327, 333, 348, 357, 374, 391, 400, 442, 455, 467, 505, 529, 551, 559, 571, 576, 599, 622, 638, 646, 650, 660, 664, 666, 668, 670, 672, 675, 677, 679, 700, 752, 761, 763, 771, 777, 785, 809, 822, 835, 852, 868, 879, 893, 911, 919, 943, 959, 971, 977, 987, 1004, 1013, 1061, 1068, 1073, 1085, 1130, 1153, 1177, 1185, 1197, 1202, 1231, 1239, 1244, 1292, 1344, 1361, 1363, 1374, 1379, 1383, 1395], "count_digit": 700, "count_num": [41, 357], "counterpart": 148, "countri": [261, 357, 456, 898, 971, 1074], "country_holidai": [455, 467, 777, 1073, 1085], "covar": 1391, "covar_samp": 1391, "covari": [149, 784, 829, 852, 1391], "cover": 11, "cow": [719, 720, 1311, 1312], "cpu": [152, 153, 176, 314, 357, 946, 1352, 1374], "crab": [698, 710, 1290, 1302], "crate": [38, 49, 103, 357, 698, 700, 706, 707, 708, 710, 721, 722, 735, 737, 738, 742, 971, 977, 1290, 1292, 1298, 1299, 1300, 1302, 1313, 1314, 1327, 1329, 1330, 1334], "creat": [39, 41, 49, 50, 51, 52, 53, 55, 57, 100, 133, 137, 139, 152, 153, 154, 155, 158, 160, 164, 168, 169, 182, 183, 184, 185, 186, 187, 188, 189, 208, 218, 219, 246, 278, 281, 289, 314, 315, 327, 331, 334, 357, 360, 361, 459, 483, 496, 505, 529, 590, 598, 651, 660, 664, 666, 668, 670, 672, 675, 677, 679, 780, 790, 791, 792, 793, 794, 795, 796, 810, 838, 839, 840, 842, 848, 852, 872, 873, 879, 885, 893, 919, 940, 944, 971, 975, 976, 1054, 1056, 1067, 1077, 1105, 1118, 1130, 1153, 1237, 1245, 1248, 1352, 1354, 1374, 1379, 1401, 1402, 1405], "create_async_engin": 154, "create_engin": [39, 357], "created_at": [199, 202, 203], "created_bi": [199, 202, 203], "creation": [144, 146, 153], "credenti": [32, 33, 34, 35, 38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 198, 357, 864, 971], "credential_provid": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 198, 357, 971], "credentialproviderfunct": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 198, 357, 971], "cross": [260, 357, 897, 971, 1390], "crustacean": [710, 1302], "cst": [483, 496, 1105, 1118], "csv": [37, 38, 49, 50, 51, 52, 53, 54, 55, 151, 152, 153, 157, 158, 167, 201, 357, 864, 971], "csvencod": [152, 153, 167], "csvquotestyl": [38, 49, 357, 971], "ctx": [53, 54, 55, 1383, 1385, 1386, 1387, 1388, 1389, 1402], "cube": [1, 62, 435, 645, 852, 1051, 1374, 1396], "cuda": 946, "cum_count": [852, 1374], "cum_count_revers": [442, 852], "cum_max": [852, 1374], "cum_max_all_fil": [443, 852], "cum_max_revers": [443, 852], "cum_min": [852, 1374], "cum_min_revers": [444, 852], "cum_prod": [367, 852, 1374], "cum_prod_revers": [445, 852], "cum_reduc": 786, "cum_sum": [532, 640, 751, 789, 852, 895, 971, 1173, 1374], "cum_sum_revers": [446, 852], "cumsum_horizont": 788, "cumul": [442, 443, 444, 445, 446, 785, 786, 787, 788, 789, 852, 1061, 1062, 1063, 1064, 1065, 1374], "cumulative_ev": [852, 1374], "cumulative_sal": [640, 852], "current": [2, 3, 5, 6, 31, 38, 39, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 140, 144, 145, 146, 154, 155, 162, 164, 167, 170, 171, 172, 181, 182, 184, 185, 186, 187, 188, 189, 198, 218, 219, 226, 260, 261, 286, 304, 314, 319, 357, 360, 361, 464, 590, 641, 852, 867, 872, 873, 881, 897, 898, 917, 926, 929, 946, 971, 977, 1054, 1056, 1074, 1082, 1240, 1352, 1357, 1374, 1379, 1386, 1402], "cursor": [39, 154, 357], "custom": [1, 28, 40, 41, 59, 60, 61, 62, 106, 148, 165, 187, 189, 224, 265, 281, 343, 357, 407, 455, 467, 485, 488, 590, 598, 599, 662, 763, 777, 813, 814, 852, 879, 903, 954, 971, 1020, 1073, 1085, 1107, 1110, 1216, 1224, 1259, 1363, 1374, 1405], "customis": [41, 357], "cut": [647, 852, 1245, 1374], "cxx": 1397, "cypher": 154, "d": [29, 36, 38, 40, 41, 43, 44, 47, 136, 173, 213, 237, 244, 246, 247, 248, 260, 264, 285, 308, 309, 319, 325, 329, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 367, 369, 442, 465, 485, 488, 535, 605, 644, 680, 686, 700, 707, 721, 722, 727, 735, 737, 738, 778, 779, 796, 802, 831, 852, 889, 893, 897, 916, 929, 950, 952, 955, 956, 957, 958, 959, 960, 961, 971, 977, 1061, 1083, 1107, 1110, 1158, 1183, 1292, 1299, 1313, 1314, 1319, 1327, 1329, 1330, 1341, 1374, 1390, 1392, 1394, 1397, 1398], "d1": [41, 357, 459], "d2": 459, "d3": 459, "d789": [41, 357], "d_4": [727, 1319], "d_awai": [680, 852], "d_to_even": [680, 852], "dai": [72, 73, 90, 246, 259, 261, 289, 327, 357, 360, 455, 467, 475, 476, 478, 479, 481, 483, 485, 488, 489, 496, 498, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 777, 790, 791, 792, 793, 794, 795, 796, 839, 840, 852, 893, 898, 919, 971, 977, 1073, 1085, 1097, 1098, 1100, 1101, 1103, 1105, 1107, 1110, 1111, 1118, 1120, 1130, 1374, 1398], "dark": 1383, "data": [0, 1, 11, 19, 20, 22, 25, 29, 36, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 66, 71, 72, 73, 75, 86, 87, 89, 90, 100, 103, 107, 109, 112, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 206, 210, 212, 219, 220, 230, 232, 233, 234, 244, 245, 246, 258, 259, 260, 263, 265, 279, 280, 281, 284, 290, 291, 292, 294, 298, 301, 309, 314, 315, 316, 319, 321, 331, 335, 355, 357, 361, 362, 370, 371, 372, 375, 376, 377, 378, 379, 380, 383, 386, 387, 388, 389, 390, 392, 395, 397, 398, 399, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 429, 431, 432, 433, 437, 438, 439, 440, 441, 448, 449, 450, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 510, 521, 523, 524, 525, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 550, 551, 555, 556, 558, 563, 569, 571, 578, 589, 591, 597, 599, 634, 635, 639, 640, 647, 649, 650, 653, 654, 655, 656, 658, 659, 664, 666, 668, 670, 672, 675, 677, 679, 680, 682, 684, 689, 690, 691, 697, 700, 701, 702, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 725, 726, 727, 728, 735, 736, 737, 738, 740, 742, 745, 754, 755, 756, 759, 760, 766, 772, 780, 783, 790, 791, 792, 793, 794, 795, 796, 806, 807, 809, 810, 811, 812, 813, 814, 824, 827, 838, 839, 840, 843, 848, 852, 864, 872, 873, 880, 884, 886, 892, 893, 920, 924, 940, 971, 976, 977, 979, 984, 985, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1019, 1021, 1024, 1025, 1026, 1028, 1029, 1042, 1044, 1046, 1047, 1054, 1055, 1056, 1067, 1068, 1073, 1074, 1075, 1076, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1127, 1128, 1130, 1134, 1135, 1153, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1179, 1180, 1181, 1182, 1184, 1189, 1195, 1197, 1204, 1215, 1217, 1224, 1238, 1245, 1247, 1251, 1252, 1253, 1254, 1256, 1257, 1269, 1271, 1279, 1284, 1289, 1290, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1304, 1305, 1306, 1307, 1308, 1309, 1317, 1318, 1319, 1320, 1327, 1328, 1329, 1330, 1332, 1334, 1337, 1348, 1353, 1354, 1355, 1356, 1360, 1373, 1374, 1383, 1390, 1397, 1402, 1404], "data_bar": [41, 357], "data_bar_2010": [41, 357], "data_label": [41, 357], "data_page_s": [47, 52, 357, 971], "data_source_format": 203, "databas": [39, 131, 154, 155, 357, 864], "databrick": 193, "databricks_format": 201, "datafram": [0, 1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 85, 97, 104, 107, 108, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 177, 178, 181, 182, 208, 355, 356, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 848, 852, 864, 867, 874, 875, 877, 879, 881, 884, 886, 890, 893, 897, 898, 899, 900, 901, 903, 908, 909, 913, 918, 920, 927, 929, 934, 935, 936, 937, 939, 942, 947, 948, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 971, 976, 977, 1067, 1068, 1104, 1130, 1153, 1224, 1245, 1303, 1307, 1319, 1320, 1343, 1349, 1350, 1363, 1374, 1383, 1384, 1385, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1405], "dataframeplot": [357, 360], "dataload": [319, 357], "datapoint": [246, 357, 893, 971], "dataset": [15, 47, 76, 152, 153, 156, 157, 163, 167, 168, 172, 173, 260, 319, 357, 548, 852, 864, 897, 903, 971, 1174, 1374, 1403], "datasourceformat": [203, 206], "datat": [41, 357], "datatyp": [0, 38, 49, 99, 133, 135, 136, 137, 139, 141, 159, 161, 162, 164, 166, 171, 172, 185, 186, 188, 230, 239, 357, 429, 508, 686, 756, 779, 786, 787, 798, 800, 812, 826, 848, 852, 864, 884, 971, 976, 977, 1042, 1068, 1123, 1224, 1278, 1356, 1374, 1400], "datatypeexpr": [48, 99, 174, 362, 415, 429, 598, 599, 655, 714, 772, 786, 787, 800, 806, 807, 826, 852, 871, 971], "date": [17, 41, 58, 73, 152, 153, 155, 157, 163, 164, 167, 170, 172, 173, 217, 224, 244, 246, 259, 261, 289, 304, 357, 360, 455, 457, 458, 459, 460, 463, 465, 467, 468, 469, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 640, 660, 664, 666, 668, 670, 672, 675, 677, 679, 735, 737, 756, 777, 791, 792, 794, 795, 802, 810, 812, 838, 852, 871, 879, 893, 898, 919, 971, 977, 1073, 1075, 1076, 1077, 1078, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1130, 1233, 1234, 1327, 1329, 1356, 1374, 1395, 1398, 1400], "date32": [259, 357], "date_format": [38, 49, 357, 971], "date_min": 478, "date_minus_1y_2mon": 1100, "date_part": 1395, "date_plus_1i": [478, 1100], "date_rang": [261, 327, 357, 463, 465, 479, 487, 498, 794, 795, 898, 971, 1081, 1096, 1101, 1102, 1119, 1120], "date_right": [261, 357, 898, 971], "datetim": [17, 38, 41, 49, 56, 58, 103, 140, 156, 164, 168, 170, 172, 184, 185, 186, 188, 198, 199, 202, 203, 217, 224, 244, 246, 259, 261, 289, 304, 327, 357, 360, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 607, 640, 660, 664, 666, 668, 670, 672, 675, 677, 679, 735, 738, 756, 777, 790, 791, 792, 794, 795, 796, 802, 810, 812, 839, 840, 852, 871, 879, 893, 898, 919, 971, 976, 977, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1130, 1233, 1234, 1327, 1330, 1354, 1356, 1374, 1397, 1398], "datetime_cast": 56, "datetime_format": [38, 49, 357, 971], "datetime_rang": [246, 357, 457, 460, 475, 476, 478, 482, 483, 489, 490, 491, 492, 493, 494, 495, 496, 499, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 852, 893, 971, 1074, 1075, 1078, 1082, 1083, 1084, 1090, 1091, 1093, 1095, 1097, 1098, 1099, 1100, 1104, 1105, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118], "datetime_str": 485, "datetimecastopt": 56, "datetimeindex": 138, "david": 1403, "day_nam": [485, 488], "day_of_month": [463, 479, 498], "day_of_year": [463, 479, 498], "daylight": [246, 261, 289, 327, 357, 456, 464, 478, 483, 496, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 796, 839, 840, 852, 893, 898, 919, 971, 1082, 1100, 1105, 1118], "dayofweek": 1398, "dayofyear": 1398, "days_diff": 489, "db": [39, 154, 155, 357], "dbapi2": 154, "dbc": [700, 1292], "dbreadengin": 155, "dbwriteengin": [39, 357], "dbwritemod": [39, 357], "dd": [41, 357, 1397], "ddd": [1, 41, 357, 746, 748, 749], "dddd": 1397, "ddof": [305, 328, 357, 404, 409, 586, 592, 674, 675, 678, 679, 696, 764, 782, 784, 828, 829, 833, 841, 852, 930, 938, 971, 1017, 1022, 1212, 1218, 1266, 1268, 1288, 1364, 1374], "ddww": 1397, "de": 1397, "deal": [47, 52, 258, 357, 370, 372, 481, 482, 650, 735, 738, 767, 768, 769, 770, 793, 852, 971, 984, 985, 1103, 1104, 1247, 1327, 1330, 1374], "debug": [30, 903, 971, 1405], "decad": [1383, 1398], "decai": [504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374], "decemb": [488, 1110], "decim": [9, 11, 12, 28, 29, 38, 41, 49, 152, 153, 167, 357, 361, 680, 739, 852, 971, 977, 1269, 1331, 1374, 1396], "decimal_comma": [38, 49, 152, 153, 167, 357, 971], "decimal_separ": [9, 28], "declar": [133, 135, 136, 137, 139, 154, 161, 162, 171, 314, 319, 357, 842, 971, 977, 1383], "decod": [152, 153, 714], "decompos": [323, 357, 935, 971], "decompress": [47, 50, 52, 357, 971], "decor": [57, 59, 60, 61, 62, 184, 188, 265, 357, 599, 852, 863, 864, 1224, 1374], "dedic": [1, 134, 258, 291, 357, 977, 1402], "deem": [224, 357, 879, 971], "deepcopi": [218, 357, 872, 971, 1054, 1374], "def": [1, 57, 59, 60, 61, 62, 154, 182, 184, 188, 208, 280, 321, 357, 367, 644, 704, 707, 732, 766, 813, 852, 875, 912, 971, 977, 1296, 1299, 1405], "default": [4, 5, 9, 10, 11, 15, 28, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 64, 65, 66, 70, 73, 74, 75, 133, 134, 135, 136, 137, 138, 139, 140, 149, 152, 153, 155, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 208, 224, 225, 228, 229, 232, 241, 245, 246, 247, 258, 260, 261, 266, 270, 272, 279, 281, 289, 290, 291, 292, 293, 297, 300, 304, 305, 307, 312, 314, 315, 319, 322, 324, 325, 326, 328, 333, 342, 357, 369, 370, 372, 390, 395, 402, 407, 415, 448, 450, 455, 467, 481, 482, 488, 501, 503, 504, 506, 507, 527, 540, 558, 565, 569, 578, 583, 584, 586, 590, 592, 593, 598, 606, 607, 610, 613, 632, 633, 635, 640, 641, 647, 650, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 687, 696, 697, 706, 713, 725, 730, 731, 732, 735, 737, 738, 740, 742, 763, 764, 767, 769, 772, 776, 777, 778, 781, 782, 784, 791, 792, 793, 794, 795, 796, 799, 802, 806, 807, 808, 810, 811, 812, 818, 824, 827, 830, 833, 834, 836, 839, 840, 841, 842, 843, 852, 874, 875, 879, 880, 882, 883, 885, 892, 893, 897, 898, 904, 908, 913, 915, 919, 923, 925, 926, 929, 930, 934, 936, 937, 938, 943, 946, 953, 971, 975, 977, 984, 985, 1003, 1008, 1015, 1020, 1028, 1055, 1067, 1068, 1073, 1085, 1103, 1104, 1110, 1124, 1128, 1129, 1131, 1132, 1151, 1164, 1184, 1191, 1195, 1204, 1209, 1210, 1216, 1233, 1234, 1240, 1245, 1247, 1252, 1253, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1277, 1280, 1288, 1289, 1290, 1298, 1302, 1305, 1317, 1322, 1323, 1324, 1327, 1329, 1330, 1332, 1334, 1352, 1354, 1363, 1364, 1374, 1396, 1397, 1405], "default_match": [698, 710], "default_scop": 35, "defaultazurecredenti": 34, "defaultdict": [292, 357], "defer": [208, 357, 360, 361, 1374, 1379], "defin": [38, 41, 49, 56, 73, 76, 154, 161, 164, 172, 181, 182, 184, 217, 228, 229, 233, 246, 265, 277, 280, 289, 326, 343, 357, 433, 535, 565, 599, 644, 647, 659, 660, 664, 666, 668, 670, 672, 675, 677, 679, 712, 717, 725, 736, 743, 791, 792, 794, 795, 810, 811, 814, 834, 839, 840, 852, 871, 882, 883, 886, 893, 912, 919, 937, 954, 971, 975, 976, 977, 1047, 1158, 1191, 1224, 1245, 1257, 1304, 1309, 1317, 1328, 1335, 1374], "definit": [41, 77, 357, 548, 661, 852, 976, 977, 1174, 1258, 1374], "deflat": [36, 357], "deg": 1399, "degre": [305, 328, 357, 586, 592, 649, 674, 675, 678, 679, 696, 764, 774, 784, 828, 829, 833, 841, 852, 930, 938, 971, 1266, 1268, 1288, 1364, 1374, 1395], "delai": 97, "delet": [76, 1390, 1401], "deletionfil": 172, "delimit": [46, 49, 162, 171, 281, 312, 357, 697, 713, 971, 1289, 1305, 1349, 1374, 1397], "delta": [40, 156, 168, 201, 305, 328, 357, 586, 592, 674, 675, 678, 679, 696, 764, 784, 828, 829, 833, 841, 852, 864, 930, 938, 971, 1266, 1268, 1288, 1364, 1374], "delta_merge_opt": [40, 357], "delta_table_opt": [156, 168, 198], "delta_table_vers": 198, "delta_write_opt": [40, 357], "deltalak": [40, 156, 168, 176, 198, 357], "deltashar": 201, "deltat": [40, 156, 168, 357], "demo": [41, 357], "demonstr": [152, 518, 852, 977], "dens": [21, 244, 357, 650, 852, 1247, 1374], "densiti": [1374, 1379], "depend": [47, 53, 57, 63, 100, 154, 157, 163, 176, 213, 214, 357, 388, 389, 555, 556, 610, 647, 650, 796, 799, 802, 808, 852, 981, 1001, 1002, 1181, 1182, 1245, 1247, 1374, 1405], "deploi": [184, 188], "deprec": [8, 40, 64, 67, 152, 153, 164, 172, 181, 182, 183, 184, 188, 191, 215, 272, 315, 333, 338, 357, 462, 499, 520, 598, 599, 617, 654, 697, 705, 765, 774, 782, 783, 852, 868, 874, 885, 908, 913, 923, 926, 936, 942, 943, 949, 971, 1049, 1080, 1089, 1090, 1121, 1150, 1252, 1289, 1297, 1354, 1374], "depth": 148, "desc": [977, 1383, 1386, 1390, 1392], "descend": [58, 216, 298, 303, 320, 357, 383, 403, 428, 585, 640, 650, 683, 684, 693, 694, 758, 763, 775, 852, 869, 924, 928, 933, 971, 996, 1016, 1171, 1211, 1247, 1273, 1275, 1286, 1363, 1374], "describ": [184, 244, 357, 718, 971, 1310, 1374], "descript": [246, 357, 893, 971, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1400, 1403, 1404], "deseri": [148, 297, 357, 520, 613, 852, 923, 971], "deserializ": [225, 297, 357, 450, 613, 852, 880, 923, 971], "design": [314, 319, 357, 867], "desir": [184, 260, 357, 407, 499, 590, 897, 971, 1020, 1121, 1216], "destin": 155, "detail": [63, 134, 154, 155, 177, 179, 212, 246, 326, 357, 488, 756, 852, 893, 937, 946, 971, 1110, 1356, 1374, 1405], "determin": [15, 38, 41, 49, 58, 66, 95, 148, 152, 153, 154, 157, 163, 164, 167, 172, 175, 216, 220, 239, 246, 258, 259, 265, 289, 320, 321, 327, 357, 362, 428, 467, 468, 481, 482, 529, 590, 610, 647, 653, 655, 691, 699, 712, 735, 736, 738, 739, 758, 793, 811, 824, 827, 843, 852, 869, 876, 877, 884, 893, 919, 933, 939, 971, 1041, 1085, 1086, 1103, 1104, 1153, 1216, 1245, 1251, 1252, 1253, 1284, 1291, 1327, 1330, 1331, 1359, 1374], "determinist": [763, 852, 1363, 1374], "dev": [211, 980, 1266, 1374], "develop": [155, 184, 188], "deviat": [305, 357, 506, 674, 675, 696, 833, 852, 930, 971, 1131, 1288, 1374, 1391], "devic": [314, 357, 874, 885, 913, 926, 946, 971, 1352, 1374], "devicememoryresourc": 946, "df": [1, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 59, 60, 85, 104, 108, 134, 135, 136, 137, 138, 139, 140, 153, 154, 155, 167, 181, 182, 184, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 415, 416, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 848, 852, 893, 919, 935, 937, 951, 954, 962, 971, 977, 1104, 1130, 1303, 1307, 1319, 1320, 1350, 1374, 1379, 1383, 1384, 1385, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1405], "df0": [273, 357, 909, 971, 1389], "df1": [58, 66, 177, 178, 231, 234, 273, 304, 329, 357, 909, 971, 1386, 1388, 1389, 1390, 1402], "df2": [58, 66, 177, 178, 231, 234, 329, 357, 1386, 1388, 1389, 1390, 1402], "df3": [58, 357], "df4": 357, "df5": 357, "df6": 357, "df_a": 1402, "df_a1": 66, "df_a2": 66, "df_a3": 66, "df_agg_nuniqu": [277, 357], "df_b": 1402, "df_count": [763, 852], "df_current_batch": 153, "df_d1": 66, "df_d2": 66, "df_from_str_repr": [313, 357], "df_h1": 66, "df_h2": 66, "df_new_grid": [533, 852], "df_nuniqu": [277, 357], "df_original_grid": [533, 852], "df_panda": 1384, "df_pd": 134, "df_tempor": [664, 666, 668, 670, 672, 675, 677, 679, 852], "dfi": 212, "diagon": [66, 321, 357], "diagonal_relax": 66, "diagram": [915, 971], "dict": [31, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 59, 61, 63, 133, 135, 136, 137, 138, 139, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 184, 198, 199, 202, 203, 238, 258, 279, 290, 291, 292, 310, 311, 314, 319, 321, 357, 852, 971, 976, 977, 1141, 1374, 1387], "dictat": [149, 478, 852, 1100], "dictionari": [31, 38, 40, 41, 43, 47, 49, 50, 51, 52, 63, 89, 133, 135, 136, 137, 139, 148, 152, 153, 154, 155, 156, 159, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 198, 258, 279, 290, 291, 292, 310, 311, 314, 319, 357, 971, 976], "did": [456, 1074], "diff": [489, 490, 491, 492, 493, 494, 495, 579, 852, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1205, 1374], "differ": [41, 47, 56, 103, 106, 127, 152, 157, 172, 173, 177, 179, 208, 228, 234, 246, 247, 258, 260, 281, 289, 291, 292, 311, 314, 315, 321, 357, 451, 463, 478, 479, 482, 488, 497, 503, 518, 527, 536, 560, 579, 581, 590, 632, 633, 635, 640, 654, 655, 735, 761, 799, 802, 808, 852, 865, 882, 883, 885, 893, 897, 919, 971, 975, 977, 1069, 1081, 1100, 1101, 1104, 1110, 1119, 1126, 1135, 1151, 1159, 1186, 1205, 1207, 1224, 1233, 1234, 1236, 1252, 1253, 1327, 1374, 1398, 1400, 1402], "digit": [74, 644, 680, 681, 707, 852, 977, 1269, 1270, 1292, 1299, 1374, 1405], "dimens": [133, 135, 137, 139, 161, 162, 171, 357, 656, 852, 971, 1254, 1354, 1374], "dimension": [135, 137, 139, 315, 357, 971, 1374], "direct": [41, 155, 164, 169, 172, 300, 314, 325, 357, 402, 583, 685, 852, 925, 971, 1015, 1209, 1277, 1374], "directli": [6, 31, 41, 65, 66, 154, 184, 188, 208, 214, 292, 314, 357, 504, 506, 507, 655, 827, 852, 875, 971, 1129, 1131, 1132, 1253, 1352, 1374, 1386, 1402, 1405], "directori": [41, 47, 49, 50, 51, 52, 53, 55, 149, 164, 167, 170, 172, 357, 971], "dirpath": [36, 38, 43, 44, 47, 167, 357], "disabl": [47, 52, 57, 98, 100, 164, 170, 185, 258, 357, 874, 971], "disable_string_cach": 100, "disallow": 184, "discard": [237, 285, 357, 514, 852, 889, 916, 971, 1139, 1374], "disco": [709, 711, 1301, 1303], "discont": [709, 711, 1301, 1303], "discourag": [599, 852], "discoveri": [281, 357], "discret": [448, 451, 501, 560, 579, 647, 852, 1067, 1069, 1124, 1186, 1205, 1245, 1374], "disk": [47, 49, 50, 51, 52, 158, 357, 614, 865, 926, 971], "dispatch": 977, "displai": [7, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 41, 224, 244, 357, 879, 885, 926, 971], "distanc": [261, 357, 898, 971], "distinct": [41, 188, 279, 281, 335, 357, 390, 408, 539, 540, 542, 558, 591, 650, 659, 796, 852, 1003, 1021, 1163, 1164, 1166, 1184, 1217, 1247, 1257, 1374, 1391, 1401, 1403, 1405], "distinct_count": [47, 52, 357, 971], "distinguish": [488, 1110], "distribut": [548, 691, 852, 915, 971, 1174, 1284, 1374], "div": 1395, "diverg": [64, 132], "divid": [21, 448, 483, 496, 504, 506, 507, 518, 548, 647, 650, 852, 1067, 1105, 1118, 1129, 1131, 1132, 1174, 1245, 1374, 1391, 1396], "divis": [518, 759, 852, 1396], "divisor": [305, 328, 357, 586, 592, 674, 675, 678, 679, 696, 764, 784, 828, 829, 833, 841, 852, 930, 938, 971, 1266, 1268, 1288, 1364, 1374], "dl": [319, 357], "do": [1, 41, 56, 58, 64, 135, 136, 139, 152, 164, 167, 172, 177, 178, 179, 180, 213, 224, 226, 234, 257, 260, 261, 281, 286, 309, 321, 325, 357, 360, 455, 562, 598, 721, 722, 730, 731, 732, 782, 824, 827, 843, 852, 870, 874, 879, 881, 885, 897, 898, 903, 913, 915, 917, 926, 946, 971, 977, 1066, 1073, 1135, 1188, 1313, 1314, 1322, 1323, 1324, 1357, 1374, 1379], "do_polars_oper": 30, "do_someth": 154, "do_various_th": 208, "doc": [40, 43, 44, 134, 155, 158, 160, 177, 179, 210, 211, 222, 357, 979, 980], "document": [33, 103, 152, 155, 210, 357, 361, 485, 488, 715, 735, 737, 738, 742, 848, 946, 979, 1107, 1110, 1307, 1327, 1329, 1330, 1334], "doe": [11, 38, 40, 49, 50, 51, 52, 58, 64, 65, 121, 133, 135, 136, 137, 139, 140, 152, 153, 154, 155, 156, 157, 161, 162, 167, 168, 171, 173, 214, 219, 234, 241, 246, 247, 259, 260, 266, 285, 290, 291, 292, 322, 331, 334, 357, 360, 361, 499, 514, 518, 527, 590, 699, 709, 711, 723, 731, 732, 761, 848, 852, 867, 873, 874, 875, 879, 885, 889, 893, 897, 903, 904, 913, 916, 926, 934, 940, 944, 971, 1056, 1121, 1135, 1139, 1151, 1279, 1291, 1301, 1303, 1315, 1374, 1379, 1397], "doesn": [40, 152, 167, 246, 261, 357, 501, 852, 893, 898, 971, 1124, 1374], "dog": [698, 741, 744, 781, 1290, 1333, 1336], "doi": 1398, "dollar": [721, 722, 1313, 1314], "domain": [1, 707, 1299], "don": [66, 246, 261, 265, 322, 325, 357, 447, 562, 599, 640, 852, 893, 898, 934, 971, 977, 1066, 1188, 1224, 1374], "done": [49, 50, 51, 52, 64, 65, 132, 153, 173, 208, 215, 261, 357, 373, 374, 640, 852, 868, 871, 874, 875, 885, 898, 913, 971, 987, 1374], "dot": [58, 614, 848, 852, 915, 926, 971, 1374], "doubl": [316, 357, 721, 722, 1313, 1314], "dow": 1398, "down": [167, 170, 171, 172, 173, 217, 357, 429, 517, 852, 1142, 1374], "downcast": 56, "download": [162, 167, 170, 171, 614, 926, 971], "downstream": [315, 357, 684, 852, 1275, 1374], "dr": 169, "drago": [712, 1304], "dragon": 712, "dragonfr": 1304, "dragonfruit": [712, 725, 736, 1304, 1317, 1328], "dramat": 157, "draw": [21, 26, 184, 188, 1405], "drawback": 848, "drawfn": 1405, "drawing_charact": 21, "dremio": 154, "driver": [39, 154, 155, 357], "drop": [1, 136, 227, 228, 229, 265, 285, 322, 357, 451, 453, 454, 560, 561, 647, 852, 882, 883, 916, 934, 971, 1069, 1071, 1072, 1186, 1187, 1245, 1374, 1401], "drop_dupl": [322, 357, 934, 971], "drop_empty_col": [157, 163], "drop_empty_row": [157, 163], "drop_first": [312, 357, 1349, 1374], "drop_in_plac": 357, "drop_nan": [229, 357, 454, 852, 883, 971, 1072, 1374], "drop_nul": [228, 312, 357, 453, 852, 882, 971, 1071, 1349, 1374], "dset": 173, "dst": [483, 496, 1105, 1118], "dst_offset": [456, 1074], "dt": [1, 41, 58, 157, 163, 289, 357, 660, 796, 852, 861, 919, 971, 977, 1382, 1397, 1398], "dt1": 1397, "dt2": 1397, "dtm": [41, 357, 459, 488, 977, 1077, 1110, 1397], "dtm_iso": 488, "dtm_iso_strict": 488, "dtype": [11, 41, 56, 57, 61, 67, 73, 77, 89, 98, 100, 110, 133, 135, 137, 139, 140, 152, 153, 154, 155, 157, 161, 162, 163, 167, 171, 174, 181, 182, 183, 184, 188, 210, 212, 217, 220, 232, 246, 261, 289, 313, 314, 315, 316, 319, 325, 334, 357, 415, 429, 430, 431, 432, 433, 434, 445, 446, 488, 499, 508, 521, 557, 565, 596, 598, 599, 606, 645, 652, 653, 660, 686, 688, 714, 735, 740, 752, 756, 762, 772, 779, 786, 787, 798, 800, 802, 806, 807, 809, 810, 811, 812, 813, 814, 824, 826, 827, 834, 843, 852, 871, 876, 893, 898, 919, 944, 971, 976, 977, 979, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1028, 1042, 1043, 1044, 1046, 1047, 1048, 1054, 1064, 1065, 1068, 1069, 1110, 1121, 1128, 1161, 1179, 1180, 1183, 1191, 1215, 1222, 1224, 1243, 1251, 1255, 1278, 1281, 1306, 1327, 1332, 1344, 1351, 1352, 1354, 1355, 1356, 1357, 1362, 1374, 1402, 1405], "dtype_format": [41, 357], "dtype_of": 362, "dtypekind": 212, "dtypelik": [210, 979], "dtypeoper": [1, 61], "dubiou": 103, "duckdb": 140, "due": [246, 261, 289, 292, 327, 357, 369, 464, 478, 483, 496, 623, 624, 626, 628, 630, 631, 660, 664, 666, 668, 670, 672, 675, 677, 679, 777, 791, 792, 794, 795, 839, 840, 852, 871, 893, 898, 919, 971, 1082, 1100, 1105, 1118], "dummi": [312, 357, 1349, 1374], "dump": 148, "duplic": [58, 108, 253, 260, 261, 262, 322, 326, 357, 369, 537, 623, 647, 842, 852, 897, 898, 899, 934, 937, 971, 1160, 1245, 1374, 1403], "duplicateerror": [647, 852, 1245, 1374], "dur": [262, 357, 899, 971], "durat": [208, 261, 327, 357, 456, 464, 488, 489, 490, 491, 492, 493, 494, 495, 499, 505, 756, 791, 792, 794, 795, 839, 840, 852, 898, 971, 976, 977, 1074, 1082, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1130, 1354, 1356, 1374], "dure": [49, 50, 51, 52, 57, 64, 65, 107, 132, 152, 153, 167, 172, 208, 234, 357, 865, 874, 875, 885, 913, 945, 971, 1135, 1374], "dutch": [455, 467, 777, 1073, 1085], "dynam": [149, 246, 357, 407, 590, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 852, 893, 971, 975, 1020, 1216], "dynamicgroupbi": [246, 357], "e": [11, 34, 36, 38, 40, 43, 44, 47, 49, 148, 152, 158, 160, 164, 166, 170, 172, 173, 186, 225, 237, 244, 248, 257, 261, 264, 308, 309, 315, 325, 357, 367, 450, 501, 505, 508, 535, 536, 593, 599, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 686, 691, 710, 731, 732, 743, 798, 814, 831, 842, 852, 880, 889, 898, 901, 917, 971, 975, 977, 1124, 1130, 1158, 1284, 1302, 1335, 1374, 1392, 1397, 1405], "e101": [41, 357], "e_filt": [610, 612], "e_sum_ov": [610, 612], "e_sum_slic": [610, 612], "each": [38, 41, 49, 53, 54, 55, 58, 67, 74, 85, 153, 154, 157, 162, 171, 177, 178, 179, 180, 182, 221, 223, 230, 237, 244, 245, 246, 259, 261, 265, 279, 281, 285, 289, 291, 293, 314, 319, 323, 326, 327, 335, 336, 338, 340, 342, 343, 351, 357, 383, 428, 432, 433, 448, 467, 483, 496, 514, 539, 542, 568, 571, 578, 588, 595, 599, 647, 650, 658, 659, 667, 671, 682, 687, 694, 707, 711, 712, 716, 717, 725, 727, 728, 736, 743, 758, 772, 775, 781, 806, 807, 811, 834, 842, 852, 874, 877, 878, 884, 889, 893, 898, 913, 916, 919, 935, 937, 947, 949, 951, 953, 954, 962, 971, 996, 1046, 1047, 1053, 1067, 1085, 1105, 1118, 1163, 1166, 1194, 1197, 1204, 1214, 1245, 1247, 1256, 1257, 1271, 1280, 1299, 1303, 1304, 1308, 1309, 1317, 1319, 1320, 1328, 1335, 1343, 1374, 1391, 1397, 1402, 1403, 1405], "eager": [97, 246, 261, 281, 325, 357, 457, 460, 463, 465, 475, 476, 478, 479, 482, 483, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 664, 666, 668, 670, 672, 675, 677, 679, 772, 776, 778, 782, 784, 791, 792, 794, 795, 802, 806, 807, 810, 811, 824, 827, 830, 831, 834, 839, 840, 843, 851, 852, 893, 898, 903, 971, 976, 1074, 1075, 1078, 1081, 1082, 1083, 1084, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1402], "eager_execut": 1402, "eagerli": [590, 1383], "ear": [725, 736, 1317], "earlier": [261, 357, 898, 971], "earliest": [246, 357, 481, 482, 735, 738, 793, 893, 963, 971, 1103, 1104, 1327, 1330], "easi": 208, "easiest": 213, "easili": [58, 295, 319, 331, 336, 357, 834, 848, 921, 940, 947, 971], "east": [76, 172, 262, 357, 899, 971], "ebf1d": [41, 357], "ed": [262, 357, 899, 971], "edg": [529, 852, 1153, 1374], "eee": [1, 41, 357, 977], "ef": 722, "effect": [41, 49, 50, 51, 52, 56, 239, 246, 357, 464, 518, 599, 625, 627, 629, 782, 852, 893, 943, 944, 971, 1074, 1082], "effici": [134, 154, 257, 259, 357, 867], "efgh": 1397, "eg": [18, 26, 27, 41, 66, 155, 208, 314, 357, 735, 738, 759, 852, 977, 1327, 1330], "egnaro": 1397, "either": [64, 65, 89, 149, 184, 256, 260, 261, 262, 279, 289, 290, 314, 315, 357, 505, 598, 645, 647, 660, 683, 735, 767, 775, 779, 834, 852, 874, 875, 897, 898, 899, 901, 919, 971, 975, 977, 1130, 1243, 1245, 1273, 1327, 1374, 1387, 1405], "element": [14, 15, 26, 179, 180, 183, 184, 186, 188, 213, 214, 216, 223, 256, 281, 290, 303, 305, 320, 328, 357, 375, 376, 377, 378, 379, 380, 391, 392, 427, 428, 435, 438, 439, 440, 441, 443, 444, 445, 446, 447, 453, 454, 509, 510, 514, 527, 531, 540, 551, 553, 554, 559, 561, 562, 563, 566, 571, 579, 580, 581, 582, 586, 587, 592, 594, 595, 599, 640, 641, 650, 653, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 683, 688, 689, 690, 694, 695, 696, 727, 728, 739, 754, 755, 757, 758, 764, 775, 784, 810, 828, 829, 833, 841, 852, 869, 878, 928, 930, 933, 938, 971, 988, 989, 990, 991, 992, 993, 999, 1000, 1004, 1005, 1018, 1040, 1041, 1051, 1054, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1071, 1072, 1133, 1134, 1139, 1140, 1152, 1155, 1164, 1173, 1175, 1177, 1178, 1179, 1180, 1185, 1187, 1188, 1189, 1192, 1197, 1205, 1206, 1207, 1208, 1213, 1220, 1221, 1224, 1240, 1247, 1251, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1273, 1281, 1282, 1283, 1287, 1288, 1319, 1320, 1331, 1345, 1346, 1347, 1351, 1358, 1359, 1360, 1364, 1374, 1391, 1392], "elementwis": [598, 640, 662, 663, 665, 667, 669, 671, 674, 676, 678, 852, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1374], "elig": [903, 971], "elimin": [64, 132, 548, 852, 1174, 1374], "elis": [273, 357, 909, 971], "ellips": 21, "ellipsi": [244, 357], "elppa": 1397, "els": [153, 1244, 1344, 1374], "email": [707, 1299], "email_part": [707, 1299], "emphas": [357, 361], "emploi": 977, "empti": [14, 36, 38, 49, 112, 136, 152, 153, 157, 163, 165, 167, 218, 219, 246, 272, 324, 357, 646, 697, 705, 752, 812, 830, 835, 852, 872, 873, 893, 908, 936, 971, 976, 977, 1054, 1056, 1140, 1161, 1175, 1244, 1289, 1297, 1344, 1374], "en": [21, 41, 357], "enabl": [29, 30, 47, 52, 57, 64, 65, 98, 100, 156, 164, 168, 170, 177, 178, 179, 180, 192, 210, 316, 357, 370, 372, 654, 655, 684, 699, 709, 711, 723, 763, 848, 852, 874, 875, 885, 913, 926, 971, 979, 984, 985, 1252, 1253, 1275, 1291, 1301, 1303, 1315, 1355, 1363, 1374], "enable_string_cach": 98, "encapsul": [38, 49, 357, 971], "enclos": [520, 852], "encod": [70, 76, 88, 148, 152, 153, 167, 312, 357, 360, 412, 520, 658, 701, 747, 852, 1025, 1256, 1293, 1349, 1374, 1379], "encompass": [529, 852, 1153, 1374], "encount": [56, 123, 152, 153, 167, 172, 246, 357, 632, 633, 714, 715, 782, 786, 800, 852, 893, 971, 1233, 1234, 1306, 1307, 1374], "end": [38, 41, 49, 152, 153, 167, 246, 252, 281, 357, 411, 414, 417, 430, 434, 456, 483, 508, 533, 534, 584, 698, 703, 707, 712, 719, 725, 729, 730, 731, 734, 772, 777, 790, 791, 792, 793, 794, 795, 798, 806, 807, 810, 811, 839, 840, 842, 848, 852, 893, 896, 913, 971, 977, 1027, 1043, 1048, 1074, 1105, 1156, 1157, 1171, 1210, 1295, 1299, 1304, 1311, 1317, 1321, 1322, 1323, 1328, 1374, 1397], "endian": [415, 1028], "endpoint": [193, 448, 647, 810, 852, 1067, 1245, 1374], "ends_a": 1397, "ends_in_digit": 1397, "ends_with": [411, 417, 434, 698, 729, 977, 1048, 1321, 1395], "ends_with_expr": 414, "ends_with_lit": 414, "engin": [10, 15, 39, 49, 50, 51, 52, 64, 65, 97, 147, 154, 155, 157, 163, 190, 245, 260, 265, 315, 322, 343, 357, 598, 831, 852, 874, 875, 885, 892, 897, 903, 908, 913, 926, 934, 946, 954, 968, 971, 975, 1224, 1354, 1374, 1386, 1402], "engine_opt": [39, 157, 357], "enginetyp": [49, 50, 51, 52, 64, 65, 874, 875, 885, 913, 926, 971], "enough": [562, 691, 852, 1188, 1284, 1374], "ensur": [11, 41, 53, 55, 97, 149, 155, 183, 186, 210, 237, 245, 266, 279, 281, 285, 290, 315, 357, 535, 598, 852, 889, 892, 903, 904, 916, 946, 971, 977, 979, 1354, 1374], "enter": 208, "entir": [41, 157, 163, 357], "entri": [208, 357, 971, 976, 1402], "entropi": [852, 1374], "enum": 977, "enumer": [76, 138, 152, 153, 157, 163, 167, 259, 357], "env": [4, 189], "env_onli": 31, "environ": [4, 31, 38, 43, 47, 49, 50, 51, 52, 64, 65, 149, 162, 164, 167, 170, 171, 172, 187, 190, 193, 198, 314, 357, 874, 875, 885, 913, 926, 971], "eol_char": [152, 153, 167], "eparg": 1397, "epoch": [72, 73, 496, 802, 1118, 1398], "epoch_": [465, 1083], "epoch_n": [465, 1083], "epochtimeunit": [465, 802, 1083], "eq": [237, 285, 357, 503, 514, 852, 889, 916, 971, 1126, 1374], "eq_miss": [852, 1236, 1374], "equal": [57, 100, 152, 153, 167, 177, 178, 179, 180, 246, 261, 262, 273, 303, 357, 448, 496, 502, 503, 523, 536, 550, 590, 635, 647, 653, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 694, 719, 720, 723, 745, 775, 810, 828, 829, 842, 848, 852, 889, 893, 898, 899, 909, 916, 928, 971, 1067, 1105, 1126, 1159, 1216, 1236, 1245, 1251, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1311, 1312, 1315, 1337, 1374, 1391, 1394, 1405], "equiprob": [224, 283, 349, 357, 648, 671, 672, 825, 852, 879, 914, 960, 971, 1068, 1246, 1264, 1374], "equival": [41, 66, 133, 135, 136, 137, 139, 161, 162, 171, 246, 256, 277, 357, 367, 371, 433, 502, 503, 505, 518, 523, 525, 550, 597, 619, 621, 634, 635, 636, 639, 645, 717, 741, 743, 744, 751, 759, 766, 852, 893, 971, 1047, 1125, 1126, 1130, 1146, 1148, 1173, 1176, 1223, 1235, 1236, 1309, 1333, 1335, 1336, 1374, 1384, 1392, 1404], "err": 708, "error": [15, 40, 56, 65, 66, 97, 118, 122, 124, 135, 136, 139, 147, 152, 153, 157, 164, 167, 172, 261, 266, 281, 290, 315, 357, 369, 394, 395, 412, 455, 565, 567, 569, 590, 623, 655, 698, 701, 706, 708, 710, 714, 715, 735, 737, 738, 742, 852, 871, 875, 898, 904, 946, 954, 971, 1007, 1008, 1025, 1073, 1191, 1193, 1195, 1253, 1290, 1293, 1298, 1300, 1302, 1306, 1307, 1327, 1329, 1330, 1334, 1354, 1374, 1400], "escap": [101, 152, 153, 155, 167, 704, 721, 722, 1296, 1313, 1314], "esp": 15, "especi": [182, 659, 852, 971, 1257, 1374], "espresso": 977, "est": 794, "establish": [154, 208], "estim": [152, 153, 215, 232, 357, 374, 506, 507, 548, 771, 852, 868, 971, 987, 1128, 1131, 1132, 1174, 1374], "estimated_s": [357, 1374], "etc": [22, 40, 41, 149, 152, 156, 157, 158, 160, 168, 169, 357, 852, 977, 1272, 1274, 1374, 1398], "eu": [168, 169], "eur": [244, 357, 1405], "europ": [460, 464, 482, 1078, 1082, 1104], "eval": [313, 357, 599, 797, 852, 1224, 1351, 1374], "evalu": [49, 50, 51, 52, 99, 172, 235, 237, 261, 285, 357, 371, 384, 386, 387, 419, 420, 421, 422, 424, 425, 447, 514, 532, 553, 554, 590, 639, 640, 767, 769, 772, 776, 778, 782, 784, 791, 792, 794, 795, 797, 806, 807, 810, 811, 824, 827, 830, 834, 839, 840, 842, 843, 852, 874, 889, 895, 897, 898, 916, 971, 997, 999, 1000, 1032, 1033, 1034, 1035, 1037, 1038, 1066, 1139, 1179, 1180, 1365, 1374, 1394], "even": [38, 49, 152, 260, 357, 505, 644, 647, 680, 797, 852, 897, 971, 977, 1130, 1245, 1269, 1374], "evenli": [246, 357, 810, 811, 893, 971], "event": [65, 875, 971], "eventu": [39, 357], "ever": [640, 852], "everi": [15, 38, 49, 152, 153, 157, 163, 167, 240, 246, 311, 327, 357, 386, 387, 388, 389, 392, 394, 400, 443, 444, 445, 446, 447, 483, 496, 510, 522, 555, 556, 560, 563, 566, 567, 568, 576, 579, 584, 588, 659, 705, 786, 787, 852, 891, 893, 971, 999, 1000, 1001, 1002, 1005, 1007, 1013, 1062, 1063, 1064, 1065, 1066, 1105, 1118, 1134, 1145, 1181, 1182, 1186, 1189, 1192, 1193, 1194, 1202, 1205, 1210, 1214, 1257, 1297, 1374], "everybodi": [699, 723, 1291, 1315], "everyth": 977, "evolv": [266, 357, 904, 971], "ew": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "ewm_mean": [852, 1374], "ewm_mean_bi": [852, 1374], "ewm_std": [852, 1374], "ewm_var": [852, 1374], "ewma": [505, 852, 1130, 1374], "exact": [179, 182, 184, 188, 261, 301, 357, 374, 518, 705, 733, 734, 735, 737, 738, 759, 852, 898, 971, 1297, 1327, 1329, 1330], "exactli": [135, 136, 139, 177, 178, 179, 180, 183, 184, 188, 266, 357, 727, 728, 733, 734, 796, 904, 971, 1279, 1319, 1320, 1325, 1326, 1374], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 100, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 152, 153, 154, 155, 156, 157, 161, 162, 163, 167, 168, 169, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 864, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374, 1379, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1403, 1404], "exc_tb": 1402, "exc_typ": 1402, "exc_val": 1402, "exce": [244, 357], "excel": [37, 41, 151, 157, 357, 864], "excelspreadsheetengin": 157, "except": [0, 226, 241, 246, 248, 261, 264, 266, 286, 308, 357, 655, 712, 736, 798, 852, 864, 881, 893, 898, 904, 917, 971, 977, 1042, 1152, 1178, 1253, 1304, 1328, 1345, 1354, 1374, 1401], "exclud": [184, 188, 246, 357, 428, 443, 446, 455, 467, 535, 606, 758, 777, 848, 852, 893, 971, 977, 1073, 1085, 1158, 1374], "excluded_dtyp": [184, 185, 188], "exclus": [290, 357, 766, 772, 806, 807, 852], "execut": [10, 40, 49, 50, 51, 52, 57, 64, 65, 66, 97, 149, 154, 155, 263, 304, 357, 450, 562, 763, 831, 842, 852, 870, 874, 875, 880, 885, 903, 913, 915, 926, 929, 946, 971, 1188, 1363, 1374, 1384, 1385, 1386, 1388, 1402, 1404], "execute_glob": 1402, "execute_opt": [154, 155], "exist": [1, 39, 40, 41, 42, 58, 76, 108, 156, 164, 168, 172, 184, 226, 241, 281, 286, 321, 326, 331, 332, 357, 369, 411, 414, 417, 459, 482, 721, 722, 780, 852, 877, 881, 884, 917, 920, 937, 939, 940, 941, 971, 977, 1077, 1104, 1313, 1314, 1404], "existing_t": 1404, "existing_table_path": [40, 357], "exit": [57, 98, 208, 1389, 1402], "exp": [504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374, 1395], "exp_a": 1396, "expand": [149, 152, 164, 167, 172, 510, 604, 608, 653, 749, 852, 977, 1134, 1251, 1374], "expand_selector": 977, "expans": 746, "expect": [38, 40, 43, 47, 49, 50, 51, 52, 55, 74, 80, 113, 121, 129, 152, 154, 156, 162, 164, 167, 168, 170, 171, 172, 178, 180, 198, 214, 357, 590, 812, 901, 903, 971], "expens": [152, 153, 162, 164, 167, 171, 172, 187, 189, 258, 265, 290, 291, 292, 321, 322, 357, 599, 852, 877, 879, 884, 920, 934, 939, 971, 1135, 1224, 1374, 1405], "experiment": [47, 52, 165, 262, 319, 357, 810, 811, 899, 971], "expiri": [38, 40, 43, 47, 49, 50, 51, 52, 156, 162, 164, 167, 168, 170, 171, 172, 198, 357, 971], "explain": [132, 213, 263, 357, 874, 971, 1401], "explainformat": [885, 971], "explicit": [41, 107, 154, 167, 182, 304, 326, 357, 488, 826, 929, 937, 971, 1110], "explicitli": [76, 107, 155, 182, 184, 208, 241, 260, 357, 654, 834, 852, 863, 897, 971, 1402], "explod": [149, 357, 428, 516, 599, 640, 656, 758, 852, 971, 1254, 1374, 1392], "explor": [224, 357, 879, 971], "expon": [645, 852, 1243, 1374, 1396], "exponenti": [504, 505, 506, 507, 509, 645, 852, 1129, 1130, 1131, 1132, 1133, 1374, 1396], "export": [41, 43, 44, 50, 211, 258, 259, 291, 292, 309, 311, 314, 357, 848, 971, 977, 980, 1348, 1374], "expos": 864, "expr": [1, 53, 54, 55, 58, 59, 60, 61, 62, 99, 147, 149, 235, 236, 251, 260, 261, 262, 266, 277, 281, 290, 295, 296, 314, 319, 331, 332, 357, 362, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 852, 853, 854, 857, 858, 859, 860, 861, 887, 888, 897, 898, 899, 904, 914, 921, 922, 940, 941, 971, 977, 1066, 1125, 1126, 1130, 1137, 1138, 1144, 1146, 1148, 1176, 1188, 1194, 1210, 1214, 1223, 1235, 1236, 1251, 1290, 1295, 1302, 1321, 1374, 1400], "expr1": [1394, 1402], "expr2": [1394, 1402], "expr_unique_subset": [277, 357], "express": [0, 8, 53, 54, 55, 64, 99, 147, 149, 181, 184, 188, 216, 233, 235, 237, 245, 251, 260, 261, 262, 265, 266, 277, 281, 285, 290, 295, 296, 300, 303, 314, 319, 320, 331, 332, 334, 336, 343, 357, 367, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 383, 384, 388, 389, 390, 391, 392, 395, 406, 411, 412, 413, 414, 415, 416, 417, 428, 430, 432, 433, 434, 437, 438, 439, 440, 441, 447, 448, 449, 450, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 505, 508, 510, 511, 513, 514, 518, 520, 521, 523, 524, 525, 526, 532, 535, 536, 537, 538, 539, 540, 541, 542, 550, 551, 555, 556, 558, 559, 562, 563, 569, 571, 589, 590, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 617, 619, 621, 623, 624, 626, 628, 630, 631, 634, 635, 637, 639, 640, 644, 645, 646, 647, 649, 653, 654, 655, 656, 658, 659, 682, 683, 684, 687, 689, 690, 692, 694, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 719, 721, 722, 723, 725, 726, 727, 728, 736, 740, 750, 751, 754, 755, 758, 759, 760, 762, 763, 765, 766, 767, 768, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 821, 824, 826, 827, 828, 829, 830, 832, 834, 836, 838, 839, 840, 842, 843, 848, 851, 864, 869, 874, 885, 886, 889, 892, 897, 898, 899, 904, 913, 916, 921, 922, 925, 926, 928, 933, 940, 941, 942, 944, 947, 954, 971, 977, 1004, 1041, 1055, 1066, 1073, 1077, 1110, 1125, 1126, 1130, 1136, 1146, 1148, 1158, 1176, 1185, 1188, 1223, 1224, 1235, 1236, 1251, 1252, 1253, 1273, 1277, 1290, 1291, 1292, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1313, 1314, 1315, 1328, 1332, 1359, 1374, 1392, 1394, 1396, 1397, 1401], "exprmetanamespac": [603, 609], "ext": [53, 54, 55, 154], "extend": [0, 136, 329, 357, 511, 852, 864, 975, 986, 1136, 1374], "extend_const": [852, 1374], "extens": [316, 357, 1355, 1374], "extern": [205, 942, 971], "external_shallow_clon": 205, "extra": [40, 56, 149, 152, 153, 156, 158, 160, 164, 167, 168, 169, 172, 234, 246, 266, 357, 852, 893, 904, 971, 1135, 1374], "extra_column": [172, 266, 357, 904, 971], "extra_struct_field": [56, 266, 357, 904, 971], "extract": [140, 213, 304, 357, 458, 461, 463, 466, 469, 470, 471, 472, 473, 474, 477, 479, 480, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 644, 707, 708, 709, 714, 715, 725, 727, 852, 1076, 1079, 1080, 1081, 1084, 1087, 1091, 1092, 1093, 1095, 1096, 1099, 1101, 1102, 1106, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1119, 1120, 1122, 1299, 1300, 1301, 1306, 1307, 1317, 1395], "extract_mani": [711, 1303], "extract_numb": [644, 852], "extracted_nr": 707, "extrem": [511, 662, 852, 1136, 1259, 1374], "extrema": [686, 852, 1278, 1374], "f": [53, 59, 153, 154, 237, 244, 259, 309, 315, 321, 325, 357, 367, 407, 416, 590, 686, 705, 735, 738, 780, 852, 889, 971, 977, 1020, 1216, 1297, 1327, 1330, 1374, 1379, 1392], "f32": [1, 61, 217, 304, 313, 319, 357, 686, 831, 852, 871, 929, 971, 977, 1222, 1374, 1400], "f4": [315, 357], "f5ed2452": [41, 357], "f64": [7, 9, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 58, 60, 62, 66, 85, 97, 134, 136, 161, 173, 181, 184, 217, 218, 219, 222, 224, 225, 226, 228, 230, 235, 236, 239, 243, 244, 245, 246, 251, 252, 260, 261, 266, 268, 269, 270, 271, 275, 281, 282, 283, 302, 303, 305, 307, 319, 328, 331, 336, 339, 341, 344, 345, 346, 347, 349, 350, 357, 366, 369, 375, 376, 377, 378, 379, 380, 398, 404, 409, 416, 429, 435, 436, 438, 439, 440, 448, 449, 453, 454, 484, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 517, 518, 523, 525, 533, 534, 536, 543, 544, 545, 546, 548, 550, 562, 573, 574, 586, 592, 593, 594, 595, 597, 600, 601, 602, 618, 621, 623, 632, 633, 634, 635, 641, 645, 647, 648, 649, 650, 654, 655, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 688, 689, 690, 691, 695, 696, 750, 754, 755, 759, 763, 764, 773, 774, 778, 780, 782, 784, 797, 798, 810, 811, 814, 817, 818, 819, 831, 833, 841, 848, 852, 871, 872, 879, 881, 882, 887, 888, 892, 893, 896, 897, 898, 904, 906, 907, 914, 928, 930, 938, 940, 942, 947, 950, 952, 955, 956, 957, 958, 960, 961, 971, 977, 988, 989, 990, 991, 992, 993, 1011, 1017, 1022, 1029, 1051, 1052, 1057, 1058, 1059, 1067, 1068, 1071, 1072, 1106, 1129, 1130, 1131, 1132, 1133, 1137, 1142, 1153, 1156, 1157, 1188, 1199, 1200, 1212, 1218, 1219, 1220, 1221, 1240, 1243, 1245, 1247, 1253, 1258, 1259, 1261, 1262, 1264, 1265, 1266, 1268, 1269, 1270, 1281, 1282, 1283, 1287, 1346, 1347, 1362, 1363, 1374, 1383, 1391, 1392, 1396, 1399, 1402, 1405], "f64_awai": [680, 852], "f64_to_even": [680, 852], "f_string": 801, "fa1e": [740, 1332], "face": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 198, 357, 971], "facil": 154, "facilit": [220, 357], "factor": [504, 506, 507, 756, 852, 1129, 1131, 1132, 1356, 1374], "fail": [38, 39, 40, 43, 47, 49, 50, 51, 52, 134, 156, 158, 162, 164, 167, 168, 170, 171, 172, 198, 212, 315, 322, 357, 384, 486, 590, 735, 737, 738, 742, 852, 934, 971, 1224, 1327, 1329, 1330, 1334, 1354, 1374, 1400], "fall": [172, 448, 647, 852, 874, 885, 913, 926, 946, 971, 1067, 1245, 1374, 1391], "fallback": [134, 157], "fals": [5, 7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 33, 38, 40, 41, 47, 49, 50, 51, 52, 53, 56, 58, 64, 65, 66, 134, 135, 136, 138, 139, 140, 147, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 212, 216, 217, 218, 219, 224, 231, 237, 239, 243, 244, 245, 246, 250, 253, 254, 255, 258, 260, 261, 263, 269, 270, 276, 277, 279, 281, 282, 285, 290, 291, 292, 293, 298, 301, 303, 304, 307, 310, 312, 315, 316, 320, 321, 322, 326, 327, 329, 331, 339, 341, 344, 345, 347, 350, 357, 370, 371, 372, 383, 386, 387, 390, 394, 395, 403, 408, 411, 414, 417, 428, 429, 430, 434, 442, 443, 444, 445, 446, 448, 455, 467, 468, 484, 501, 502, 503, 504, 506, 507, 525, 526, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 558, 562, 565, 567, 569, 578, 585, 590, 591, 597, 598, 599, 603, 605, 606, 607, 609, 611, 614, 615, 634, 635, 637, 639, 640, 642, 643, 647, 650, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 682, 683, 684, 686, 691, 693, 694, 697, 698, 699, 700, 703, 709, 710, 711, 713, 714, 721, 722, 723, 726, 727, 729, 735, 737, 738, 740, 758, 760, 763, 766, 767, 768, 769, 770, 772, 775, 776, 777, 778, 781, 782, 784, 785, 786, 787, 791, 792, 794, 795, 800, 806, 807, 810, 811, 812, 814, 818, 824, 826, 827, 830, 831, 834, 836, 839, 840, 842, 843, 852, 869, 871, 872, 873, 874, 875, 879, 885, 889, 892, 893, 897, 898, 901, 903, 913, 916, 924, 926, 928, 929, 933, 934, 937, 940, 946, 950, 952, 955, 956, 958, 961, 971, 976, 977, 984, 985, 996, 999, 1000, 1003, 1007, 1008, 1016, 1021, 1024, 1025, 1027, 1030, 1041, 1042, 1043, 1045, 1048, 1053, 1054, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1085, 1086, 1106, 1126, 1127, 1129, 1131, 1132, 1139, 1141, 1147, 1149, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1179, 1180, 1184, 1188, 1191, 1193, 1195, 1204, 1211, 1217, 1230, 1236, 1238, 1241, 1242, 1245, 1247, 1248, 1249, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1273, 1275, 1279, 1284, 1286, 1289, 1290, 1291, 1292, 1295, 1301, 1302, 1303, 1305, 1306, 1313, 1314, 1315, 1318, 1319, 1321, 1327, 1329, 1330, 1332, 1349, 1354, 1355, 1359, 1360, 1363, 1365, 1374, 1384, 1386, 1392, 1397, 1402], "far": [41, 357], "fashion": [260, 357], "fast": [47, 50, 52, 149, 187, 189, 357, 511, 684, 852, 971, 975, 1136, 1275, 1374, 1405], "fast_executemani": [39, 357], "fast_project": 945, "faster": [49, 50, 51, 52, 64, 154, 157, 234, 315, 325, 357, 599, 761, 852, 874, 885, 913, 926, 971, 1135, 1224, 1374], "fastexcel": [157, 176], "favor": [39, 172, 357], "fay": 148, "feat1": [314, 319, 357], "feat2": [314, 319, 357], "feather": [43, 158, 170, 357, 864], "featur": [1, 47, 63, 74, 80, 169, 314, 319, 357], "feature_0": [942, 971], "feature_0_train": [942, 971], "feature_1": [942, 971], "feature_nam": [319, 357], "feb": [176, 1397], "februari": 1397, "fed": 731, "feel": [699, 723, 1291, 1315], "fetch": [142, 874, 971], "fetch_california_h": [319, 357], "few": [244, 357], "fewer": [712, 736, 971, 1304, 1328], "ff": 1391, "ff00": [740, 1332], "fff": 1, "ffff00": [412, 413, 701, 1025, 1026, 1293], "ffffff": [41, 357], "ffi": [232, 357, 1128, 1374], "fgg": 977, "fghi": 1397, "fh": 153, "fiction": 1383, "field": [37, 38, 40, 49, 52, 56, 89, 125, 128, 136, 143, 266, 323, 357, 407, 590, 598, 599, 625, 627, 629, 658, 707, 708, 714, 727, 728, 748, 749, 750, 756, 763, 786, 787, 813, 834, 842, 852, 904, 935, 971, 1020, 1216, 1224, 1256, 1300, 1319, 1320, 1341, 1343, 1356, 1374, 1398], "field_0": [407, 590, 1020, 1216], "field_1": [407, 590, 1020, 1216], "field_2": [1020, 1216], "field_id": 143, "field_n": [407, 590, 1020, 1216], "field_nam": [599, 852, 1224, 1374], "field_overwrit": [52, 143, 971], "fiftyf": [531, 852], "figsiz": [614, 913, 926, 971], "figur": [614, 681, 852, 926, 971, 1270, 1374], "file": [2, 3, 5, 6, 33, 36, 37, 38, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 234, 297, 357, 450, 520, 613, 617, 852, 880, 923, 971, 975, 1135, 1374], "file_cache_ttl": [162, 167, 170, 171], "file_idx": [54, 144, 146], "file_path": [53, 54, 55, 144, 146], "filenam": 158, "filesourc": [157, 163, 164, 172], "filesystem": [40, 156, 168, 169, 357], "fill": [58, 66, 218, 235, 236, 300, 325, 357, 361, 410, 443, 446, 512, 513, 519, 533, 534, 663, 665, 667, 669, 671, 674, 676, 678, 685, 801, 824, 827, 843, 852, 887, 888, 925, 942, 971, 1023, 1137, 1138, 1143, 1157, 1237, 1260, 1261, 1263, 1266, 1267, 1268, 1277, 1374], "fill_char": [719, 720, 1311, 1312], "fill_nan": [236, 357, 513, 852, 888, 971, 1138, 1374], "fill_nul": [58, 235, 327, 357, 410, 443, 446, 512, 519, 685, 852, 887, 942, 971, 1023, 1137, 1143, 1374], "fill_valu": [300, 325, 357, 685, 852, 925, 971, 1277, 1374], "fillnullstrategi": [236, 357, 513, 852, 888, 971, 1138, 1374], "film": 1383, "filter": [1, 59, 64, 97, 147, 167, 168, 172, 173, 228, 229, 253, 254, 255, 281, 285, 343, 357, 430, 434, 610, 612, 703, 729, 765, 790, 793, 797, 800, 830, 831, 842, 852, 867, 874, 882, 883, 885, 895, 913, 916, 926, 929, 954, 971, 977, 1274, 1374, 1390], "final": [14, 41, 58, 149, 172, 261, 263, 357, 504, 506, 507, 852, 879, 898, 971, 1129, 1131, 1132, 1374, 1403], "find": [66, 242, 357, 531, 683, 698, 699, 711, 852, 1155, 1273, 1291, 1303, 1313, 1374], "find_pat": 710, "fine": [874, 885, 913, 926, 968, 971], "finish": [53, 54, 55, 234, 357, 1135, 1374], "finish_callback": [53, 54, 55], "finit": [538, 759, 782, 852, 1162, 1374], "first": [47, 58, 152, 153, 157, 158, 160, 163, 164, 167, 172, 177, 178, 179, 180, 213, 244, 246, 248, 260, 261, 264, 265, 276, 280, 281, 289, 308, 312, 313, 321, 322, 327, 334, 340, 357, 383, 385, 394, 447, 451, 476, 478, 483, 499, 518, 528, 531, 539, 552, 560, 562, 567, 568, 590, 598, 599, 611, 620, 644, 645, 660, 683, 694, 698, 705, 706, 710, 712, 714, 715, 721, 722, 736, 743, 778, 779, 786, 800, 804, 842, 848, 852, 893, 894, 897, 898, 902, 912, 919, 934, 942, 944, 951, 971, 977, 996, 1007, 1066, 1068, 1069, 1098, 1100, 1105, 1121, 1152, 1155, 1163, 1178, 1186, 1188, 1193, 1194, 1216, 1224, 1273, 1286, 1297, 1298, 1300, 1302, 1304, 1306, 1307, 1313, 1314, 1328, 1335, 1345, 1349, 1351, 1354, 1374, 1394, 1395, 1397, 1403, 1405], "first_column": [41, 357], "first_non_nul": [590, 1216], "first_part": [727, 728, 1319, 1320], "fisher": [548, 661, 691, 852, 1174, 1258, 1284, 1374], "fit": [148, 258, 301, 325, 357, 686, 827, 852, 1278, 1279, 1374], "five": [318, 357, 1405], "fix": [11, 67, 76, 182, 499, 796, 811, 1121], "flag": [63, 156, 168, 181, 298, 315, 357, 684, 698, 706, 707, 710, 721, 722, 852, 885, 903, 924, 971, 977, 1275, 1290, 1298, 1299, 1302, 1313, 1314, 1354, 1374, 1397], "flat": [148, 292, 357, 563, 656, 852, 1189, 1254, 1374], "flat_from_polar": 143, "flatten": 852, "flavour": [41, 154, 357], "flight": 154, "flight_sql": 154, "flightsql": 154, "float": [11, 12, 38, 41, 49, 56, 78, 79, 152, 153, 167, 173, 177, 178, 179, 180, 181, 184, 188, 212, 224, 228, 232, 235, 261, 266, 283, 293, 314, 315, 349, 357, 436, 448, 453, 454, 484, 501, 502, 503, 504, 506, 507, 512, 517, 518, 523, 525, 533, 536, 538, 541, 543, 544, 545, 546, 550, 578, 593, 597, 600, 614, 618, 632, 633, 634, 635, 645, 647, 648, 662, 663, 665, 667, 669, 671, 672, 674, 676, 678, 680, 682, 688, 759, 825, 827, 852, 879, 882, 887, 898, 904, 914, 926, 960, 971, 977, 1042, 1052, 1067, 1068, 1070, 1071, 1072, 1106, 1124, 1128, 1129, 1131, 1132, 1137, 1142, 1153, 1159, 1174, 1204, 1219, 1233, 1234, 1243, 1244, 1245, 1246, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1271, 1274, 1281, 1284, 1288, 1344, 1354, 1364, 1374, 1402, 1405], "float16": [319, 357], "float32": [1, 11, 38, 49, 61, 217, 239, 266, 313, 314, 315, 319, 357, 505, 852, 871, 904, 971, 977, 1130, 1161, 1222, 1352, 1354, 1357, 1374], "float4": [304, 357, 831, 929, 971, 1400], "float64": [11, 38, 41, 49, 97, 136, 152, 161, 181, 184, 220, 230, 232, 239, 266, 294, 319, 331, 357, 375, 376, 377, 378, 379, 380, 416, 429, 438, 439, 440, 449, 484, 505, 508, 543, 544, 649, 689, 690, 754, 755, 798, 814, 824, 827, 843, 848, 852, 876, 884, 904, 920, 940, 971, 976, 977, 1106, 1130, 1355, 1362, 1374], "float_cast": [56, 266, 357, 904, 971], "float_list": 85, "float_precis": [9, 11, 28, 38, 41, 49, 357, 971], "float_scientif": [38, 49, 357, 971], "floatcastopt": 56, "floatfmt": 12, "floor": [60, 518, 852, 1374, 1395], "floor_a": 1396, "floordiv": [759, 852], "fmt": [12, 261, 357, 532, 801, 852, 895, 898, 971], "fmt_number": [357, 361], "fmt_str_length": [13, 791, 792, 794, 795], "fmt_table_cell_list_len": 14, "fmt_titl": [41, 357], "fn": [786, 787, 800, 826], "foggi": [721, 722, 1313, 1314], "fold": [357, 611, 778, 786, 787, 826, 842], "folder": 173, "follow": [41, 47, 63, 147, 152, 153, 154, 156, 157, 163, 167, 168, 169, 246, 261, 265, 280, 289, 315, 327, 357, 478, 483, 496, 505, 536, 644, 645, 650, 660, 664, 666, 668, 670, 672, 673, 675, 677, 679, 688, 748, 759, 774, 791, 792, 794, 795, 814, 839, 840, 842, 844, 845, 847, 852, 853, 854, 857, 859, 860, 861, 893, 898, 912, 919, 971, 977, 1100, 1105, 1118, 1130, 1159, 1243, 1247, 1272, 1274, 1281, 1354, 1366, 1368, 1370, 1374, 1375, 1380, 1381, 1382, 1400, 1405], "font": [41, 357], "font_color": [41, 357], "font_siz": [41, 357], "foo": [36, 38, 40, 43, 44, 45, 46, 47, 148, 161, 162, 217, 220, 221, 222, 226, 227, 228, 229, 230, 231, 234, 237, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 254, 260, 264, 265, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 285, 286, 287, 290, 293, 294, 295, 297, 299, 302, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 321, 322, 323, 328, 329, 330, 335, 357, 431, 448, 450, 478, 522, 528, 532, 552, 603, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 647, 656, 697, 700, 702, 705, 707, 708, 713, 724, 726, 728, 730, 731, 732, 733, 734, 741, 744, 753, 771, 782, 783, 784, 799, 803, 804, 805, 808, 809, 815, 817, 819, 820, 822, 823, 825, 830, 833, 837, 841, 842, 848, 852, 871, 876, 877, 881, 882, 883, 884, 889, 895, 896, 897, 911, 916, 917, 920, 921, 934, 935, 939, 942, 971, 976, 977, 1044, 1067, 1100, 1195, 1243, 1245, 1254, 1292, 1294, 1297, 1299, 1300, 1316, 1320, 1325, 1326, 1333, 1336, 1374, 1388, 1390, 1391, 1392, 1394, 1397, 1400], "foo1": 1397, "foo11": [239, 357], "foo_": [608, 726, 801], "foo_1": [312, 357], "foo_2": [312, 357], "foo_3_4": 1397, "foo_a": [281, 357], "foo_a_bar_1": 801, "foo_at_1": 1392, "foo_b": [281, 357], "foo_b_bar_2": 801, "foo_bar": [603, 609, 726, 812, 1388], "foo_bar2": [603, 609], "foo_bar_baz": 726, "foo_c_bar_3": 801, "foo_low": [741, 1397], "foo_mean": 1392, "foo_q25": 1391, "foo_q50": 1391, "foo_q75": 1391, "foo_std": 1391, "foo_strip": 730, "foo_strip_end": 731, "foo_strip_start": 732, "foo_sum": [1391, 1392], "foo_uniqu": 1392, "foo_upp": [744, 1397], "foo_var": 1391, "foobar": [733, 734, 1325, 1326, 1397], "foobarbar": [734, 1326], "foofoobar": [733, 1325], "foral": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "forbid": [56, 266, 357, 904, 971], "forc": [152, 158, 162, 164, 261, 265, 315, 343, 357, 590, 897, 898, 954, 971, 1224, 1354, 1374], "force_parallel": [261, 357, 897, 898, 971], "foreign": 205, "form": [38, 49, 133, 135, 136, 137, 139, 161, 162, 171, 214, 258, 291, 325, 357, 488, 641, 718, 743, 852, 867, 971, 1110, 1240, 1310, 1335, 1374, 1397], "format": [7, 12, 16, 17, 21, 37, 38, 41, 43, 44, 47, 49, 103, 134, 150, 152, 153, 154, 157, 158, 160, 163, 167, 173, 211, 225, 233, 244, 258, 272, 281, 291, 292, 297, 311, 324, 355, 357, 361, 450, 483, 485, 488, 613, 614, 615, 735, 737, 738, 742, 796, 852, 880, 885, 886, 908, 923, 936, 971, 975, 980, 1107, 1110, 1327, 1329, 1330, 1334, 1373, 1397, 1398], "formul": [228, 357, 882, 883, 971], "formula": [41, 357, 501, 852, 1124, 1374], "fortran": [314, 315, 357], "forward": [236, 261, 300, 327, 357, 402, 443, 446, 455, 475, 513, 519, 583, 685, 852, 888, 898, 925, 971, 1015, 1073, 1097, 1138, 1143, 1209, 1277, 1374], "forward_fil": [410, 513, 852, 1023, 1138, 1374], "found": [21, 38, 41, 49, 104, 125, 128, 136, 140, 157, 164, 172, 230, 304, 357, 531, 683, 710, 715, 733, 734, 735, 738, 852, 929, 971, 1155, 1273, 1302, 1307, 1325, 1326, 1327, 1330, 1374, 1386, 1397, 1402], "four": [318, 357, 1402], "fourth": [548, 852, 1174, 1374], "frac": [504, 505, 506, 507, 691, 852, 1129, 1130, 1131, 1132, 1284, 1374], "fraction": [38, 49, 177, 178, 179, 180, 293, 357, 484, 578, 641, 682, 735, 738, 763, 852, 971, 1106, 1204, 1240, 1271, 1327, 1330, 1363, 1374], "fragment": 1402, "frame": [38, 39, 41, 49, 58, 65, 66, 136, 153, 157, 163, 177, 178, 217, 218, 224, 258, 259, 263, 265, 273, 277, 280, 290, 291, 292, 304, 319, 325, 326, 357, 488, 831, 871, 872, 879, 909, 912, 929, 937, 971, 977, 1054, 1110, 1374, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1401, 1405], "frame_data": [1385, 1388], "frameinittyp": [357, 971], "frametyp": [58, 1402], "framework": [281, 324, 357, 936, 971], "freedom": [305, 328, 357, 586, 592, 674, 675, 678, 679, 696, 764, 784, 828, 829, 833, 841, 852, 930, 938, 971, 1266, 1268, 1288, 1364, 1374], "freeli": [266, 357, 831, 904, 929, 971, 977], "freez": [41, 357], "freeze_pan": [41, 357], "frequenc": [327, 357, 763, 852, 1363, 1374], "frequent": [1272, 1274, 1374], "fri": [357, 360], "fridai": [246, 357, 455, 467, 485, 777, 893, 971, 1073, 1085, 1107, 1110], "friendship": 13, "from": [2, 3, 4, 5, 6, 11, 17, 29, 33, 37, 38, 40, 41, 43, 47, 49, 50, 51, 52, 56, 58, 66, 76, 89, 97, 103, 107, 123, 127, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 193, 198, 213, 217, 224, 225, 226, 232, 234, 237, 238, 244, 246, 258, 259, 260, 261, 262, 263, 266, 272, 281, 285, 286, 289, 290, 292, 293, 295, 296, 304, 312, 319, 321, 322, 324, 325, 326, 327, 333, 357, 360, 361, 407, 416, 448, 449, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 505, 508, 518, 520, 533, 548, 566, 578, 590, 607, 632, 633, 635, 640, 641, 644, 647, 649, 660, 662, 664, 666, 668, 670, 672, 675, 677, 679, 680, 682, 694, 706, 707, 712, 714, 715, 725, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 761, 773, 774, 777, 778, 790, 791, 792, 793, 794, 795, 796, 810, 812, 827, 831, 838, 839, 840, 842, 848, 851, 852, 871, 879, 880, 881, 889, 893, 897, 898, 899, 904, 908, 916, 917, 919, 921, 922, 929, 934, 936, 937, 942, 943, 971, 975, 976, 977, 1020, 1029, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1128, 1130, 1135, 1174, 1192, 1204, 1216, 1233, 1234, 1236, 1237, 1240, 1245, 1259, 1271, 1298, 1299, 1304, 1306, 1317, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1334, 1349, 1365, 1374, 1383, 1384, 1385, 1386, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405], "from_arrai": 831, "from_arrow": 134, "from_json": 852, "from_panda": 134, "from_repr": [313, 357, 1351, 1374], "fromkei": [59, 61], "front": [246, 357, 893, 971], "fruit": [310, 357, 430, 434, 657, 703, 729, 736, 852, 1043, 1048, 1295, 1321, 1328], "fruits_revers": [657, 852], "fsspec": [152, 153, 158, 160, 168, 169, 176], "fsspecfileio": 169, "full": [12, 27, 47, 52, 58, 73, 103, 136, 139, 152, 153, 154, 156, 158, 161, 162, 164, 167, 168, 169, 171, 172, 173, 260, 326, 357, 712, 714, 721, 722, 735, 736, 737, 738, 742, 791, 792, 897, 903, 937, 971, 975, 977, 1304, 1306, 1313, 1314, 1327, 1328, 1329, 1330, 1334, 1374, 1390, 1405], "full_path": [144, 146], "full_sent": 781, "fulli": [186, 280, 293, 315, 357, 529, 852, 1153, 1374], "funcnam": [41, 357], "function": [0, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 74, 80, 97, 98, 99, 100, 130, 132, 134, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 204, 208, 210, 212, 216, 222, 225, 232, 239, 262, 265, 266, 272, 280, 281, 286, 304, 314, 315, 316, 319, 320, 321, 324, 326, 343, 357, 360, 361, 370, 407, 427, 428, 447, 448, 450, 455, 467, 504, 506, 507, 529, 590, 598, 599, 624, 625, 640, 644, 647, 659, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 688, 691, 711, 756, 757, 758, 767, 771, 777, 779, 783, 785, 786, 787, 799, 800, 802, 804, 805, 808, 810, 811, 813, 814, 817, 819, 822, 824, 826, 833, 837, 841, 843, 848, 852, 864, 869, 874, 875, 880, 885, 899, 903, 904, 908, 912, 913, 917, 929, 933, 936, 937, 944, 945, 954, 971, 975, 979, 1020, 1040, 1041, 1050, 1066, 1067, 1073, 1085, 1128, 1129, 1131, 1132, 1153, 1216, 1224, 1245, 1257, 1258, 1259, 1262, 1264, 1265, 1272, 1274, 1279, 1281, 1284, 1303, 1352, 1355, 1357, 1358, 1359, 1374, 1379, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1400, 1401, 1402, 1403, 1404, 1405], "function_nam": 149, "further": 848, "futur": [43, 44, 65, 212, 224, 260, 298, 309, 357, 598, 852, 875, 879, 897, 924, 971, 1348, 1374], "g": [34, 38, 49, 148, 152, 156, 158, 160, 166, 168, 173, 186, 212, 225, 257, 315, 325, 357, 367, 450, 505, 508, 599, 686, 798, 842, 852, 880, 917, 971, 975, 1130, 1374, 1405], "g1": [514, 765, 852], "g2": [514, 765, 852], "g_1": [691, 852, 1284, 1374], "gag": 27, "gamma": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "gantt": [913, 971], "gather": [153, 240, 357, 383, 522, 566, 775, 852, 891, 971, 996, 1145, 1192, 1374], "gather_everi": [357, 852, 971, 1374], "gb": [232, 357, 416, 1128, 1374], "gbp": 1405, "gc": [40, 156, 168, 169, 357], "gca": 27, "gcaacgcatata": 27, "gcp": [35, 38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 169, 170, 171, 172, 198, 357, 971], "gdp": [261, 357, 898, 971], "gdp2": [261, 357, 898, 971], "gdp_date": [261, 357, 898, 971], "ge": [852, 1374], "gener": [1, 53, 54, 97, 147, 148, 154, 155, 175, 181, 182, 183, 184, 185, 186, 188, 212, 220, 222, 281, 293, 312, 315, 321, 357, 578, 682, 687, 772, 791, 794, 806, 807, 809, 810, 811, 827, 839, 840, 852, 971, 1042, 1204, 1271, 1280, 1349, 1374, 1405], "geq": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "germani": [261, 357, 898, 971], "get": [53, 54, 55, 58, 65, 76, 99, 149, 159, 165, 166, 173, 174, 204, 213, 216, 220, 221, 230, 238, 241, 243, 246, 248, 249, 253, 255, 256, 262, 264, 268, 275, 276, 281, 289, 290, 294, 299, 302, 308, 316, 320, 330, 340, 351, 357, 368, 381, 382, 383, 385, 393, 396, 408, 416, 428, 431, 443, 444, 445, 446, 455, 465, 467, 515, 521, 528, 531, 547, 549, 552, 564, 570, 591, 600, 601, 602, 610, 612, 618, 632, 633, 642, 643, 648, 659, 660, 692, 696, 705, 752, 753, 757, 758, 760, 764, 775, 777, 799, 804, 808, 814, 815, 816, 817, 819, 820, 821, 823, 833, 837, 841, 852, 869, 874, 875, 877, 884, 889, 890, 893, 894, 899, 900, 902, 919, 920, 927, 932, 933, 939, 951, 962, 971, 976, 981, 994, 995, 996, 997, 998, 1006, 1009, 1021, 1029, 1044, 1053, 1062, 1063, 1064, 1065, 1073, 1083, 1085, 1123, 1140, 1141, 1147, 1152, 1155, 1158, 1159, 1160, 1172, 1175, 1178, 1190, 1196, 1217, 1225, 1227, 1228, 1230, 1232, 1233, 1234, 1241, 1242, 1246, 1257, 1285, 1288, 1297, 1345, 1349, 1355, 1360, 1364, 1374], "get_chunk": 1374, "get_column": [212, 317, 357], "get_column_index": 357, "get_polars_schema": 206, "get_table_info": 206, "get_token": 34, "get_worksheet_by_nam": [41, 357], "gevent": [65, 176, 875, 971], "gh": 722, "gh45": 722, "gh45ij67kl": 722, "ghi": [367, 707, 852, 977, 1299], "gil": [599, 852, 975], "git": 63, "github": [155, 357], "give": [162, 170, 171, 261, 272, 322, 324, 357, 465, 518, 548, 653, 759, 763, 842, 852, 864, 898, 908, 915, 934, 936, 971, 1083, 1174, 1251, 1363, 1374, 1401], "given": [41, 53, 54, 55, 58, 97, 109, 114, 131, 133, 135, 136, 137, 139, 147, 148, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 179, 180, 181, 182, 184, 186, 187, 188, 189, 210, 232, 233, 235, 237, 246, 251, 256, 265, 273, 279, 280, 285, 290, 291, 292, 300, 303, 319, 326, 357, 390, 402, 407, 416, 428, 437, 456, 460, 485, 487, 488, 501, 505, 529, 535, 558, 583, 590, 593, 599, 640, 644, 650, 653, 654, 656, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 685, 707, 708, 719, 720, 735, 738, 745, 748, 758, 776, 778, 782, 784, 798, 799, 808, 813, 814, 827, 828, 829, 842, 852, 886, 893, 903, 909, 912, 915, 916, 925, 928, 937, 954, 971, 976, 977, 979, 1003, 1015, 1020, 1029, 1055, 1074, 1078, 1107, 1109, 1110, 1124, 1128, 1130, 1153, 1158, 1173, 1184, 1209, 1216, 1219, 1222, 1224, 1237, 1243, 1247, 1251, 1254, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1273, 1277, 1299, 1300, 1311, 1312, 1327, 1330, 1337, 1362, 1365, 1374, 1383, 1385, 1390, 1392, 1393, 1396, 1397, 1402, 1404, 1405], "glimps": [224, 248, 357], "glob": [152, 153, 157, 158, 162, 164, 167, 170, 171, 172], "global": [57, 98, 100, 157, 175, 184, 192, 304, 357, 654, 655, 831, 852, 929, 971, 1252, 1253, 1374, 1384, 1386, 1401], "gmt": [460, 464, 482, 1078, 1082, 1104], "go": [13, 152, 153, 167, 430, 703, 1043, 1295], "godfath": 1383, "goe": 13, "gonfruit": 1328, "good": [47, 50, 52, 258, 357, 971, 1396], "goodby": 1, "googl": [35, 156, 168, 169], "gpu": [10, 50, 64, 65, 314, 357, 874, 875, 885, 913, 926, 946, 968, 971, 1352, 1374], "gpu_devic": [314, 357], "gpudevic": [314, 357], "gpuengin": [10, 874, 885, 913, 926, 971], "grade": [1174, 1374], "grain": [874, 885, 913, 926, 968, 971], "granular": [52, 971, 1402], "grape": 1397, "graph": [64, 154, 263, 357, 614, 874, 895, 942, 971], "graphviz": [263, 357, 614, 926, 971], "great": [357, 361], "great_tabl": [357, 361], "greater": [218, 261, 357, 523, 525, 535, 691, 719, 720, 728, 745, 842, 852, 898, 971, 1158, 1284, 1311, 1312, 1320, 1337, 1374], "greatest": [1391, 1395], "greatli": [158, 170], "green": [57, 98, 100, 343, 763, 852, 954, 1363, 1374], "greenlet": [65, 875, 971], "greet": 1, "grid": [533, 852], "grid_point": [533, 852], "gridlin": [41, 357], "gross": 1383, "group": [9, 28, 47, 52, 55, 149, 153, 172, 217, 245, 246, 259, 261, 277, 279, 281, 289, 292, 325, 327, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 368, 428, 510, 516, 521, 524, 562, 598, 599, 610, 612, 640, 650, 659, 660, 693, 694, 698, 706, 707, 708, 710, 721, 722, 758, 763, 814, 852, 871, 892, 893, 898, 919, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 977, 1066, 1188, 1257, 1290, 1298, 1299, 1300, 1302, 1313, 1314, 1363, 1374, 1383, 1391, 1401, 1402], "group_bi": [246, 277, 281, 289, 327, 356, 357, 368, 418, 423, 426, 428, 514, 516, 521, 524, 598, 599, 640, 693, 694, 758, 763, 765, 791, 794, 814, 852, 874, 875, 885, 893, 913, 915, 919, 926, 969, 971, 977, 1363, 1374], "group_by_dynam": [289, 357, 919, 971], "group_by_partit": [913, 971], "group_col": [514, 765, 852], "group_df": [343, 954], "group_dtyp": [640, 852], "group_index": [706, 1298], "group_to_row": [640, 852], "groupbi": [245, 357, 599, 814, 852], "grouper": [418, 423, 426, 852], "grow": [329, 357], "grown": [250, 357], "gt": [357, 361, 852, 1374], "gte": [514, 765, 852], "guarante": [10, 47, 52, 152, 153, 216, 224, 247, 273, 320, 322, 357, 427, 428, 527, 756, 757, 758, 852, 869, 879, 909, 933, 934, 971, 1040, 1041, 1151, 1356, 1358, 1359, 1374], "guid": [147, 149, 852, 975, 1405], "gzip": [47, 52, 357, 971], "h": [325, 357, 367, 485, 488, 686, 721, 722, 735, 738, 742, 852, 1313, 1314, 1327, 1330, 1334, 1397, 1398], "ha": [40, 41, 49, 50, 51, 52, 56, 58, 65, 138, 154, 167, 191, 212, 327, 333, 338, 357, 427, 428, 520, 611, 617, 712, 736, 746, 757, 758, 782, 799, 808, 848, 852, 875, 926, 943, 949, 954, 971, 1040, 1041, 1054, 1066, 1068, 1304, 1328, 1358, 1359, 1374], "half": [319, 357, 483, 504, 505, 506, 507, 680, 852, 1105, 1129, 1130, 1131, 1132, 1269, 1374], "half_away_from_zero": [680, 852, 1269, 1374], "half_lif": [504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374], "half_to_even": [680, 852, 1269, 1374], "ham": [36, 38, 40, 43, 44, 47, 217, 220, 221, 222, 226, 227, 228, 229, 230, 231, 237, 242, 247, 248, 250, 260, 264, 267, 269, 271, 274, 278, 283, 285, 286, 287, 290, 293, 294, 295, 302, 305, 306, 308, 312, 313, 315, 316, 317, 322, 328, 329, 357, 431, 614, 615, 848, 871, 876, 877, 881, 882, 883, 884, 889, 897, 911, 916, 917, 920, 921, 934, 942, 971, 1044, 1390, 1391], "ham_a": [312, 357], "ham_b": [312, 357], "ham_right": [260, 357, 897, 971], "hamburg": 848, "hand": [41, 152, 153, 167, 357, 579, 580, 581, 582, 1205, 1206, 1207, 1208], "handi": [455, 467, 777, 1073, 1085], "handl": [40, 42, 106, 140, 149, 152, 153, 167, 173, 237, 241, 285, 357, 451, 560, 705, 745, 852, 874, 889, 916, 971, 1069, 1186, 1297, 1337, 1374], "handler": [150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 225, 357, 450, 852, 880, 971], "happen": [154, 460, 647, 852, 1078, 1245, 1374], "hard": [97, 147, 167, 903, 971], "harder": [246, 357, 893, 971], "hardwar": 1405, "has_head": [152, 153, 157, 163, 167], "has_nul": [852, 1150, 1374], "has_prefix": [434, 729], "has_suffix": [430, 703], "has_two": 1392, "has_valid": 1374, "hash": [247, 357, 852, 1374], "hash_row": 357, "hat": [721, 722, 1313, 1314], "have": [5, 15, 31, 34, 41, 54, 57, 58, 66, 73, 100, 149, 150, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 172, 213, 225, 234, 258, 260, 261, 281, 284, 289, 291, 292, 311, 319, 334, 357, 447, 450, 504, 506, 507, 611, 650, 654, 655, 660, 708, 723, 779, 852, 880, 897, 898, 908, 919, 943, 944, 971, 977, 1066, 1068, 1129, 1131, 1132, 1135, 1247, 1252, 1253, 1313, 1315, 1374, 1401, 1403, 1405], "haystack": [707, 1299], "he": 731, "head": [76, 167, 244, 264, 308, 357, 373, 552, 852, 902, 971, 1178, 1345, 1374], "header": [38, 41, 47, 49, 52, 140, 152, 153, 157, 163, 167, 230, 321, 357, 971], "header_format": [41, 357], "header_nam": [321, 357], "headerless": 167, "heap": [149, 232, 357, 852, 1128, 1374], "heatmap": [41, 357], "heavili": 172, "height": [41, 148, 184, 229, 357, 360, 1374, 1379], "hell": [730, 1322], "hello": [1, 21, 730, 731, 732, 977, 1195, 1322, 1323, 1324, 1385, 1388, 1397], "hello_": 801, "hello_data": 1388, "hello_world": 1388, "help": [41, 177, 178, 179, 180, 357, 971], "helper": [357, 361, 848], "henc": [721, 1314], "here": [38, 40, 41, 43, 47, 49, 50, 51, 52, 133, 135, 136, 137, 139, 154, 155, 156, 161, 162, 164, 167, 168, 169, 170, 171, 172, 182, 184, 188, 198, 213, 281, 357, 455, 467, 598, 599, 614, 708, 715, 777, 842, 852, 867, 926, 971, 977, 1073, 1085, 1307], "hex": [412, 413, 701, 702, 740, 1025, 1026, 1293, 1294, 1332], "hexadecim": [1025, 1026], "hf": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 198, 357, 971], "hf_token": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 198, 357, 971], "hi": [1, 1397], "hidden": [41, 357], "hidden_column": [41, 357], "hide": [22, 23, 24, 25], "hide_gridlin": [41, 357], "hide_password": 154, "high": [292, 357, 361, 647, 852, 864, 1245, 1374], "higher": [47, 52, 56, 224, 283, 349, 357, 648, 671, 672, 825, 852, 879, 914, 960, 971, 1068, 1246, 1264, 1374], "highest": [357, 361, 650, 762, 782, 852, 971, 1247, 1374], "highli": [149, 852], "hint": 147, "hippopotamu": [719, 720, 1311, 1312], "hist": [852, 1374, 1379], "histogram": [1374, 1379], "hit": [870, 971], "hive": [53, 164, 170, 172], "hive_custom": 201, "hive_dir": [53, 55], "hive_partit": [164, 170, 172], "hive_schema": [164, 170, 172], "hive_serd": 201, "hmm": [977, 1397], "hold": [301, 315, 357, 536, 852, 1159, 1354, 1374], "holidai": [455, 467, 777, 1073, 1085], "home": [743, 1335], "horizont": [21, 66, 108, 239, 250, 268, 270, 275, 307, 325, 357, 768, 770, 779, 780, 781, 786, 787, 789, 797, 800, 816, 818, 821, 826, 836, 942, 971], "host": [63, 152, 158, 160, 172], "hour": [162, 167, 170, 171, 246, 261, 289, 327, 357, 470, 472, 473, 477, 478, 481, 483, 484, 488, 490, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 793, 794, 795, 796, 810, 838, 839, 840, 852, 893, 898, 919, 971, 977, 1100, 1103, 1105, 1112, 1118, 1130, 1374, 1398], "hours_diff": 490, "hous": [319, 357], "how": [12, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 58, 66, 108, 149, 155, 162, 164, 167, 170, 171, 172, 198, 229, 237, 260, 261, 281, 325, 326, 357, 391, 451, 481, 482, 533, 559, 560, 640, 653, 673, 735, 738, 777, 793, 852, 889, 897, 898, 937, 942, 971, 1004, 1069, 1103, 1104, 1185, 1186, 1251, 1265, 1327, 1330, 1374], "howev": [1, 10, 53, 136, 154, 164, 172, 208, 232, 265, 315, 357, 640, 852, 874, 885, 913, 926, 971, 1128, 1374], "hstack": [108, 357], "html": [33, 41, 43, 44, 134, 154, 158, 160, 210, 211, 212, 222, 357, 979, 980], "http": [21, 33, 41, 43, 44, 76, 134, 154, 155, 158, 160, 193, 210, 211, 212, 222, 357, 614, 706, 708, 718, 926, 971, 979, 980, 1298, 1300, 1310], "httpmethod": 76, "hug": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 198, 357, 971], "huge": [232, 357, 1128, 1374], "hut": [721, 722, 1313, 1314], "hvplot": [357, 360, 1374, 1379], "hyperbol": [376, 378, 380, 439, 690, 755, 852, 989, 991, 993, 1058, 1283, 1347, 1374], "hyperloglog": [215, 357, 374, 771, 852, 868, 971, 987, 1374], "hyphen": [697, 1289], "hypothesi": [182, 184, 187, 188, 1405], "i": [1, 10, 13, 15, 18, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 72, 73, 74, 75, 80, 90, 97, 99, 100, 104, 106, 107, 108, 109, 110, 111, 113, 114, 119, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 202, 204, 208, 213, 214, 215, 216, 217, 219, 220, 224, 225, 228, 229, 231, 232, 234, 235, 236, 237, 241, 245, 246, 247, 248, 251, 252, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 277, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 296, 297, 298, 300, 302, 303, 304, 305, 308, 309, 312, 314, 315, 316, 319, 320, 321, 322, 324, 326, 327, 328, 332, 334, 335, 343, 357, 360, 361, 362, 367, 370, 372, 373, 374, 384, 387, 394, 395, 402, 407, 410, 415, 427, 428, 429, 432, 433, 447, 448, 450, 453, 454, 455, 456, 459, 467, 468, 475, 476, 478, 483, 485, 488, 496, 504, 505, 506, 507, 510, 512, 513, 514, 518, 519, 527, 529, 532, 535, 536, 548, 553, 554, 561, 562, 565, 567, 569, 578, 583, 584, 586, 587, 590, 592, 595, 598, 599, 603, 605, 606, 607, 609, 610, 611, 613, 622, 640, 645, 646, 647, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 664, 666, 668, 670, 672, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 687, 688, 691, 692, 693, 694, 696, 697, 698, 699, 700, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 728, 730, 731, 732, 735, 736, 737, 738, 740, 742, 743, 745, 750, 752, 757, 758, 763, 764, 767, 768, 769, 770, 771, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 794, 795, 800, 804, 805, 806, 807, 809, 810, 811, 812, 814, 817, 819, 822, 824, 827, 828, 829, 830, 831, 833, 835, 837, 839, 840, 841, 842, 843, 848, 852, 867, 868, 869, 870, 873, 874, 875, 877, 879, 880, 882, 883, 884, 885, 887, 888, 889, 892, 893, 896, 897, 898, 899, 901, 903, 904, 908, 909, 913, 916, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 933, 934, 936, 937, 938, 939, 941, 944, 945, 946, 954, 964, 971, 975, 977, 984, 985, 986, 987, 999, 1000, 1007, 1008, 1015, 1018, 1020, 1023, 1028, 1040, 1041, 1045, 1046, 1047, 1049, 1050, 1055, 1056, 1066, 1067, 1068, 1071, 1072, 1073, 1074, 1077, 1085, 1086, 1100, 1105, 1107, 1110, 1118, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1137, 1138, 1139, 1140, 1143, 1151, 1152, 1153, 1155, 1158, 1159, 1161, 1164, 1171, 1173, 1174, 1175, 1178, 1179, 1180, 1187, 1188, 1191, 1193, 1195, 1204, 1209, 1210, 1213, 1216, 1224, 1243, 1244, 1245, 1247, 1249, 1251, 1252, 1253, 1254, 1257, 1258, 1259, 1262, 1264, 1265, 1266, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1280, 1281, 1284, 1285, 1288, 1289, 1290, 1291, 1292, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1317, 1320, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1332, 1334, 1335, 1337, 1344, 1345, 1348, 1349, 1352, 1354, 1355, 1357, 1358, 1359, 1363, 1364, 1374, 1379, 1383, 1384, 1389, 1393, 1394, 1397, 1400, 1402, 1403, 1405], "i0e0": 1405, "i16": [1, 61, 463, 479, 498, 686, 852, 977, 1101, 1351, 1374, 1405], "i32": [1, 61, 133, 136, 140, 181, 183, 184, 295, 304, 357, 393, 394, 396, 415, 429, 458, 466, 469, 470, 471, 472, 473, 477, 500, 686, 740, 777, 842, 852, 921, 971, 976, 1006, 1007, 1009, 1028, 1076, 1087, 1091, 1092, 1093, 1099, 1122, 1222, 1332, 1374, 1394, 1398, 1405], "i64": [1, 10, 11, 14, 17, 18, 22, 28, 59, 60, 61, 62, 66, 67, 85, 107, 133, 134, 135, 136, 137, 138, 139, 140, 148, 152, 154, 161, 162, 167, 177, 179, 213, 214, 216, 217, 218, 219, 221, 225, 226, 229, 230, 233, 234, 236, 237, 240, 241, 243, 244, 245, 246, 248, 250, 251, 253, 255, 257, 260, 261, 262, 264, 265, 266, 267, 273, 274, 279, 280, 281, 282, 285, 286, 287, 288, 289, 293, 295, 297, 300, 302, 303, 304, 306, 308, 310, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 347, 350, 351, 357, 362, 367, 369, 373, 383, 388, 389, 391, 392, 397, 399, 400, 401, 402, 403, 405, 408, 418, 423, 426, 427, 428, 437, 443, 444, 445, 446, 447, 448, 451, 452, 465, 481, 487, 489, 490, 491, 492, 493, 494, 495, 505, 508, 510, 511, 513, 514, 515, 516, 518, 521, 522, 524, 528, 530, 532, 533, 534, 535, 539, 540, 542, 543, 544, 545, 546, 549, 552, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 596, 598, 599, 619, 620, 621, 623, 624, 626, 628, 630, 631, 636, 640, 641, 644, 645, 646, 647, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 682, 684, 685, 686, 687, 692, 693, 694, 712, 721, 722, 736, 740, 745, 746, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 762, 765, 772, 775, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 793, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 823, 826, 830, 831, 832, 835, 836, 837, 838, 842, 848, 852, 867, 869, 871, 872, 874, 875, 880, 881, 883, 886, 888, 889, 890, 891, 892, 893, 894, 897, 898, 899, 900, 902, 903, 904, 905, 909, 910, 912, 913, 915, 916, 917, 918, 919, 921, 923, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 940, 943, 944, 947, 948, 950, 951, 952, 954, 955, 958, 961, 962, 971, 977, 981, 982, 983, 986, 1005, 1010, 1012, 1014, 1015, 1016, 1018, 1021, 1040, 1041, 1055, 1056, 1062, 1063, 1064, 1065, 1066, 1067, 1083, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1134, 1135, 1136, 1138, 1139, 1144, 1145, 1147, 1152, 1154, 1164, 1178, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1198, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1216, 1217, 1224, 1229, 1237, 1243, 1245, 1248, 1249, 1250, 1252, 1253, 1254, 1256, 1260, 1263, 1267, 1271, 1272, 1274, 1277, 1278, 1280, 1285, 1286, 1332, 1338, 1343, 1345, 1350, 1358, 1359, 1360, 1365, 1374, 1383, 1384, 1386, 1390, 1391, 1392, 1393, 1394, 1396, 1399, 1400, 1402, 1403, 1405], "i8": [406, 407, 463, 466, 470, 472, 473, 474, 477, 479, 480, 484, 497, 498, 589, 686, 824, 827, 843, 852, 1019, 1020, 1069, 1081, 1084, 1095, 1096, 1102, 1106, 1119, 1120, 1215, 1255, 1278, 1362, 1374, 1398], "i_bitand_j": 1393, "i_bitand_op_j": 1393, "i_bitcount": 1393, "i_bitor_j": 1393, "i_bitor_op_j": 1393, "i_bitxor_j": 1393, "i_bitxor_op_j": 1393, "iceberg": [42, 169, 357, 864], "icon": [41, 357], "id": [27, 34, 41, 66, 148, 152, 157, 169, 262, 314, 321, 334, 343, 357, 659, 721, 722, 761, 852, 899, 944, 954, 971, 977, 1257, 1361, 1374, 1402, 1403, 1405], "id_char": 1405, "id_var": [272, 324, 357, 908, 936, 971], "ideal": [142, 147], "ident": [34, 140, 218, 219, 357, 485, 658, 659, 852, 872, 873, 971, 1054, 1056, 1107, 1256, 1257, 1374], "identif": [157, 163], "identifi": [140, 154, 272, 279, 322, 324, 335, 357, 908, 934, 936, 971], "idiograph": 977, "idiom": 842, "idiomat": [848, 877, 884, 920, 939, 954, 971], "idx": [167, 246, 259, 334, 357, 394, 407, 590, 893, 944, 971, 1020, 1216, 1302], "idx_lit": 1302, "idx_rx": 1302, "ieee": [759, 852], "if_set": [5, 31], "if_table_exist": [39, 357], "ifnul": 1395, "ignor": [40, 56, 154, 172, 183, 184, 188, 266, 270, 307, 326, 357, 370, 372, 395, 415, 451, 482, 504, 506, 507, 560, 569, 599, 632, 633, 697, 713, 767, 769, 781, 818, 836, 852, 904, 937, 971, 977, 984, 985, 1008, 1028, 1069, 1104, 1129, 1131, 1132, 1186, 1195, 1233, 1234, 1289, 1305, 1374], "ignore_error": [152, 153, 162, 167, 171], "ignore_nul": [270, 307, 357, 370, 372, 395, 504, 506, 507, 569, 697, 713, 767, 769, 781, 818, 836, 852, 984, 985, 1008, 1129, 1131, 1132, 1195, 1289, 1305, 1374], "ignore_spac": 977, "ij": 722, "ij67": 722, "ijkl": 1397, "ilmsuxu": [698, 706, 707, 710, 721, 722, 1290, 1298, 1299, 1302, 1313, 1314], "imbal": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "imdb_scor": 1383, "immedi": [208, 650, 772, 776, 778, 782, 784, 791, 792, 794, 795, 806, 807, 810, 811, 824, 827, 830, 834, 839, 840, 843, 852, 1247, 1374, 1384], "immut": [315, 357, 1354, 1374], "impact": [246, 357, 893, 971, 1383, 1402], "impl": 169, "implement": [47, 97, 147, 154, 212, 247, 265, 343, 357, 360, 361, 527, 536, 599, 623, 624, 626, 628, 630, 631, 746, 756, 814, 852, 954, 1151, 1159, 1224, 1272, 1274, 1356, 1374, 1379], "implic": [450, 852, 880, 971], "implicit": [326, 357, 842, 937, 971], "implicitli": [237, 285, 357, 514, 842, 852, 889, 916, 971, 1402], "implod": [598, 599, 852, 1374, 1392], "import": [11, 17, 29, 36, 38, 40, 41, 43, 44, 47, 58, 73, 76, 97, 133, 134, 137, 138, 148, 152, 154, 155, 161, 162, 167, 173, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 214, 217, 224, 225, 226, 229, 244, 246, 259, 261, 279, 281, 297, 304, 312, 314, 319, 324, 325, 327, 357, 360, 361, 416, 449, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 606, 607, 613, 640, 662, 664, 666, 668, 670, 672, 675, 677, 679, 777, 790, 791, 792, 793, 794, 795, 796, 797, 810, 831, 839, 840, 848, 852, 864, 871, 875, 879, 880, 881, 883, 893, 898, 903, 923, 936, 971, 975, 1029, 1057, 1059, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1130, 1162, 1165, 1167, 1168, 1259, 1282, 1346, 1374, 1379, 1384, 1399, 1402, 1405], "improv": [39, 52, 158, 169, 170, 260, 357, 897, 971], "in_part_idx": [53, 55, 146], "in_plac": [250, 301, 329, 357, 1248, 1279, 1286, 1374], "in_progress": [915, 971], "includ": [7, 21, 31, 38, 40, 41, 49, 53, 55, 63, 138, 154, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 172, 184, 185, 208, 220, 224, 232, 262, 279, 281, 285, 292, 303, 319, 321, 325, 326, 357, 448, 484, 514, 518, 529, 535, 606, 647, 661, 663, 665, 667, 669, 671, 673, 674, 676, 678, 721, 722, 726, 727, 730, 731, 777, 786, 787, 828, 829, 852, 879, 889, 899, 916, 928, 937, 971, 977, 1067, 1068, 1106, 1128, 1139, 1153, 1158, 1245, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1313, 1314, 1318, 1319, 1322, 1374, 1402], "include_bom": [38, 49, 357, 971], "include_boundari": [246, 357, 893, 971], "include_break": [448, 647, 852, 1067, 1245, 1374], "include_breakpoint": [529, 852, 1153, 1374], "include_categor": 977, "include_categori": [529, 852, 1153, 1374], "include_col": 184, "include_file_path": [157, 162, 163, 164, 167, 170, 171, 172], "include_head": [38, 41, 49, 153, 321, 357, 971], "include_index": 138, "include_init": [786, 787], "include_kei": [53, 55, 279, 292, 357], "include_nul": [326, 357, 937, 971], "inclus": [213, 246, 289, 357, 488, 535, 660, 664, 666, 668, 670, 672, 675, 677, 679, 726, 727, 772, 791, 792, 794, 795, 806, 807, 810, 811, 839, 840, 852, 893, 919, 971, 1110, 1158, 1318, 1319, 1374], "incom": 154, "incompat": 126, "incomplet": [655, 852, 1253, 1374], "incorpor": 1402, "incorrect": [298, 357, 499, 598, 684, 852, 924, 954, 971, 1121, 1275, 1374], "incorrectli": [152, 590], "increas": [41, 53, 54, 55, 58, 152, 157, 163, 164, 172, 357, 447, 659, 852, 1066, 1257, 1374], "independ": [64, 181, 184, 188, 319, 357, 687, 852, 874, 885, 913, 926, 971], "index": [41, 114, 134, 138, 141, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 176, 212, 214, 240, 242, 246, 251, 256, 258, 281, 287, 289, 290, 291, 300, 302, 314, 315, 317, 324, 326, 327, 333, 334, 357, 368, 381, 382, 383, 385, 388, 389, 394, 402, 407, 505, 521, 522, 524, 531, 555, 556, 565, 566, 567, 583, 584, 590, 660, 664, 666, 668, 670, 672, 675, 677, 679, 683, 685, 692, 698, 706, 710, 712, 725, 736, 746, 775, 806, 809, 852, 891, 893, 919, 925, 927, 936, 937, 943, 944, 971, 977, 994, 995, 996, 997, 998, 1001, 1002, 1007, 1015, 1020, 1130, 1144, 1145, 1155, 1173, 1181, 1182, 1191, 1192, 1193, 1209, 1210, 1216, 1237, 1272, 1273, 1277, 1285, 1298, 1302, 1304, 1317, 1328, 1374, 1379, 1392, 1397], "index_column": [246, 289, 357, 660, 852, 893, 919, 971], "index_of": [852, 1374], "indexord": [314, 315, 357], "indic": [38, 41, 43, 47, 49, 50, 51, 52, 72, 73, 75, 90, 107, 117, 149, 150, 152, 153, 154, 157, 158, 160, 162, 163, 164, 167, 170, 171, 172, 181, 182, 188, 198, 246, 289, 292, 300, 312, 357, 384, 402, 521, 529, 537, 538, 539, 541, 542, 543, 544, 545, 546, 565, 583, 603, 604, 605, 606, 607, 608, 609, 640, 660, 664, 666, 668, 670, 672, 675, 677, 679, 683, 685, 775, 776, 823, 852, 893, 919, 925, 971, 977, 1015, 1050, 1144, 1153, 1162, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1191, 1209, 1272, 1273, 1277, 1349, 1374, 1397, 1405], "indistinguish": [38, 49, 357, 971], "individu": [41, 52, 143, 208, 289, 314, 315, 319, 357, 599, 707, 749, 852, 874, 919, 971, 977, 1053, 1299, 1374], "inequ": [634, 852], "inexact": [177, 178, 179, 180], "inf": [181, 184, 188, 380, 448, 538, 541, 647, 759, 852, 993, 1059, 1067, 1162, 1165, 1222, 1240, 1245, 1362, 1374, 1399], "infer": [38, 43, 47, 49, 50, 51, 52, 74, 89, 107, 133, 135, 136, 137, 138, 139, 152, 153, 154, 157, 161, 162, 163, 164, 167, 170, 171, 172, 198, 265, 357, 598, 599, 656, 714, 735, 737, 738, 739, 742, 786, 787, 796, 800, 812, 826, 827, 852, 971, 1224, 1254, 1306, 1327, 1329, 1330, 1331, 1334, 1374], "infer_schema": [152, 167], "infer_schema_length": [136, 139, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 357, 714, 971, 1306], "inference_length": [739, 1331], "inference_s": [265, 357], "infin": [743, 759, 852, 1335], "infinit": [541, 759, 852, 1165, 1374], "influenc": [157, 903, 971], "influxdb": 154, "info": [156, 168, 169, 176], "inform": [20, 24, 38, 39, 43, 47, 49, 50, 51, 52, 53, 54, 55, 63, 147, 149, 156, 162, 164, 167, 168, 169, 170, 171, 172, 177, 179, 198, 199, 200, 202, 203, 210, 222, 224, 357, 361, 548, 691, 698, 706, 707, 710, 721, 722, 852, 874, 879, 885, 913, 926, 971, 975, 979, 1174, 1284, 1290, 1298, 1299, 1302, 1313, 1314, 1374], "inherit": [290, 357, 450, 852, 880, 971], "init": [208, 1383], "initcap": 1395, "initi": [33, 34, 35, 41, 89, 147, 193, 208, 357, 786, 787, 800, 842, 1402], "initialis": [76, 154, 208, 971], "inject": [41, 58, 357], "inlin": [25, 292, 357, 698, 706, 707, 710, 721, 722, 1290, 1298, 1299, 1302, 1313, 1314, 1392], "inner": [67, 85, 183, 260, 262, 326, 357, 395, 406, 452, 569, 589, 599, 653, 756, 831, 852, 897, 899, 937, 971, 977, 1008, 1019, 1070, 1195, 1215, 1224, 1251, 1356, 1374, 1390, 1402], "inner_dtyp": [183, 186], "innermost": [183, 186], "innter": 1007, "inprocessqueri": [874, 971], "input": [0, 55, 58, 64, 107, 136, 138, 149, 152, 153, 216, 226, 245, 262, 265, 266, 270, 279, 281, 286, 295, 296, 300, 303, 307, 320, 326, 331, 332, 336, 357, 367, 428, 430, 434, 437, 505, 508, 520, 535, 594, 599, 611, 640, 654, 655, 688, 694, 712, 723, 725, 731, 732, 733, 734, 736, 738, 750, 758, 766, 768, 770, 772, 775, 778, 779, 780, 781, 787, 789, 796, 798, 806, 807, 812, 813, 814, 816, 818, 821, 826, 830, 834, 836, 842, 848, 852, 864, 869, 881, 892, 899, 904, 917, 921, 922, 925, 928, 933, 937, 940, 941, 947, 971, 977, 1041, 1055, 1130, 1158, 1220, 1221, 1224, 1243, 1252, 1253, 1277, 1281, 1304, 1317, 1328, 1330, 1359, 1374, 1396, 1397, 1399], "input_wildcard_expans": [149, 852], "insensit": [699, 707, 709, 711, 721, 722, 723, 977, 1290, 1291, 1299, 1301, 1302, 1303, 1313, 1314, 1315], "insensitive_match": [698, 710], "insert": [39, 56, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 251, 266, 321, 323, 357, 683, 697, 713, 745, 852, 904, 935, 971, 1273, 1289, 1305, 1337, 1374], "insert_aft": [41, 357], "insert_befor": [41, 357], "insert_chart": [41, 357], "insert_column": 357, "insid": [65, 598, 842, 852, 875, 971], "inspect": [852, 971], "instal": [33, 34, 35, 111, 138, 152, 153, 155, 158, 160, 222, 316, 357, 455, 467, 614, 777, 926, 971, 1073, 1085, 1355, 1374], "instanc": [38, 43, 47, 49, 50, 51, 52, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 184, 188, 198, 234, 239, 357, 611, 786, 800, 848, 864, 871, 903, 915, 943, 944, 971, 1135, 1374], "instanti": [34, 39, 41, 154, 186, 313, 314, 357, 362, 976, 1351, 1352, 1374], "instantli": [65, 875, 971], "instead": [38, 40, 45, 46, 49, 58, 65, 67, 134, 135, 136, 139, 152, 153, 154, 157, 163, 164, 167, 172, 173, 181, 182, 183, 184, 188, 215, 216, 244, 257, 258, 261, 265, 272, 277, 279, 290, 291, 292, 295, 296, 297, 300, 314, 315, 316, 320, 332, 333, 357, 360, 361, 383, 402, 428, 429, 432, 433, 448, 462, 488, 505, 508, 518, 583, 598, 613, 646, 647, 654, 685, 697, 705, 716, 717, 730, 731, 732, 733, 734, 745, 752, 758, 765, 772, 774, 776, 778, 782, 783, 784, 791, 792, 794, 795, 796, 806, 807, 810, 811, 824, 827, 830, 831, 834, 835, 839, 840, 843, 852, 867, 868, 869, 875, 885, 898, 908, 921, 922, 923, 925, 933, 941, 942, 943, 946, 971, 977, 996, 1015, 1025, 1041, 1042, 1046, 1047, 1067, 1080, 1089, 1090, 1110, 1130, 1150, 1209, 1244, 1245, 1252, 1272, 1274, 1277, 1286, 1289, 1297, 1308, 1309, 1322, 1323, 1324, 1337, 1344, 1354, 1355, 1359, 1374, 1379, 1383, 1384, 1388, 1402, 1403], "int": [11, 13, 14, 15, 18, 26, 27, 38, 39, 41, 43, 47, 49, 50, 51, 52, 54, 60, 67, 74, 136, 139, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 175, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 198, 200, 214, 216, 218, 224, 232, 235, 236, 240, 242, 244, 247, 248, 249, 251, 256, 258, 259, 261, 264, 265, 276, 277, 287, 289, 290, 293, 299, 300, 302, 305, 308, 313, 317, 320, 325, 328, 330, 333, 334, 340, 351, 357, 367, 394, 402, 404, 407, 409, 410, 427, 428, 447, 451, 455, 481, 504, 506, 507, 511, 512, 513, 519, 521, 522, 524, 527, 528, 529, 552, 560, 565, 566, 567, 568, 578, 583, 584, 586, 588, 589, 590, 592, 639, 641, 644, 645, 647, 650, 653, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 692, 696, 706, 712, 714, 719, 720, 721, 725, 727, 728, 736, 739, 740, 745, 753, 757, 758, 764, 766, 772, 782, 784, 790, 793, 796, 802, 804, 806, 807, 810, 811, 823, 824, 827, 828, 829, 833, 834, 837, 838, 841, 843, 852, 869, 872, 879, 887, 888, 891, 894, 898, 902, 913, 925, 927, 930, 932, 933, 938, 939, 943, 944, 946, 951, 962, 971, 976, 977, 994, 995, 1007, 1015, 1017, 1020, 1022, 1023, 1040, 1041, 1042, 1053, 1054, 1060, 1066, 1069, 1070, 1073, 1103, 1128, 1129, 1131, 1132, 1136, 1137, 1138, 1143, 1144, 1145, 1151, 1152, 1153, 1155, 1173, 1177, 1178, 1186, 1191, 1192, 1193, 1194, 1204, 1209, 1210, 1212, 1214, 1215, 1216, 1218, 1230, 1231, 1233, 1234, 1237, 1239, 1240, 1243, 1244, 1245, 1247, 1251, 1254, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1276, 1277, 1280, 1285, 1288, 1298, 1304, 1306, 1311, 1312, 1313, 1317, 1319, 1320, 1328, 1331, 1332, 1337, 1344, 1345, 1351, 1358, 1359, 1364, 1374, 1386, 1389, 1402, 1405], "int16": [1, 48, 61, 319, 357, 445, 446, 479, 752, 852, 977, 1064, 1065, 1101, 1344, 1351, 1374], "int32": [1, 41, 61, 66, 133, 136, 181, 183, 184, 246, 259, 266, 289, 314, 357, 393, 394, 396, 415, 429, 458, 469, 470, 471, 472, 477, 500, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 740, 756, 827, 852, 893, 904, 919, 971, 976, 977, 1003, 1006, 1007, 1009, 1028, 1076, 1087, 1091, 1092, 1093, 1099, 1122, 1130, 1222, 1332, 1356, 1357, 1374], "int64": [1, 40, 41, 60, 61, 66, 67, 89, 109, 152, 161, 220, 230, 239, 246, 266, 280, 289, 294, 309, 316, 357, 388, 389, 391, 392, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 445, 446, 489, 490, 491, 492, 493, 494, 495, 499, 505, 508, 598, 599, 625, 627, 629, 644, 652, 660, 664, 666, 668, 670, 672, 675, 677, 679, 714, 740, 752, 756, 772, 779, 798, 806, 807, 812, 827, 834, 848, 852, 876, 884, 893, 904, 912, 919, 920, 971, 977, 1001, 1002, 1004, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1064, 1065, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1121, 1123, 1130, 1224, 1249, 1332, 1344, 1354, 1355, 1356, 1357, 1374], "int64arrai": [1348, 1374], "int8": [1, 61, 89, 239, 357, 406, 407, 445, 446, 463, 466, 473, 474, 480, 484, 497, 498, 589, 752, 824, 827, 843, 852, 976, 1019, 1020, 1064, 1065, 1069, 1081, 1084, 1095, 1096, 1102, 1106, 1119, 1120, 1215, 1255, 1344, 1354, 1362, 1374], "int_rang": [246, 325, 334, 343, 357, 772, 809, 830, 893, 903, 944, 954, 971], "integ": [38, 41, 49, 56, 72, 73, 75, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 175, 182, 184, 187, 189, 214, 229, 246, 266, 289, 312, 315, 357, 371, 436, 484, 517, 518, 639, 645, 647, 652, 659, 660, 661, 673, 712, 736, 740, 766, 772, 802, 806, 807, 827, 852, 883, 893, 904, 919, 971, 977, 1052, 1106, 1142, 1243, 1245, 1249, 1257, 1258, 1265, 1272, 1304, 1328, 1332, 1354, 1374, 1396, 1402, 1405], "integer_cast": [56, 266, 357, 904, 971], "integer_list": 85, "integr": [41, 319, 357, 664, 666, 668, 670, 672, 675, 677, 679, 852, 1405], "intend": [1, 177, 178, 179, 180, 745, 1337], "intens": [265, 343, 357, 640, 852, 1224, 1374], "interact": [184, 188, 224, 357, 360, 879, 971, 1374, 1379], "interchang": [134, 212], "interest": [153, 485, 488, 1107, 1110], "interfac": [0, 122, 123, 133, 134, 206, 207, 211, 864, 980, 1402], "interfer": 975, "interleav": 1397, "intermedi": [252, 357, 533, 852, 896, 971, 1156, 1157, 1374, 1405], "intern": [43, 44, 50, 154, 175, 258, 309, 357, 518, 852, 971, 1348, 1374, 1384], "interoper": [210, 979], "interpol": [224, 283, 349, 357, 513, 534, 602, 648, 671, 672, 825, 852, 879, 914, 960, 971, 1068, 1157, 1246, 1264, 1374, 1391], "interpolate_bi": [852, 1374], "interpolationmethod": [533, 852, 1156, 1374], "interpret": [137, 139, 152, 153, 167, 357, 415, 971, 1028], "intersect": [41, 357, 580, 977, 1206, 1401], "interv": [246, 289, 327, 357, 448, 483, 529, 535, 647, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 810, 811, 839, 840, 852, 893, 919, 971, 1067, 1081, 1083, 1084, 1091, 1093, 1095, 1096, 1099, 1101, 1102, 1105, 1109, 1119, 1153, 1158, 1245, 1374, 1391], "intoexpr": [149, 216, 245, 246, 289, 295, 296, 300, 303, 320, 331, 332, 336, 357, 373, 390, 391, 411, 414, 417, 428, 451, 455, 481, 505, 511, 521, 529, 531, 534, 535, 536, 558, 559, 579, 580, 581, 582, 640, 654, 655, 664, 666, 668, 670, 672, 675, 677, 679, 683, 685, 694, 699, 709, 711, 723, 726, 727, 728, 730, 731, 732, 733, 734, 750, 758, 768, 770, 775, 778, 779, 780, 781, 782, 784, 786, 789, 793, 800, 810, 816, 818, 821, 827, 830, 834, 836, 852, 869, 892, 893, 919, 921, 922, 925, 928, 933, 940, 941, 947, 971, 1003, 1004, 1024, 1027, 1030, 1041, 1073, 1130, 1136, 1155, 1157, 1158, 1159, 1184, 1185, 1252, 1253, 1273, 1277, 1303, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1359, 1374], "intoexprcolumn": [237, 251, 285, 357, 394, 395, 402, 427, 428, 437, 483, 511, 514, 566, 569, 578, 583, 641, 645, 682, 685, 706, 712, 715, 719, 720, 725, 736, 740, 745, 757, 758, 772, 777, 791, 792, 794, 795, 806, 807, 811, 839, 840, 842, 852, 889, 916, 925, 971, 1007, 1008, 1015, 1055, 1100, 1105, 1118, 1136, 1192, 1195, 1204, 1209, 1240, 1251, 1298, 1304, 1307, 1311, 1312, 1317, 1328, 1332, 1337, 1374], "introduc": [57, 100, 735, 737, 738, 1327, 1329, 1330], "introduct": 1401, "intuit": [518, 852, 977], "invalid": [38, 49, 123, 152, 153, 167, 217, 357, 429, 714, 715, 740, 759, 852, 971, 1025, 1042, 1306, 1307, 1332, 1374], "invalid_valu": 1025, "invalidoperationerror": [655, 852, 1253, 1374, 1400], "invari": [903, 971], "invers": [375, 376, 377, 378, 379, 380, 852, 988, 989, 990, 991, 992, 993, 1354, 1374, 1399], "invert": 977, "invok": 208, "involv": [237, 285, 357, 889, 916, 971], "io": [36, 38, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 150, 152, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 171, 225, 297, 357, 450, 520, 613, 852, 880, 923, 971], "io_sourc": 147, "iobas": [45, 161, 225, 297, 357, 450, 613, 617, 852, 880, 923, 971], "ipc": [43, 44, 50, 158, 159, 160, 170, 173, 357, 864, 971], "ipccompress": [43, 44, 50, 357, 971], "ir": [926, 971], "is_between": [852, 1374], "is_clos": [852, 1374], "is_dupl": [357, 852, 1374], "is_elementwis": [149, 598, 852], "is_empti": [357, 1374], "is_finit": [852, 1374], "is_first_distinct": [852, 1374], "is_in": [109, 237, 357, 852, 1374], "is_infinit": [852, 1374], "is_last_distinct": [852, 1374], "is_nan": [228, 357, 852, 882, 971, 1374], "is_not_nan": [852, 1374], "is_not_nul": [285, 357, 852, 916, 971, 1374], "is_nul": [229, 357, 852, 883, 971, 1374], "is_numer": 1405, "is_odd": 977, "is_selector": 977, "is_sort": 1374, "is_uniqu": [357, 852, 1374], "isclos": [536, 852, 1159, 1374], "isn": [97, 147, 842], "iso": [469, 488, 497, 498, 1087, 1110, 1119, 1120, 1397], "iso8601": [152, 153, 167, 488, 1110], "iso_lang": 1397, "iso_year": 500, "isodow": 1398, "isoweek": 1398, "isoyear": 1398, "issu": [102, 103, 106, 107, 110, 117, 119, 130, 152, 153, 154, 167, 357, 445, 446, 752, 852, 1064, 1065, 1344, 1374, 1402], "ital": [41, 357], "item": [14, 66, 153, 244, 290, 293, 357, 390, 394, 395, 451, 510, 558, 560, 567, 569, 578, 682, 728, 852, 867, 1003, 1007, 1008, 1069, 1134, 1184, 1186, 1193, 1195, 1204, 1271, 1320, 1374], "iter": [53, 54, 55, 58, 64, 65, 66, 76, 132, 133, 136, 147, 149, 154, 187, 189, 216, 226, 233, 237, 245, 246, 257, 258, 259, 262, 285, 289, 290, 291, 292, 295, 296, 303, 320, 321, 331, 332, 335, 336, 357, 428, 447, 455, 467, 514, 640, 694, 750, 758, 768, 770, 775, 777, 778, 779, 780, 781, 789, 816, 818, 821, 830, 834, 836, 842, 848, 852, 869, 881, 886, 889, 892, 893, 899, 916, 919, 921, 922, 928, 933, 940, 941, 947, 971, 976, 977, 1041, 1066, 1073, 1085, 1139, 1272, 1359, 1374, 1405], "iter_batch": 154, "iter_column": 357, "iter_row": [259, 290, 291, 292, 357], "iter_slic": 357, "its": [77, 140, 176, 232, 315, 357, 459, 483, 496, 505, 598, 658, 694, 749, 763, 842, 852, 867, 877, 884, 939, 971, 975, 1077, 1105, 1118, 1128, 1130, 1256, 1354, 1374, 1404], "itself": [182, 357, 360, 361, 661, 663, 665, 667, 669, 671, 673, 674, 676, 678, 776, 828, 829, 852, 901, 971, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374, 1379, 1383, 1384, 1402], "ix": [281, 357], "j": [321, 357, 1393], "jax": [314, 357, 1352, 1374], "jax_enable_x64": [314, 357], "jaxexporttyp": [314, 357], "jjk": 977, "jkl": [707, 1299], "jklmn": 1397, "job": [870, 971], "join": [57, 58, 64, 66, 100, 237, 261, 262, 285, 326, 357, 514, 533, 640, 697, 831, 852, 874, 885, 889, 898, 899, 913, 916, 926, 937, 942, 971, 1289, 1384, 1386, 1392, 1401, 1402], "join_asof": [260, 357, 897, 971], "join_nul": [260, 357, 897, 971], "join_wher": [357, 971], "joinstrategi": [58, 260, 357, 897, 971], "joinvalid": [260, 357, 897, 971], "jpy": 1405, "json": [2, 3, 5, 6, 45, 46, 148, 149, 161, 162, 169, 171, 201, 225, 297, 357, 450, 520, 613, 617, 714, 715, 747, 852, 864, 880, 923, 971, 1306, 1307, 1340], "json_path": [715, 1307], "json_path_match": [714, 1306], "json_stat": 5, "json_str": [161, 162], "json_val": [715, 1307], "jsonencod": 148, "jsonpath": [714, 715, 1306, 1307], "jst": [140, 977], "jul": [735, 1327, 1397], "juli": [1110, 1397, 1398], "just": [41, 138, 154, 167, 272, 324, 357, 908, 936, 971, 977], "k": [216, 292, 320, 321, 357, 427, 428, 442, 548, 757, 758, 852, 869, 933, 971, 1040, 1041, 1061, 1174, 1358, 1359, 1374], "k_2": [691, 852, 1284, 1374], "k_3": [691, 852, 1284, 1374], "kadokawa": [718, 1310], "kanji": 977, "karen": [281, 357], "kathmandu": [1079, 1080, 1108], "kb": [232, 357, 416, 1029, 1128, 1374], "kde": [1374, 1379], "keep": [58, 152, 153, 162, 167, 170, 171, 237, 322, 326, 327, 357, 520, 598, 616, 624, 654, 778, 842, 852, 934, 937, 971, 1252, 1374], "kei": [38, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 58, 63, 66, 145, 146, 156, 162, 164, 167, 168, 169, 170, 171, 172, 198, 213, 214, 246, 258, 260, 261, 273, 279, 286, 288, 291, 292, 326, 357, 514, 599, 654, 655, 723, 791, 794, 834, 852, 893, 897, 898, 909, 915, 917, 918, 937, 971, 977, 981, 1252, 1253, 1315, 1374, 1390], "kept": [322, 357, 934, 971], "keyedpartit": 146, "keyedpartitioncontext": [53, 55, 145], "keyerror": 17, "keystrok": 848, "keyword": [40, 156, 164, 168, 184, 188, 198, 222, 245, 280, 290, 295, 296, 316, 331, 332, 336, 357, 455, 514, 644, 739, 750, 777, 830, 834, 842, 852, 892, 912, 921, 922, 940, 941, 947, 971, 1073, 1331, 1355, 1374, 1387], "kl": 722, "kleen": [370, 372, 767, 768, 769, 770, 852, 984, 985, 1374], "klmnoopqrstuvwxyz": [259, 357], "knight": 1383, "know": [58, 154, 281, 324, 357, 590, 598, 852, 867, 936, 971], "known": [158, 202, 407, 590, 680, 852, 954, 1020, 1216, 1269, 1374], "kurtosi": [661, 852, 1258, 1374], "kuzu_db_conn": 154, "kwarg": [32, 33, 37, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 149, 151, 154, 155, 184, 186, 188, 201, 205, 222, 237, 280, 285, 316, 357, 360, 644, 852, 889, 912, 916, 946, 971, 1355, 1374, 1379, 1387, 1402], "k\u00f9zudb": 154, "l": [810, 811], "l1": 66, "l2": 66, "label": [246, 314, 319, 357, 360, 361, 448, 647, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 852, 893, 913, 971, 1067, 1245, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374, 1379], "label_column": [319, 357], "labelangl": [357, 360, 1374, 1379], "lag": [300, 357, 402, 583, 685, 780, 852, 925, 971, 1015, 1209, 1277, 1374], "lake": [40, 156, 168, 357, 864], "lambda": [53, 97, 167, 239, 265, 280, 281, 286, 343, 357, 362, 407, 506, 507, 590, 598, 599, 624, 625, 786, 787, 800, 813, 814, 826, 852, 903, 912, 917, 954, 971, 1020, 1131, 1132, 1216, 1224, 1374], "land": [455, 467, 1073, 1085], "languag": [167, 246, 261, 289, 327, 357, 478, 483, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118, 1130, 1374], "larg": [11, 12, 15, 58, 154, 157, 163, 172], "large_str": [259, 309, 316, 357], "larger": [11, 49, 50, 51, 52, 518, 536, 782, 852, 971, 1159, 1374], "largest": [216, 320, 357, 428, 757, 758, 852, 869, 933, 971, 1041, 1358, 1359, 1374], "last": [40, 162, 167, 170, 171, 177, 178, 179, 180, 248, 261, 264, 281, 292, 303, 308, 315, 322, 351, 357, 383, 394, 403, 447, 463, 475, 479, 497, 519, 542, 567, 585, 588, 590, 623, 624, 626, 628, 630, 631, 640, 655, 693, 694, 712, 728, 736, 753, 775, 837, 848, 852, 898, 928, 932, 934, 962, 971, 977, 996, 1007, 1016, 1066, 1081, 1097, 1101, 1119, 1143, 1152, 1166, 1178, 1193, 1211, 1214, 1253, 1286, 1304, 1320, 1328, 1345, 1354, 1374, 1395, 1397], "last_column": [41, 357], "later": [261, 297, 357, 613, 898, 923, 971], "latest": [33, 134, 156, 168, 212, 481, 482, 611, 735, 738, 793, 1103, 1104, 1327, 1330], "latt": 977, "latter": [41, 134, 234, 357, 1135, 1374], "lazi": [1, 49, 50, 51, 52, 53, 66, 152, 158, 162, 164, 167, 184, 261, 280, 281, 304, 357, 362, 598, 599, 802, 824, 827, 843, 852, 879, 897, 898, 942, 947, 948, 950, 952, 954, 955, 956, 957, 958, 959, 960, 961, 971, 977, 1383, 1384, 1385, 1386, 1387, 1389, 1402, 1405], "lazili": [99, 152, 153, 158, 162, 164, 167, 168, 169, 170, 171, 172, 362, 875, 971], "lazy_fram": [64, 65, 132], "lazyfram": [0, 1, 10, 58, 59, 60, 61, 62, 64, 65, 66, 97, 132, 143, 147, 152, 158, 162, 164, 167, 168, 169, 170, 171, 172, 173, 177, 178, 184, 198, 220, 225, 263, 266, 280, 281, 297, 304, 357, 362, 450, 514, 590, 613, 830, 831, 842, 852, 864, 968, 969, 970, 976, 977, 1383, 1384, 1387, 1389, 1402, 1403, 1405], "lazyframeext": [915, 971], "lazygroupbi": [892, 893, 919, 971], "lbl": [314, 319, 357], "ldf": [1, 947, 948, 950, 952, 955, 956, 957, 958, 959, 960, 961], "ldot": [505, 852, 1130, 1374], "le": [536, 703, 852, 1159, 1374], "lead": [15, 47, 97, 140, 147, 152, 173, 270, 298, 300, 307, 357, 402, 521, 524, 583, 590, 598, 599, 684, 685, 730, 732, 782, 818, 836, 852, 903, 924, 925, 954, 971, 1015, 1209, 1224, 1275, 1277, 1322, 1324, 1374], "leap": [468, 478, 1086, 1100], "leap_year": 468, "learn": [319, 357], "least": [66, 113, 281, 357, 424, 425, 641, 706, 708, 778, 782, 784, 852, 1037, 1038, 1240, 1298, 1300, 1374, 1395], "leav": [6, 272, 324, 357, 590, 908, 936, 971], "left": [16, 17, 41, 58, 177, 178, 179, 180, 246, 260, 261, 289, 326, 357, 448, 504, 505, 506, 507, 533, 535, 647, 660, 664, 666, 668, 670, 672, 675, 677, 679, 683, 756, 778, 786, 787, 791, 792, 794, 795, 800, 810, 811, 826, 839, 840, 842, 852, 893, 897, 898, 919, 937, 971, 1067, 1129, 1130, 1131, 1132, 1158, 1245, 1273, 1356, 1374, 1386, 1390, 1395], "left_clos": [448, 647, 852, 1067, 1245, 1374], "left_on": [260, 261, 326, 357, 897, 898, 937, 971], "left_right": [260, 326, 357, 897, 937, 971], "leftmost": [683, 852, 1273, 1374, 1397], "len": [13, 184, 188, 220, 259, 281, 334, 338, 343, 357, 441, 599, 610, 612, 650, 658, 783, 806, 810, 852, 876, 939, 944, 949, 954, 971, 976, 1060, 1256, 1374], "len_byt": [13, 433, 717, 718, 1047, 1309], "len_char": [432, 716, 1046, 1308], "length": [66, 67, 85, 149, 157, 163, 167, 182, 186, 244, 246, 289, 302, 357, 360, 432, 447, 483, 584, 590, 611, 650, 654, 655, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 692, 712, 716, 717, 719, 720, 723, 725, 736, 745, 779, 810, 811, 824, 827, 828, 829, 843, 852, 867, 893, 913, 919, 927, 971, 1046, 1053, 1066, 1077, 1105, 1210, 1216, 1237, 1252, 1253, 1256, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1285, 1304, 1308, 1309, 1311, 1312, 1315, 1317, 1328, 1337, 1374, 1391, 1392, 1395], "leq": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "less": [55, 167, 261, 357, 518, 550, 597, 728, 842, 852, 898, 971, 1320, 1405], "letter": [233, 340, 351, 357, 508, 699, 707, 709, 711, 723, 743, 798, 852, 886, 951, 962, 971, 977, 1291, 1299, 1301, 1303, 1315, 1335, 1397], "level": [11, 41, 43, 44, 47, 50, 52, 148, 165, 167, 170, 171, 172, 239, 265, 277, 304, 309, 357, 361, 514, 852, 864, 929, 971, 1348, 1374, 1402], "lexic": [70, 977, 1050], "lf": [10, 49, 50, 51, 52, 61, 97, 143, 362, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 925, 926, 927, 928, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 942, 943, 944, 949, 953, 971, 1391, 1402, 1405], "lf1": [831, 929, 971, 1387, 1389, 1403], "lf2": [831, 929, 971, 1387, 1389, 1403], "lf3": [971, 1387], "lf4": [971, 1387], "lf5": 971, "lf6": 971, "lf_other": [942, 971], "lib": [852, 1348, 1374], "librari": [1, 115, 149, 154, 157, 598, 852, 975, 1405], "life": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "lifetim": [208, 863, 1389], "light": [41, 357], "like": [36, 38, 40, 43, 44, 45, 46, 47, 65, 134, 149, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 214, 225, 246, 253, 255, 260, 292, 297, 314, 315, 357, 360, 450, 456, 520, 562, 598, 616, 650, 706, 731, 732, 763, 848, 852, 870, 875, 880, 893, 971, 1074, 1188, 1247, 1298, 1363, 1374, 1379], "limit": [11, 12, 52, 53, 154, 155, 190, 236, 357, 410, 513, 519, 852, 888, 971, 1023, 1138, 1143, 1374, 1392, 1401], "line": [11, 21, 41, 152, 153, 157, 167, 244, 253, 255, 357, 360, 706, 1298, 1374, 1379], "line_termin": [38, 49, 357, 971], "linear": [224, 252, 283, 349, 357, 533, 534, 557, 602, 648, 671, 672, 780, 781, 825, 852, 879, 896, 914, 960, 971, 1068, 1156, 1157, 1183, 1246, 1264, 1374], "linearli": 811, "lineitem": [142, 153, 155], "link": 975, "list": [1, 14, 34, 40, 41, 58, 59, 61, 64, 65, 67, 73, 89, 107, 132, 133, 135, 136, 137, 139, 140, 142, 143, 146, 147, 150, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 182, 183, 184, 188, 195, 196, 197, 203, 214, 221, 226, 230, 232, 233, 237, 243, 245, 246, 250, 258, 276, 279, 285, 289, 290, 291, 292, 295, 303, 310, 311, 319, 321, 322, 323, 325, 331, 336, 337, 357, 368, 395, 406, 407, 408, 448, 455, 467, 510, 516, 521, 530, 540, 598, 599, 611, 612, 640, 647, 653, 656, 662, 663, 665, 667, 669, 671, 674, 676, 678, 693, 694, 705, 707, 709, 711, 726, 746, 748, 749, 756, 775, 777, 780, 791, 792, 794, 795, 797, 805, 807, 811, 812, 814, 832, 834, 840, 848, 852, 877, 884, 886, 889, 892, 893, 916, 921, 928, 934, 935, 940, 942, 947, 948, 971, 976, 977, 1008, 1019, 1020, 1021, 1053, 1067, 1073, 1085, 1128, 1134, 1144, 1147, 1153, 1154, 1164, 1224, 1245, 1251, 1254, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1291, 1297, 1299, 1301, 1303, 1315, 1318, 1353, 1356, 1374, 1383, 1388, 1392, 1394, 1397, 1404, 1405], "list_catalog": 206, "list_namespac": 206, "list_of_seri": 814, "list_tabl": 206, "listitem": 143, "listtostructwidthstrategi": [590, 1216], "lit": [1, 369, 411, 535, 607, 623, 710, 779, 780, 786, 800, 824, 827, 842, 843, 852, 1138, 1374], "liter": [10, 16, 17, 21, 38, 40, 42, 43, 47, 49, 50, 51, 52, 56, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 187, 188, 189, 198, 201, 205, 266, 276, 295, 296, 300, 326, 331, 332, 357, 369, 411, 430, 434, 437, 459, 481, 502, 503, 511, 518, 523, 525, 535, 550, 597, 607, 619, 621, 634, 635, 645, 654, 655, 698, 699, 700, 709, 710, 711, 721, 722, 723, 750, 751, 759, 768, 770, 772, 778, 779, 780, 781, 789, 790, 793, 806, 810, 812, 816, 818, 821, 830, 834, 836, 838, 842, 852, 888, 904, 921, 922, 925, 937, 940, 941, 971, 977, 1024, 1055, 1077, 1103, 1126, 1136, 1158, 1236, 1252, 1253, 1272, 1274, 1277, 1290, 1291, 1292, 1301, 1302, 1303, 1313, 1314, 1315, 1374, 1397], "littl": [291, 357, 415, 1028], "lmn": 977, "ln": [504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374, 1395], "ln_a": 1396, "load": [3, 5, 6, 136, 138, 149, 154, 156, 157, 163, 168, 169, 187, 189, 357, 852, 864, 971, 1405], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 157, "load_tabl": 157, "load_workbook": 157, "loader": [319, 357], "lobster": [710, 1302], "loc": [357, 361], "local": [4, 40, 154, 156, 168, 169, 172, 357, 496, 642, 643, 852, 1045, 1049, 1079, 1080, 1105, 1108, 1118, 1241, 1242, 1374, 1384], "localhost": 154, "localis": [483, 496, 1118], "locat": [41, 164, 167, 170, 172, 214, 234, 287, 317, 323, 357, 683, 852, 935, 971, 1135, 1144, 1272, 1273, 1374], "lock": 190, "log": [30, 60, 428, 501, 595, 621, 645, 758, 852, 1041, 1124, 1359, 1374, 1395], "log10": [852, 1374, 1395], "log10_a": 1396, "log16_a": 1396, "log1p": [852, 1374, 1395], "log1p_a": 1396, "log2": 1395, "logarithm": [593, 594, 595, 852, 1219, 1220, 1221, 1374, 1396], "logic": [66, 265, 343, 357, 360, 361, 370, 372, 450, 599, 756, 767, 768, 769, 770, 814, 842, 852, 880, 885, 897, 915, 923, 954, 971, 984, 985, 1224, 1354, 1356, 1374, 1379], "london": [460, 464, 482, 1078, 1082, 1104], "london_timezon": [482, 1104], "london_to_amsterdam": [482, 1104], "long": [233, 272, 281, 324, 325, 357, 415, 886, 908, 936, 971, 1028], "longer": [152, 153, 167], "longest": 590, "look": [11, 246, 357, 411, 590, 893, 971, 1024], "lookup": 848, "loop": [154, 599, 852], "lose": [457, 1075], "lossi": [152, 153, 167], "lossless": 56, "lot": 55, "love": [699, 723, 1291, 1315], "low": [18, 154, 437, 647, 852, 1245, 1374], "low_memori": [152, 153, 162, 164, 167, 171, 172], "lower": [56, 167, 224, 246, 283, 349, 357, 437, 535, 596, 624, 648, 652, 671, 672, 772, 791, 792, 794, 795, 810, 811, 825, 839, 840, 852, 879, 893, 914, 960, 971, 1055, 1068, 1158, 1222, 1246, 1249, 1264, 1362, 1374, 1392, 1395], "lower_bound": [246, 357, 437, 535, 852, 893, 971, 1055, 1158, 1362, 1374], "lowercas": [630, 741, 743, 1333, 1335, 1397], "lowest": [596, 852], "lru_cach": [265, 357, 599, 852, 1224, 1374], "lst": 183, "lt": [176, 514, 765, 852, 1374], "ltrim": 1395, "lyric": [699, 723, 1291, 1315], "lz4": [43, 44, 47, 50, 52, 357, 971], "lzo": [47, 52, 357, 971], "m": [73, 75, 260, 357, 456, 457, 459, 464, 465, 485, 487, 488, 499, 706, 735, 737, 738, 742, 793, 794, 795, 796, 802, 810, 897, 971, 977, 1074, 1075, 1077, 1082, 1083, 1107, 1109, 1110, 1121, 1298, 1327, 1329, 1330, 1334, 1387, 1397, 1398], "m_2": [691, 852, 1284, 1374], "m_3": [691, 852, 1284, 1374], "m_i": [691, 852, 1284, 1374], "machin": 1405, "maco": 176, "made": [41, 154, 357, 362, 488, 1110], "mai": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 74, 80, 99, 132, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 208, 224, 225, 232, 234, 246, 260, 261, 262, 265, 266, 289, 297, 304, 314, 316, 319, 326, 327, 357, 360, 361, 362, 432, 447, 448, 450, 455, 456, 457, 467, 469, 478, 483, 485, 496, 508, 529, 565, 590, 598, 599, 610, 613, 647, 660, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 709, 711, 714, 716, 722, 777, 779, 786, 787, 791, 792, 794, 795, 800, 810, 811, 826, 839, 840, 852, 867, 874, 875, 879, 880, 885, 893, 897, 898, 899, 903, 904, 913, 919, 923, 929, 937, 943, 944, 945, 954, 971, 977, 1046, 1050, 1066, 1067, 1068, 1073, 1074, 1075, 1085, 1087, 1100, 1105, 1107, 1118, 1128, 1135, 1153, 1191, 1224, 1245, 1258, 1259, 1262, 1264, 1265, 1301, 1303, 1306, 1308, 1352, 1355, 1357, 1374, 1379, 1405], "main": [176, 875, 971], "maintain": [49, 50, 51, 52, 303, 357, 408, 591, 683, 694, 760, 775, 852, 879, 928, 971, 1021, 1217, 1273, 1360, 1374], "maintain_ord": [49, 50, 51, 52, 245, 260, 279, 281, 303, 322, 326, 327, 337, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 368, 408, 418, 423, 426, 428, 521, 524, 591, 599, 694, 758, 760, 775, 852, 875, 885, 892, 897, 913, 926, 928, 934, 937, 948, 950, 952, 955, 956, 957, 958, 959, 960, 961, 971, 1021, 1217, 1360, 1374], "maintainorderjoin": [260, 326, 357, 897, 937, 971], "major": [157, 314, 357], "make": [41, 66, 89, 133, 134, 138, 149, 152, 153, 156, 157, 158, 160, 164, 168, 273, 277, 284, 315, 327, 357, 360, 506, 507, 630, 631, 640, 653, 727, 852, 909, 971, 1131, 1132, 1251, 1319, 1354, 1374], "malform": 152, "man": [724, 1316], "manag": [57, 98, 100, 205, 863, 864, 1389, 1402], "managed_shallow_clon": 205, "mandatori": [41, 357], "mango": [430, 434, 703, 729, 1043, 1048, 1295, 1321], "mani": [154, 155, 172, 234, 260, 357, 709, 711, 723, 897, 971, 1135, 1301, 1315, 1374, 1378], "manner": 154, "map": [52, 53, 55, 89, 135, 136, 143, 152, 153, 154, 155, 158, 159, 164, 166, 167, 170, 184, 217, 220, 238, 258, 265, 266, 286, 290, 291, 292, 294, 310, 357, 369, 483, 496, 598, 599, 623, 625, 626, 628, 630, 631, 654, 655, 723, 763, 813, 852, 871, 904, 917, 920, 971, 976, 977, 1068, 1105, 1118, 1224, 1252, 1253, 1315, 1363, 1374, 1384, 1386, 1387, 1402], "map_": 119, "map_batch": [174, 362, 852, 971], "map_el": [110, 174, 265, 357, 598, 766, 852, 1374], "map_field": [627, 629], "map_row": 357, "mapelementsstrategi": [599, 852], "mapping_strategi": [640, 852], "march": [485, 1107], "mariadb": 155, "mark": [41, 148, 357, 429, 852, 1042, 1374], "mark_area": [1374, 1379], "mark_attr": [357, 360, 1374, 1379], "mark_bar": [357, 360, 1374, 1379], "mark_lin": [357, 360], "mark_point": [357, 360], "markdown": [7, 21, 208], "marker": [41, 357], "mask": [172, 184, 188, 253, 255, 357, 412, 537, 539, 542, 547, 642, 643, 698, 701, 710, 852, 1025, 1139, 1158, 1159, 1160, 1163, 1166, 1172, 1241, 1242, 1274, 1290, 1293, 1302, 1365, 1374], "mass": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "massag": [272, 324, 357, 908, 936, 971], "match": [40, 41, 56, 66, 73, 97, 121, 133, 135, 136, 137, 139, 147, 152, 154, 161, 162, 164, 167, 171, 172, 177, 178, 179, 180, 214, 217, 236, 237, 260, 261, 266, 285, 290, 326, 357, 430, 434, 606, 607, 608, 654, 655, 673, 698, 699, 700, 703, 706, 707, 709, 710, 711, 714, 715, 721, 722, 723, 729, 735, 737, 738, 842, 848, 852, 871, 888, 897, 898, 904, 916, 937, 971, 977, 1043, 1048, 1127, 1252, 1253, 1265, 1290, 1291, 1292, 1295, 1298, 1299, 1301, 1302, 1303, 1306, 1307, 1313, 1314, 1315, 1321, 1327, 1329, 1330, 1374, 1397], "match_to_schema": [357, 971], "matches_overlap": [709, 711, 1303], "matches_supertyp": [236, 357, 888, 971], "materi": [147, 152, 158, 162, 164, 265, 292, 343, 357, 362, 874, 913, 954, 964, 971, 977, 1224, 1374], "materialis": [258, 259, 290, 291, 357], "materialized_view": 205, "math": [1, 11, 62, 281, 357, 449, 536, 852, 1057, 1059, 1159, 1282, 1346, 1374, 1395, 1399, 1401], "mathemat": [759, 797, 852, 1395], "mathshortcut": [1, 62], "matplotlib": [176, 614, 913, 926, 971], "matter": [246, 258, 289, 291, 292, 311, 357, 660, 731, 732, 852, 893, 919, 971], "max": [10, 26, 41, 47, 52, 148, 224, 236, 245, 268, 281, 289, 357, 361, 443, 513, 536, 590, 598, 640, 650, 654, 655, 660, 663, 664, 684, 728, 779, 791, 794, 816, 832, 852, 879, 888, 892, 919, 971, 1062, 1068, 1138, 1159, 1216, 1247, 1260, 1275, 1320, 1374, 1383, 1392, 1395], "max_a": [289, 357, 660, 852, 919, 971], "max_binary_s": 154, "max_col": [182, 184], "max_colname_length": [244, 357], "max_color": [41, 357], "max_data_s": 188, "max_elem": 1392, "max_horizont": [357, 815], "max_items_per_column": [244, 357], "max_level": 148, "max_siz": [54, 183, 184, 186, 188, 1405], "max_text_s": 154, "max_valu": 1405, "max_width": [590, 1216], "maxim": [344, 381, 852, 955, 994, 1374], "maximum": [11, 27, 38, 47, 49, 52, 54, 74, 136, 139, 152, 153, 154, 157, 161, 162, 163, 167, 171, 173, 182, 183, 184, 186, 188, 244, 246, 267, 268, 357, 388, 433, 536, 555, 600, 632, 642, 650, 712, 714, 717, 725, 736, 815, 816, 852, 893, 905, 971, 1001, 1047, 1088, 1159, 1181, 1225, 1233, 1241, 1247, 1304, 1306, 1309, 1317, 1328, 1374, 1391], "mb": [232, 357, 416, 1128, 1374], "md": 143, "md2": 143, "me": [699, 723, 743, 1291, 1315, 1335], "mean": [47, 52, 64, 132, 152, 153, 158, 164, 167, 170, 208, 224, 236, 245, 246, 261, 270, 281, 289, 327, 336, 357, 478, 483, 496, 510, 513, 518, 660, 664, 665, 666, 668, 670, 672, 675, 677, 679, 691, 697, 706, 713, 791, 792, 794, 795, 796, 818, 839, 840, 842, 852, 879, 888, 892, 893, 898, 903, 919, 947, 971, 1068, 1100, 1105, 1118, 1134, 1138, 1261, 1284, 1289, 1298, 1305, 1374, 1391, 1392], "mean_horizont": [357, 817], "measur": [272, 324, 357, 361, 908, 936, 971], "measure_a": [357, 361], "measure_b": [357, 361], "median": [224, 281, 357, 513, 667, 668, 852, 879, 942, 971, 1068, 1262, 1374, 1395], "mediat": 1402, "medium": [41, 357], "megan": [273, 357, 909, 971], "melt": [324, 357, 936, 971], "member": [246, 357, 893, 971, 1164, 1374], "membership": [390, 558, 1003, 1184], "memori": [10, 15, 47, 52, 53, 54, 55, 64, 65, 66, 133, 134, 137, 138, 139, 152, 153, 154, 156, 157, 158, 162, 164, 167, 168, 170, 171, 172, 212, 234, 265, 291, 292, 301, 315, 343, 357, 640, 651, 686, 852, 874, 875, 885, 913, 926, 946, 971, 1135, 1224, 1248, 1278, 1279, 1354, 1374], "memory_map": [158, 164, 170], "memory_resourc": 946, "merg": [40, 260, 261, 273, 357, 897, 898, 909, 971], "merge_sort": [357, 971], "messi": [706, 708, 1298, 1300], "met": 842, "meta": [101, 450, 704, 852, 1296], "metadata": [0, 47, 49, 50, 51, 52, 143, 165, 169, 194, 198, 357, 864, 971], "metastor": 199, "method": [4, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 131, 134, 143, 144, 145, 146, 150, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 173, 181, 184, 188, 193, 199, 200, 202, 203, 208, 210, 215, 220, 224, 225, 228, 229, 234, 241, 245, 252, 258, 265, 272, 277, 283, 290, 291, 292, 300, 322, 331, 333, 338, 343, 349, 357, 362, 367, 370, 371, 402, 437, 450, 462, 485, 488, 502, 503, 511, 518, 520, 523, 525, 533, 536, 550, 583, 597, 599, 617, 619, 621, 623, 624, 626, 628, 630, 631, 634, 635, 636, 639, 645, 648, 650, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 685, 699, 705, 709, 711, 723, 731, 732, 733, 734, 739, 745, 751, 759, 761, 765, 766, 782, 814, 825, 844, 845, 847, 848, 852, 853, 854, 857, 858, 859, 860, 861, 864, 867, 875, 879, 880, 882, 883, 896, 908, 914, 925, 934, 940, 943, 945, 946, 949, 954, 960, 971, 976, 979, 986, 1015, 1055, 1068, 1089, 1090, 1107, 1110, 1125, 1126, 1135, 1136, 1146, 1148, 1150, 1156, 1159, 1176, 1209, 1223, 1224, 1235, 1236, 1246, 1247, 1264, 1277, 1291, 1297, 1301, 1303, 1315, 1331, 1337, 1356, 1366, 1368, 1370, 1374, 1375, 1378, 1380, 1381, 1382, 1384, 1388], "metric": [53, 54, 55, 154], "micro": [484, 1106], "microsecond": [73, 75, 246, 258, 261, 289, 291, 292, 311, 327, 357, 478, 481, 483, 488, 491, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 793, 794, 795, 796, 838, 839, 840, 852, 893, 898, 913, 919, 971, 977, 1100, 1103, 1105, 1113, 1118, 1130, 1374, 1398], "microsoft": [34, 41, 357], "mid_color": [41, 357], "midnight": 90, "midpoint": [224, 283, 349, 357, 648, 671, 672, 825, 852, 879, 914, 960, 971, 1068, 1246, 1264, 1374], "might": [53, 54, 55, 152, 153, 167, 190, 260, 281, 315, 324, 357, 599, 761, 852, 897, 928, 936, 971], "millennia": 1398, "millennium": 1398, "milli": [484, 1106], "millisecond": [246, 261, 289, 327, 357, 466, 473, 478, 483, 492, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 794, 795, 796, 810, 839, 840, 852, 893, 898, 919, 971, 977, 1100, 1105, 1114, 1118, 1130, 1374, 1398], "milliseconds_diff": [491, 492, 494], "mimic": 780, "min": [41, 47, 52, 149, 224, 236, 275, 281, 289, 357, 444, 513, 640, 650, 660, 669, 670, 791, 794, 821, 830, 852, 879, 888, 919, 971, 1063, 1068, 1138, 1247, 1263, 1374, 1392, 1395, 1398, 1405], "min_a": [289, 357, 660, 852, 919, 971], "min_col": [182, 184], "min_color": [41, 357], "min_elem": 1392, "min_horizont": [357, 820, 830], "min_period": [447, 504, 506, 507, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 828, 829, 852, 1066, 1129, 1131, 1132, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1374], "min_sampl": [447, 504, 506, 507, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 828, 829, 852, 1066, 1129, 1131, 1132, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374], "min_siz": [183, 184, 186, 188, 1405], "min_valu": 1405, "mincol": 182, "minim": [347, 382, 389, 556, 686, 694, 852, 958, 995, 1002, 1182, 1228, 1278, 1374], "minimum": [47, 52, 182, 183, 184, 186, 188, 239, 274, 275, 357, 504, 506, 507, 618, 633, 643, 650, 820, 821, 852, 910, 971, 1094, 1129, 1131, 1132, 1234, 1242, 1247, 1374, 1391, 1405], "minu": [478, 636, 852, 1100], "minut": [246, 261, 289, 327, 357, 466, 470, 472, 477, 478, 481, 483, 484, 493, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 793, 794, 795, 796, 838, 839, 840, 852, 893, 898, 919, 971, 977, 1100, 1103, 1105, 1115, 1118, 1130, 1374, 1398], "minutes_diff": 493, "mirror": [536, 852, 1159, 1374], "misc": 1389, "miscellan": 864, "mismatch": [66, 124, 162, 171, 177, 179], "miss": [56, 66, 152, 153, 164, 167, 172, 241, 266, 357, 410, 504, 506, 507, 519, 543, 544, 590, 852, 904, 971, 1023, 1129, 1131, 1132, 1143, 1374], "missing_column": [164, 172, 266, 357, 904, 971], "missing_struct_field": [56, 266, 357, 904, 971], "missing_utf8_is_empty_str": [152, 153, 167], "mix": [12, 261, 315, 357, 779, 831, 898, 929, 971, 977, 1068, 1374], "mixin": 1, "mkdir": [49, 50, 51, 52, 53, 55, 971], "mlnm": 471, "mm": [41, 357], "mn": 1397, "mno": [17, 21], "mnop": 1397, "mo": 796, "mocha": 977, "mod": [852, 1395], "mode": [39, 40, 41, 42, 49, 50, 51, 52, 177, 179, 281, 304, 357, 680, 707, 824, 827, 843, 852, 874, 885, 913, 926, 971, 1269, 1299, 1374, 1383, 1384, 1402], "model": [319, 357], "modifi": [53, 54, 55, 152, 153, 167, 190, 208, 214, 234, 250, 257, 258, 329, 357, 384, 482, 499, 698, 706, 707, 710, 721, 722, 741, 743, 744, 852, 986, 1104, 1121, 1135, 1290, 1298, 1299, 1302, 1313, 1314, 1333, 1335, 1336, 1374], "modul": [103, 111, 157, 851, 975, 977, 1405], "modulu": [619, 852], "moment": [47, 49, 50, 51, 52, 64, 65, 222, 357, 548, 691, 852, 874, 875, 885, 913, 926, 971, 1174, 1284, 1374], "mon": [357, 360, 1398], "mondai": [246, 357, 455, 467, 496, 498, 777, 893, 971, 1073, 1085, 1118, 1120], "monkei": [719, 720, 1311, 1312], "month": [246, 261, 289, 327, 357, 463, 475, 476, 478, 481, 483, 485, 488, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 790, 791, 792, 793, 794, 795, 796, 839, 840, 852, 893, 898, 919, 971, 1081, 1097, 1098, 1100, 1103, 1105, 1107, 1110, 1118, 1130, 1374, 1398], "month_nam": [485, 488], "monthbegin": [476, 1098], "monthend": [475, 1097], "moos": 977, "more": [21, 41, 47, 52, 58, 66, 98, 100, 129, 133, 134, 135, 136, 137, 138, 139, 147, 149, 154, 155, 156, 157, 161, 162, 163, 164, 168, 169, 171, 177, 179, 184, 208, 210, 222, 224, 228, 229, 237, 257, 258, 265, 272, 277, 285, 290, 291, 293, 304, 314, 315, 319, 322, 324, 343, 357, 361, 371, 408, 432, 514, 518, 526, 548, 578, 591, 595, 599, 639, 640, 682, 691, 707, 716, 735, 737, 738, 760, 771, 783, 799, 805, 808, 817, 819, 822, 823, 832, 842, 848, 852, 879, 882, 883, 889, 908, 915, 916, 929, 934, 936, 946, 971, 975, 977, 979, 1021, 1046, 1068, 1149, 1150, 1174, 1204, 1217, 1224, 1271, 1284, 1299, 1308, 1327, 1329, 1330, 1352, 1354, 1360, 1374, 1389, 1390, 1400, 1403, 1404, 1405], "more_bi": [279, 303, 357, 694, 852, 928, 971], "more_column": [233, 323, 357, 508, 798, 852, 886, 935, 971, 977], "more_expr": [640, 775, 778, 779, 780, 781, 852], "more_nam": [746, 848], "most": [41, 133, 152, 153, 155, 167, 177, 178, 179, 180, 315, 357, 421, 422, 611, 620, 641, 655, 728, 852, 1034, 1035, 1229, 1240, 1253, 1320, 1354, 1374, 1386, 1402], "mostli": [309, 357, 514, 852], "move": [281, 292, 357, 455, 504, 505, 506, 507, 663, 665, 669, 676, 842, 852, 1073, 1129, 1130, 1131, 1132, 1260, 1261, 1263, 1267, 1374], "mr": 946, "mssql": [39, 357], "much": [265, 325, 343, 357, 432, 433, 565, 599, 716, 717, 814, 852, 954, 1046, 1047, 1066, 1191, 1224, 1308, 1309, 1374], "mul": 852, "multi": [8, 41, 152, 153, 319, 357, 508, 706, 852, 977, 1298], "multi_fram": [41, 357], "multicolselector": 213, "multiindexselector": [213, 981], "multipl": [41, 55, 64, 65, 66, 116, 132, 152, 153, 157, 158, 162, 163, 164, 167, 170, 171, 172, 182, 184, 188, 214, 226, 232, 234, 237, 245, 246, 250, 259, 262, 279, 281, 285, 292, 295, 303, 326, 331, 336, 357, 428, 565, 598, 604, 611, 620, 621, 640, 654, 656, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 694, 746, 758, 775, 783, 800, 813, 815, 820, 826, 832, 835, 842, 848, 852, 864, 874, 875, 881, 885, 889, 892, 893, 899, 913, 916, 921, 926, 928, 937, 940, 947, 954, 971, 986, 1016, 1128, 1135, 1191, 1211, 1229, 1252, 1254, 1286, 1374, 1387, 1392], "multipli": [598, 662, 663, 665, 667, 669, 671, 674, 676, 678, 750, 852, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1374], "multithread": [303, 357, 694, 775, 852, 928, 971, 1016, 1211, 1286, 1374], "must": [34, 41, 76, 97, 135, 147, 149, 152, 156, 164, 167, 168, 169, 172, 173, 214, 224, 233, 246, 261, 262, 273, 281, 289, 290, 357, 448, 536, 590, 614, 647, 654, 655, 660, 723, 779, 786, 791, 792, 800, 811, 826, 842, 852, 879, 886, 893, 898, 899, 903, 909, 919, 926, 946, 971, 1067, 1068, 1159, 1245, 1252, 1253, 1315, 1374], "mutual": [290, 357], "my": [169, 173, 357, 360, 1374, 1379], "my_bucket": [915, 971], "my_column": 954, "my_column_": [321, 357], "my_column_0": [321, 357], "my_column_1": [321, 357], "my_column_2": [321, 357], "my_custom_aggreg": 814, "my_fil": 158, "my_holidai": [455, 467, 777, 1073, 1085], "my_larger_than_ram_fil": [49, 50, 51, 52, 971], "my_long_fil": 167, "my_struct": 834, "mydf": 167, "myrol": 155, "mysql": 155, "n": [1, 13, 14, 18, 26, 27, 38, 46, 49, 59, 60, 61, 62, 73, 75, 142, 147, 152, 153, 157, 162, 167, 184, 218, 234, 240, 246, 248, 258, 259, 264, 265, 291, 292, 293, 300, 305, 308, 311, 313, 328, 340, 342, 351, 357, 374, 402, 407, 416, 418, 423, 426, 427, 428, 432, 433, 447, 451, 455, 457, 459, 465, 487, 499, 505, 511, 514, 522, 528, 552, 560, 566, 568, 578, 579, 583, 586, 588, 590, 592, 641, 644, 653, 674, 675, 678, 679, 682, 685, 691, 696, 712, 716, 717, 721, 722, 727, 728, 730, 731, 736, 738, 753, 757, 758, 759, 764, 766, 784, 793, 794, 795, 796, 802, 804, 824, 827, 828, 829, 830, 833, 837, 841, 843, 852, 872, 891, 893, 894, 902, 925, 930, 932, 938, 951, 953, 962, 971, 977, 1015, 1020, 1029, 1040, 1041, 1046, 1047, 1054, 1066, 1069, 1073, 1075, 1077, 1083, 1109, 1121, 1130, 1135, 1136, 1145, 1152, 1178, 1186, 1192, 1194, 1204, 1205, 1209, 1214, 1216, 1240, 1266, 1268, 1271, 1277, 1284, 1288, 1304, 1308, 1309, 1313, 1314, 1319, 1320, 1328, 1330, 1345, 1351, 1358, 1359, 1363, 1364, 1374, 1386, 1387, 1394, 1397, 1398, 1400, 1402, 1405], "n0": [407, 590], "n00": [1020, 1216], "n01": [1020, 1216], "n02": [1020, 1216], "n1": [407, 590], "n2": [1, 407], "n3": 1, "n_1": [514, 852], "n_2": [514, 852], "n_3": [514, 852], "n_bar": 1391, "n_bit": 1397, "n_byte": [416, 432, 433, 716, 717, 1397], "n_char": [432, 433, 716, 717, 1397], "n_chunk": [357, 986, 1135, 1248, 1374], "n_column": 214, "n_elem": 1392, "n_even": 977, "n_field_strategi": [590, 1216], "n_film": 1383, "n_foo_uniqu": 1391, "n_kilobyt": 416, "n_row": [147, 150, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 214, 259, 357, 971], "n_thread": [152, 153], "n_uniqu": [357, 374, 852, 1374], "na": [316, 357, 729, 1355, 1374], "naiv": [459, 460, 738, 1077, 1078, 1330], "name": [1, 19, 23, 25, 33, 36, 38, 39, 41, 42, 49, 59, 60, 61, 62, 77, 89, 108, 133, 135, 136, 137, 138, 139, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 179, 180, 181, 182, 184, 187, 188, 189, 194, 196, 197, 198, 199, 200, 202, 203, 214, 216, 217, 220, 221, 226, 227, 228, 229, 233, 237, 238, 241, 242, 244, 245, 256, 257, 258, 260, 261, 262, 265, 268, 270, 272, 273, 275, 279, 281, 285, 286, 290, 291, 292, 294, 295, 296, 303, 304, 307, 310, 312, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 332, 333, 334, 335, 336, 342, 357, 361, 369, 407, 411, 412, 414, 417, 428, 437, 448, 485, 488, 508, 514, 535, 543, 544, 545, 546, 590, 599, 604, 608, 610, 612, 616, 640, 647, 657, 680, 694, 707, 708, 721, 722, 723, 746, 748, 750, 758, 763, 767, 768, 769, 770, 771, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 798, 799, 804, 805, 808, 815, 816, 817, 818, 819, 820, 821, 822, 825, 828, 829, 830, 831, 833, 834, 835, 836, 837, 841, 842, 848, 852, 869, 871, 876, 877, 881, 882, 883, 886, 889, 892, 897, 898, 899, 908, 909, 916, 917, 920, 921, 922, 928, 929, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 947, 953, 971, 976, 977, 983, 1020, 1041, 1054, 1067, 1107, 1110, 1127, 1216, 1245, 1250, 1298, 1299, 1300, 1313, 1314, 1338, 1341, 1349, 1350, 1355, 1359, 1363, 1374, 1379, 1384, 1385, 1386, 1387, 1388, 1389, 1401, 1402, 1405], "name_gener": [321, 357], "named_agg": [336, 947], "named_bi": [245, 357, 892, 971], "named_expr": [295, 296, 331, 332, 357, 750, 830, 834, 921, 922, 940, 941, 971], "named_fram": [1387, 1402], "nameless": 138, "namespac": [1, 154, 194, 196, 197, 198, 202, 356, 357, 360, 746, 831, 851, 864, 969, 970, 975, 1374, 1379, 1405], "namespaceinfo": [196, 206], "nan": [138, 184, 212, 228, 229, 235, 236, 315, 316, 357, 453, 454, 502, 503, 512, 513, 523, 525, 533, 536, 543, 544, 545, 546, 550, 597, 600, 618, 632, 633, 634, 635, 662, 688, 759, 782, 852, 882, 883, 887, 888, 971, 989, 993, 1071, 1072, 1137, 1138, 1159, 1167, 1168, 1233, 1234, 1259, 1281, 1354, 1355, 1374, 1405], "nan_as_nul": 212, "nan_max": [852, 1374], "nan_min": [852, 1374], "nan_to_nul": [138, 357, 971, 1374], "nana": 1397, "nanmax": [632, 633, 852, 1233, 1234, 1374], "nanosecond": [56, 90, 246, 261, 289, 327, 357, 478, 483, 484, 494, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 794, 795, 796, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1106, 1116, 1118, 1130, 1374, 1398], "nans_equ": [536, 852, 1159, 1374], "nansum": [662, 852, 1259, 1374], "nativ": [11, 39, 152, 154, 157, 158, 160, 164, 169, 204, 258, 265, 291, 292, 311, 315, 343, 357, 599, 814, 831, 852, 858, 929, 954, 971, 975, 1224, 1354, 1374, 1378, 1402, 1405], "natur": [595, 852, 1221, 1374, 1390, 1396], "ndarrai": [137, 210, 237, 285, 315, 357, 521, 683, 852, 889, 916, 971, 979, 1144, 1272, 1273, 1354, 1374], "ndjson": [51, 162, 971], "ne": [635, 852, 1236, 1374], "ne_miss": [237, 285, 357, 852, 889, 916, 971, 1126, 1374], "nearest": [60, 224, 261, 283, 349, 357, 436, 517, 533, 648, 671, 672, 680, 825, 852, 879, 898, 914, 960, 971, 1052, 1068, 1142, 1156, 1246, 1264, 1374, 1396], "nearest_pow2": 60, "necessari": [38, 39, 49, 57, 100, 157, 169, 315, 357, 971, 1354, 1374], "need": [53, 54, 55, 66, 102, 111, 140, 152, 153, 155, 164, 167, 170, 172, 208, 246, 289, 292, 301, 357, 360, 590, 660, 686, 721, 722, 723, 739, 796, 824, 827, 843, 852, 893, 919, 971, 977, 1278, 1313, 1314, 1315, 1331, 1374, 1379, 1405], "neg": [14, 72, 73, 74, 75, 152, 153, 158, 160, 164, 175, 248, 264, 289, 300, 302, 308, 334, 357, 402, 536, 583, 584, 644, 645, 660, 685, 692, 712, 725, 736, 852, 867, 919, 925, 927, 943, 944, 971, 977, 1015, 1152, 1159, 1178, 1209, 1210, 1243, 1277, 1285, 1304, 1317, 1328, 1345, 1374], "negat": [637, 852, 1238, 1374], "neither": [140, 157, 163, 293, 357, 407, 590, 1020, 1216], "nest": [57, 140, 148, 185, 186, 232, 357, 864, 977, 1128, 1374, 1402, 1405], "nesting_level": 185, "net": [707, 1299], "netherland": [261, 357, 898, 971], "netsuite_format": 201, "never": [38, 49, 154, 260, 261, 290, 357, 897, 898, 971], "new": [39, 40, 41, 42, 54, 55, 167, 208, 213, 214, 240, 250, 251, 265, 277, 278, 281, 286, 321, 323, 325, 326, 331, 332, 357, 369, 459, 510, 520, 522, 533, 624, 625, 640, 654, 655, 659, 718, 721, 722, 727, 728, 746, 748, 848, 852, 864, 867, 891, 917, 935, 937, 940, 941, 954, 971, 981, 983, 1077, 1134, 1145, 1237, 1250, 1252, 1253, 1257, 1313, 1314, 1319, 1320, 1338, 1341, 1350, 1374, 1402, 1404], "new_column": [152, 153, 157, 167], "new_dai": 481, "new_dat": 478, "new_df": [326, 357, 937, 971], "new_fil": [36, 38, 43, 44, 47, 357], "new_from_index": 1374, "new_id": [321, 357], "new_lf": [937, 971], "new_tabl": 1404, "new_valu": [786, 787, 800, 826], "new_york": 794, "newli": 58, "newlin": [46, 152, 153, 162, 167, 171, 357], "next": [19, 60, 246, 261, 289, 327, 357, 410, 455, 478, 483, 496, 650, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1023, 1073, 1100, 1105, 1118, 1247, 1374], "next_batch": 153, "next_pow2": 60, "nfc": [718, 1310, 1397], "nfd": [718, 1310, 1397], "nfkc": [718, 1310, 1397], "nfkd": [718, 1310, 1397], "nfruit": 736, "nl": [455, 467, 777, 1073, 1085], "nnel_id": 140, "no1": 977, "no_default": [241, 357, 654, 655, 723, 852, 1252, 1253, 1315, 1374], "no_optim": [64, 874, 903, 913, 971], "nodataerror": [152, 153, 157, 163, 167], "nodd": [706, 1298], "node": [870, 874, 895, 903, 908, 913, 917, 971], "nodefault": [241, 357, 654, 655, 723, 852, 1252, 1253, 1315, 1374], "non": [4, 5, 38, 40, 41, 49, 58, 73, 74, 138, 149, 175, 216, 223, 259, 272, 289, 295, 296, 300, 320, 321, 324, 326, 331, 332, 357, 370, 372, 410, 427, 428, 432, 437, 441, 442, 455, 482, 519, 535, 536, 553, 554, 587, 590, 598, 599, 605, 640, 641, 646, 650, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 700, 707, 716, 721, 722, 723, 743, 745, 750, 752, 757, 758, 763, 767, 768, 769, 770, 778, 779, 780, 781, 783, 785, 789, 796, 816, 818, 821, 828, 829, 830, 834, 835, 836, 852, 869, 878, 908, 919, 921, 922, 925, 933, 936, 937, 940, 941, 971, 977, 984, 985, 999, 1000, 1018, 1023, 1040, 1041, 1046, 1055, 1060, 1061, 1068, 1073, 1104, 1143, 1158, 1159, 1179, 1180, 1213, 1216, 1224, 1240, 1244, 1252, 1253, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1277, 1292, 1299, 1308, 1313, 1314, 1335, 1337, 1344, 1354, 1358, 1359, 1363, 1374, 1394, 1402], "non_exist": [482, 1104], "non_numer": [38, 49, 357, 971], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 67, 70, 73, 74, 75, 76, 77, 85, 89, 100, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 198, 199, 200, 202, 203, 204, 208, 210, 211, 214, 218, 223, 224, 228, 229, 235, 236, 237, 239, 241, 244, 246, 247, 252, 256, 260, 261, 263, 265, 269, 272, 277, 278, 281, 285, 289, 290, 293, 297, 300, 302, 303, 309, 310, 312, 314, 315, 316, 319, 321, 322, 323, 324, 325, 326, 327, 338, 342, 357, 370, 372, 373, 385, 386, 387, 394, 395, 407, 410, 430, 432, 433, 434, 437, 441, 442, 443, 446, 448, 453, 454, 462, 478, 481, 482, 488, 503, 504, 505, 506, 507, 508, 511, 512, 513, 519, 526, 527, 529, 531, 533, 534, 535, 543, 544, 545, 546, 551, 553, 554, 561, 567, 569, 571, 578, 579, 580, 581, 582, 584, 590, 598, 599, 610, 611, 613, 614, 615, 617, 622, 635, 636, 637, 638, 640, 641, 646, 647, 650, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 692, 693, 697, 698, 700, 702, 703, 704, 707, 710, 712, 713, 714, 715, 716, 717, 719, 720, 725, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 740, 742, 745, 746, 747, 748, 749, 752, 756, 763, 768, 769, 770, 772, 778, 779, 780, 781, 782, 783, 785, 786, 787, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 818, 821, 826, 827, 828, 829, 834, 835, 836, 838, 839, 840, 842, 852, 872, 873, 875, 878, 879, 882, 883, 885, 887, 888, 889, 893, 896, 897, 898, 901, 903, 908, 911, 915, 916, 919, 923, 925, 926, 927, 928, 934, 935, 936, 937, 942, 945, 946, 949, 953, 954, 963, 964, 971, 976, 977, 979, 980, 984, 985, 987, 994, 995, 999, 1000, 1007, 1008, 1020, 1023, 1031, 1036, 1039, 1043, 1046, 1047, 1048, 1054, 1055, 1060, 1061, 1067, 1068, 1070, 1071, 1072, 1080, 1088, 1089, 1090, 1094, 1103, 1104, 1110, 1124, 1126, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1140, 1143, 1149, 1151, 1153, 1155, 1156, 1157, 1158, 1164, 1169, 1170, 1173, 1174, 1175, 1177, 1179, 1180, 1183, 1187, 1193, 1195, 1197, 1204, 1205, 1206, 1207, 1208, 1210, 1216, 1224, 1225, 1226, 1227, 1228, 1236, 1239, 1244, 1245, 1246, 1247, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1274, 1277, 1280, 1281, 1284, 1285, 1288, 1289, 1290, 1292, 1294, 1295, 1296, 1299, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1327, 1328, 1329, 1330, 1332, 1334, 1337, 1340, 1344, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1356, 1363, 1364, 1374, 1383, 1385, 1386, 1387, 1389, 1392, 1394, 1397, 1398, 1402], "nonexist": [482, 1104], "nor": [157, 163, 293, 357], "normal": [40, 148, 246, 357, 501, 548, 661, 691, 763, 852, 893, 971, 977, 1124, 1174, 1258, 1284, 1363, 1374, 1395], "normalised_scor": 154, "norowsreturnederror": [290, 357], "north": 76, "not_": [331, 357, 842, 852, 940, 971, 977, 1374], "not_c": [331, 357, 940, 971], "notabl": 154, "notat": [12, 38, 41, 357], "note": [4, 11, 21, 40, 41, 47, 53, 54, 55, 57, 58, 65, 66, 72, 73, 75, 90, 98, 100, 133, 134, 135, 137, 139, 140, 148, 152, 153, 154, 155, 156, 157, 161, 162, 163, 167, 168, 169, 171, 173, 177, 179, 182, 184, 188, 190, 208, 212, 220, 222, 224, 225, 228, 229, 232, 235, 236, 237, 246, 247, 256, 257, 258, 260, 261, 265, 273, 277, 280, 281, 285, 286, 289, 290, 291, 292, 297, 300, 304, 311, 314, 316, 319, 321, 322, 324, 326, 327, 331, 333, 334, 357, 402, 415, 430, 432, 433, 434, 437, 445, 446, 450, 453, 454, 460, 475, 476, 478, 483, 488, 496, 505, 512, 513, 518, 520, 527, 535, 536, 543, 544, 553, 554, 562, 565, 583, 587, 590, 599, 613, 614, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 646, 654, 655, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 687, 691, 697, 698, 699, 705, 706, 707, 708, 709, 710, 711, 712, 716, 717, 721, 722, 723, 725, 730, 731, 732, 735, 736, 743, 745, 746, 752, 759, 768, 770, 777, 786, 791, 792, 794, 795, 796, 800, 810, 812, 824, 826, 827, 831, 835, 839, 840, 842, 843, 848, 852, 863, 867, 875, 879, 880, 882, 883, 887, 888, 889, 893, 898, 909, 916, 917, 919, 923, 925, 926, 928, 929, 934, 936, 937, 940, 943, 944, 971, 975, 977, 999, 1000, 1015, 1018, 1028, 1046, 1047, 1055, 1064, 1065, 1068, 1071, 1072, 1078, 1097, 1098, 1100, 1105, 1110, 1118, 1128, 1130, 1137, 1138, 1151, 1158, 1159, 1179, 1180, 1188, 1191, 1209, 1213, 1224, 1244, 1252, 1253, 1257, 1265, 1272, 1274, 1277, 1279, 1284, 1289, 1290, 1291, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1308, 1309, 1313, 1314, 1315, 1317, 1322, 1323, 1324, 1327, 1328, 1335, 1337, 1344, 1355, 1357, 1374, 1383, 1384, 1388, 1389, 1397, 1400, 1402], "noth": [21, 706, 715, 1298, 1307], "notic": [154, 237, 357, 889, 971, 1374], "notimplementederror": [10, 212], "now": [58, 152, 157, 289, 315, 357, 455, 607, 739, 777, 919, 971, 1073, 1331, 1354, 1374], "np": [97, 137, 210, 214, 237, 285, 315, 357, 521, 598, 683, 852, 889, 916, 971, 979, 1144, 1162, 1165, 1167, 1168, 1272, 1273, 1374], "npt": [210, 979], "nr": [340, 351, 951, 962], "nth": [240, 357, 522, 728, 848, 852, 891, 971, 1145, 1320, 1374], "nthe": [706, 1298], "nthose": [706, 1298], "nu": 703, "null": [17, 38, 40, 47, 49, 52, 58, 66, 73, 135, 136, 139, 148, 152, 153, 162, 164, 167, 171, 172, 173, 181, 184, 188, 212, 216, 217, 218, 223, 224, 228, 229, 231, 235, 236, 237, 239, 252, 260, 266, 269, 270, 271, 278, 281, 283, 285, 300, 303, 305, 306, 307, 310, 312, 315, 316, 320, 323, 326, 328, 338, 357, 370, 372, 373, 383, 386, 387, 390, 394, 395, 402, 403, 410, 412, 415, 427, 428, 429, 430, 432, 433, 434, 437, 441, 442, 443, 446, 451, 453, 454, 478, 481, 482, 489, 490, 491, 492, 493, 494, 495, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 519, 526, 531, 533, 534, 540, 543, 544, 545, 546, 551, 553, 554, 558, 560, 561, 564, 565, 567, 569, 570, 571, 579, 580, 581, 582, 583, 585, 587, 590, 598, 599, 622, 635, 636, 637, 638, 640, 641, 646, 650, 651, 655, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 693, 694, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 719, 720, 725, 727, 728, 729, 735, 736, 738, 740, 745, 746, 747, 748, 749, 752, 756, 757, 758, 767, 768, 769, 770, 775, 778, 779, 780, 781, 783, 785, 789, 793, 798, 809, 812, 816, 818, 821, 828, 829, 834, 835, 836, 842, 852, 869, 872, 878, 879, 882, 883, 887, 888, 889, 896, 897, 904, 911, 916, 925, 928, 933, 935, 937, 942, 949, 971, 977, 984, 985, 996, 999, 1000, 1003, 1007, 1008, 1015, 1016, 1018, 1023, 1025, 1028, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1054, 1055, 1060, 1061, 1069, 1071, 1072, 1103, 1104, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1126, 1127, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1143, 1149, 1150, 1155, 1156, 1157, 1164, 1169, 1170, 1171, 1177, 1179, 1180, 1183, 1184, 1186, 1187, 1190, 1191, 1193, 1195, 1196, 1197, 1206, 1208, 1209, 1211, 1213, 1216, 1224, 1236, 1239, 1240, 1244, 1253, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1277, 1281, 1286, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1311, 1312, 1317, 1319, 1320, 1321, 1327, 1328, 1330, 1332, 1337, 1340, 1344, 1349, 1351, 1354, 1355, 1356, 1358, 1359, 1374, 1386, 1390, 1392, 1394, 1397, 1398, 1400, 1402, 1403, 1405], "null_behavior": [451, 560, 852, 1069, 1186, 1374], "null_count": [47, 52, 224, 229, 357, 447, 852, 879, 971, 1066, 1068, 1374], "null_equ": [231, 357, 1127, 1374], "null_on_oob": [394, 565, 567, 1007, 1191, 1193], "null_prob": [181, 184, 188], "null_valu": [38, 49, 152, 153, 167, 357, 971], "nullabl": [40, 357], "nullbehavior": [451, 560, 852, 1069, 1186, 1374], "nullif": 1395, "nulls_equ": [260, 357, 390, 540, 558, 852, 897, 971, 1003, 1164, 1184, 1374], "nulls_last": [303, 357, 383, 403, 585, 640, 693, 694, 775, 852, 928, 971, 996, 1016, 1171, 1211, 1286, 1374], "num": [14, 41, 318, 357, 535, 852, 1158, 1374], "num_row": 212, "num_sampl": [810, 811], "number": [11, 12, 13, 14, 15, 18, 26, 38, 39, 41, 43, 47, 49, 50, 51, 52, 57, 58, 72, 73, 74, 90, 100, 121, 133, 135, 136, 137, 139, 142, 148, 152, 153, 154, 155, 157, 161, 162, 163, 164, 167, 170, 171, 172, 175, 182, 184, 187, 189, 190, 191, 198, 214, 216, 218, 223, 232, 233, 236, 244, 248, 249, 258, 259, 264, 276, 277, 289, 293, 300, 305, 308, 320, 325, 328, 330, 338, 340, 342, 351, 357, 384, 400, 402, 407, 410, 419, 420, 421, 422, 424, 425, 427, 428, 433, 441, 447, 448, 451, 455, 458, 466, 469, 471, 473, 474, 484, 497, 498, 500, 504, 505, 506, 507, 511, 513, 519, 528, 543, 544, 551, 552, 560, 568, 571, 576, 578, 583, 586, 588, 590, 592, 640, 644, 647, 650, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 687, 696, 712, 714, 716, 717, 721, 725, 727, 728, 736, 739, 753, 757, 758, 764, 777, 782, 783, 784, 796, 804, 809, 810, 811, 828, 829, 833, 837, 841, 852, 869, 872, 878, 886, 888, 894, 902, 913, 925, 930, 932, 933, 938, 939, 949, 951, 953, 962, 971, 976, 1013, 1015, 1020, 1023, 1032, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1047, 1054, 1060, 1066, 1067, 1069, 1073, 1076, 1084, 1087, 1092, 1095, 1096, 1106, 1119, 1120, 1122, 1128, 1129, 1130, 1131, 1132, 1136, 1138, 1143, 1152, 1177, 1178, 1186, 1194, 1197, 1202, 1204, 1209, 1214, 1216, 1230, 1231, 1245, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1277, 1280, 1288, 1304, 1306, 1308, 1309, 1313, 1317, 1319, 1320, 1328, 1331, 1345, 1358, 1359, 1364, 1374, 1390, 1393, 1396, 1405], "number_of_two": [391, 559], "numbers_decim": 739, "numer": [11, 17, 38, 41, 49, 156, 168, 217, 226, 261, 315, 316, 324, 325, 357, 367, 415, 429, 437, 518, 535, 595, 619, 621, 645, 653, 686, 688, 708, 745, 751, 759, 810, 852, 864, 871, 881, 898, 936, 971, 977, 1028, 1042, 1055, 1068, 1158, 1251, 1278, 1281, 1300, 1337, 1354, 1374, 1396, 1405], "numeric_dtyp": 1405, "numericliter": [437, 810, 811, 852, 1055, 1374], "numpi": [97, 106, 137, 176, 210, 214, 222, 258, 291, 292, 311, 315, 316, 357, 536, 598, 632, 633, 662, 852, 971, 979, 1159, 1162, 1165, 1167, 1168, 1233, 1234, 1259, 1354, 1355, 1374], "nworld": 730, "o": [158, 170, 416, 427, 428, 447, 705, 757, 758, 852, 1029, 1040, 1041, 1066, 1297, 1322, 1358, 1359, 1374, 1387], "oauth": 169, "obj": 977, "object": [10, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 66, 89, 109, 133, 134, 135, 140, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 182, 184, 185, 211, 212, 214, 220, 225, 232, 245, 246, 261, 263, 279, 289, 292, 297, 304, 314, 315, 316, 357, 450, 613, 791, 792, 794, 795, 812, 831, 839, 840, 852, 864, 874, 880, 885, 893, 898, 901, 913, 919, 926, 929, 968, 971, 977, 980, 1128, 1348, 1374, 1384, 1386, 1389, 1402, 1404], "observ": [260, 357, 448, 504, 505, 506, 507, 647, 852, 897, 971, 1067, 1129, 1130, 1131, 1132, 1245, 1374], "obtain": 590, "obvious": 748, "occur": [41, 64, 107, 116, 122, 262, 357, 391, 559, 620, 650, 852, 874, 885, 899, 913, 926, 971, 1004, 1185, 1229, 1247, 1354, 1374], "occurr": [529, 531, 539, 542, 763, 852, 1153, 1155, 1163, 1166, 1363, 1374], "oct": 1397, "octet_length": 1395, "octob": [488, 1110, 1397], "od": [163, 864], "odbc": [39, 154, 357], "odd": 706, "odi": [709, 711, 1303], "off": [64, 65, 152, 153, 167, 260, 261, 357, 455, 467, 777, 874, 875, 885, 897, 898, 903, 913, 926, 971, 1073, 1085], "offer": [280, 357, 644, 852, 912, 971, 1398, 1402], "offic": [41, 357], "offset": [75, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 240, 246, 289, 302, 333, 334, 357, 455, 456, 464, 475, 476, 478, 483, 496, 522, 566, 584, 660, 692, 710, 711, 725, 738, 852, 891, 893, 919, 927, 943, 944, 971, 1073, 1074, 1082, 1097, 1098, 1100, 1105, 1118, 1145, 1192, 1210, 1285, 1302, 1303, 1317, 1330, 1374, 1401], "offset_bi": 796, "often": [155, 208, 246, 289, 357, 391, 559, 653, 660, 852, 893, 919, 971, 1004, 1185, 1251, 1374, 1389, 1402], "ok": 590, "old": [40, 286, 357, 654, 655, 852, 917, 971, 1252, 1253, 1374], "old_tabl": 1404, "older": [47, 52, 357, 971], "oldw": 731, "omit": [28, 136, 140, 157, 163, 182, 208, 277, 292, 314, 319, 357, 791, 794, 806, 807, 839, 840, 977, 1403, 1404], "onc": [64, 132, 152, 153, 190, 214, 265, 291, 293, 336, 357, 578, 599, 682, 733, 734, 852, 870, 947, 971, 1204, 1224, 1271, 1325, 1326, 1374, 1387], "one": [21, 38, 39, 41, 49, 58, 66, 113, 133, 135, 136, 137, 138, 139, 152, 153, 157, 161, 162, 163, 164, 167, 171, 172, 187, 189, 208, 217, 225, 228, 229, 236, 244, 245, 246, 258, 260, 262, 263, 272, 281, 289, 290, 291, 297, 300, 315, 318, 324, 337, 357, 368, 402, 448, 450, 513, 514, 518, 521, 524, 526, 583, 590, 595, 613, 623, 624, 626, 628, 630, 631, 640, 659, 660, 685, 693, 706, 707, 708, 723, 746, 778, 782, 784, 791, 794, 814, 832, 842, 848, 852, 871, 880, 882, 883, 888, 889, 892, 893, 897, 899, 908, 915, 919, 923, 925, 936, 942, 948, 971, 986, 1015, 1020, 1067, 1138, 1149, 1150, 1209, 1216, 1221, 1245, 1257, 1277, 1298, 1299, 1300, 1315, 1338, 1354, 1374, 1389, 1390, 1392, 1396, 1397, 1404], "oneormoredatatyp": [41, 182, 357], "ones": [664, 666, 668, 670, 672, 675, 677, 679, 852, 977], "onf": [725, 1317], "onli": [1, 5, 11, 14, 21, 31, 38, 39, 41, 49, 57, 58, 63, 64, 66, 100, 132, 134, 147, 149, 152, 153, 154, 157, 158, 160, 162, 164, 167, 170, 171, 172, 173, 177, 178, 179, 180, 184, 188, 198, 208, 228, 229, 232, 234, 237, 246, 247, 258, 261, 262, 265, 281, 289, 291, 292, 311, 313, 314, 315, 326, 327, 343, 357, 368, 370, 372, 384, 436, 437, 450, 455, 467, 478, 486, 488, 508, 517, 527, 599, 606, 607, 623, 624, 625, 626, 627, 628, 629, 630, 631, 640, 652, 699, 709, 711, 723, 761, 777, 814, 852, 877, 880, 882, 883, 884, 893, 898, 899, 919, 920, 926, 937, 939, 954, 971, 977, 984, 985, 986, 1052, 1055, 1073, 1085, 1100, 1110, 1128, 1135, 1142, 1151, 1224, 1249, 1291, 1301, 1303, 1315, 1348, 1351, 1354, 1374, 1383, 1386, 1402, 1403, 1405], "onlin": [234, 357, 1135, 1374], "ont": [709, 711, 1301, 1303], "onto": 184, "oof": [724, 1316, 1392, 1397], "op": [21, 152, 153, 188, 286, 357, 606, 653, 852, 901, 917, 971, 1251, 1374], "opac": [357, 360, 1374, 1379], "opaqu": 954, "open": [41, 54, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 225, 357, 450, 852, 880, 971], "openoffic": 163, "openpyxl": [157, 176], "oper": [4, 41, 57, 66, 100, 109, 112, 119, 126, 133, 135, 136, 137, 138, 139, 149, 154, 219, 234, 237, 239, 245, 251, 262, 263, 265, 273, 277, 279, 280, 281, 284, 285, 287, 289, 292, 293, 298, 300, 309, 315, 316, 321, 324, 325, 335, 336, 357, 367, 368, 371, 402, 442, 443, 444, 445, 446, 447, 502, 503, 518, 520, 523, 525, 550, 578, 579, 580, 581, 582, 583, 590, 597, 616, 619, 621, 622, 623, 624, 626, 628, 630, 631, 634, 635, 636, 639, 640, 645, 652, 682, 685, 751, 759, 766, 767, 769, 780, 781, 785, 797, 831, 852, 864, 873, 877, 879, 884, 889, 892, 897, 899, 908, 909, 916, 920, 924, 925, 929, 936, 939, 947, 971, 1015, 1056, 1061, 1062, 1063, 1064, 1065, 1066, 1125, 1126, 1135, 1146, 1148, 1176, 1204, 1205, 1206, 1207, 1208, 1209, 1223, 1235, 1236, 1249, 1271, 1277, 1313, 1348, 1353, 1354, 1355, 1374, 1393, 1401, 1402], "operand": [759, 852], "opp": 977, "oppos": 777, "opposit": [300, 357, 402, 583, 685, 852, 925, 971, 1015, 1209, 1277, 1374], "opt": [319, 357], "optim": [49, 50, 51, 52, 64, 65, 132, 152, 158, 162, 164, 167, 169, 170, 171, 172, 258, 263, 280, 284, 291, 322, 357, 870, 874, 875, 885, 903, 913, 926, 934, 943, 944, 945, 954, 971, 1051, 1272, 1374], "optimis": [154, 265, 292, 343, 357, 971, 975, 1224, 1274, 1374, 1405], "optimist": 15, "option": [2, 3, 4, 5, 6, 7, 31, 34, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 74, 76, 143, 152, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 173, 176, 181, 182, 183, 184, 187, 188, 189, 198, 199, 225, 241, 246, 256, 261, 266, 272, 297, 304, 310, 321, 324, 326, 357, 415, 450, 455, 548, 606, 607, 613, 640, 661, 662, 663, 665, 667, 669, 671, 674, 676, 678, 691, 699, 709, 711, 723, 725, 763, 834, 842, 852, 864, 874, 875, 880, 885, 893, 897, 898, 904, 908, 913, 923, 926, 929, 936, 937, 946, 971, 977, 1028, 1073, 1174, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1284, 1291, 1301, 1303, 1315, 1317, 1350, 1363, 1374, 1392, 1397, 1404], "optional_memb": [540, 852, 1164, 1374], "or_": 852, "oracl": 155, "orang": [221, 338, 339, 341, 342, 344, 345, 347, 349, 350, 357, 428, 758, 852, 949, 950, 952, 953, 955, 956, 958, 960, 961, 1397], "orc": 201, "order": [11, 41, 49, 50, 51, 52, 55, 58, 64, 70, 136, 152, 154, 167, 175, 177, 178, 179, 180, 216, 220, 221, 228, 229, 230, 237, 245, 246, 260, 262, 273, 279, 280, 281, 285, 289, 291, 293, 294, 298, 303, 314, 315, 320, 322, 326, 327, 357, 383, 403, 408, 427, 428, 453, 454, 514, 561, 578, 585, 591, 640, 645, 650, 660, 682, 683, 684, 693, 694, 724, 731, 732, 733, 734, 748, 757, 758, 760, 761, 763, 775, 831, 842, 852, 863, 869, 877, 882, 883, 884, 889, 892, 893, 897, 899, 908, 909, 916, 919, 920, 924, 928, 929, 933, 934, 937, 971, 975, 976, 977, 996, 1016, 1021, 1040, 1041, 1050, 1071, 1072, 1139, 1171, 1187, 1204, 1211, 1217, 1243, 1247, 1255, 1271, 1273, 1275, 1286, 1316, 1341, 1358, 1359, 1360, 1361, 1363, 1374, 1383, 1386, 1392, 1401, 1402, 1405], "order_bi": [640, 852], "ordin": [479, 650, 852, 1101, 1247, 1374, 1403], "ordinal_dai": [463, 498], "org": [21, 43, 44, 134, 154, 155, 158, 160, 210, 211, 212, 222, 357, 614, 718, 926, 971, 979, 980, 1310], "orient": [59, 61, 107, 137, 139, 277, 357, 971, 1383], "origin": [58, 152, 153, 167, 228, 229, 237, 285, 322, 357, 453, 454, 482, 483, 496, 514, 561, 599, 623, 640, 652, 653, 654, 655, 656, 658, 700, 706, 715, 773, 774, 852, 882, 883, 889, 916, 934, 971, 1071, 1072, 1104, 1105, 1118, 1139, 1187, 1251, 1252, 1253, 1254, 1256, 1292, 1298, 1307, 1374], "orjson": 148, "orld": 1323, "orson": 148, "other": [1, 21, 37, 41, 47, 65, 66, 133, 151, 152, 153, 154, 157, 167, 172, 177, 178, 179, 180, 229, 231, 234, 237, 260, 261, 262, 272, 273, 281, 285, 290, 292, 295, 296, 319, 324, 326, 329, 331, 332, 355, 357, 360, 367, 371, 373, 383, 384, 437, 452, 488, 496, 502, 503, 514, 518, 523, 525, 535, 536, 540, 550, 557, 579, 580, 581, 582, 597, 603, 609, 619, 621, 634, 635, 639, 654, 655, 687, 694, 723, 750, 751, 756, 759, 766, 768, 770, 775, 778, 779, 780, 781, 789, 796, 816, 818, 821, 830, 834, 836, 852, 864, 867, 875, 889, 897, 898, 899, 908, 909, 915, 916, 921, 922, 926, 936, 937, 940, 941, 942, 971, 977, 986, 1055, 1070, 1110, 1118, 1125, 1126, 1127, 1135, 1146, 1148, 1159, 1164, 1176, 1183, 1205, 1206, 1207, 1208, 1223, 1235, 1236, 1252, 1253, 1356, 1365, 1373, 1374, 1379, 1389, 1402], "other_df": [260, 357], "other_lf": [897, 971], "otherwis": [39, 152, 154, 157, 164, 170, 183, 186, 190, 241, 265, 273, 292, 295, 314, 319, 343, 357, 407, 412, 433, 437, 448, 504, 505, 506, 507, 590, 599, 610, 640, 644, 645, 647, 652, 688, 698, 701, 705, 710, 712, 717, 721, 722, 725, 736, 763, 767, 796, 799, 808, 814, 842, 852, 909, 921, 954, 971, 976, 1020, 1025, 1047, 1055, 1067, 1129, 1130, 1131, 1132, 1216, 1224, 1243, 1245, 1249, 1272, 1274, 1281, 1290, 1293, 1297, 1302, 1304, 1309, 1313, 1314, 1317, 1328, 1363, 1374, 1394], "our": 213, "out": [8, 15, 39, 49, 50, 51, 52, 53, 54, 55, 114, 140, 143, 172, 176, 184, 188, 237, 289, 292, 357, 394, 412, 565, 567, 698, 701, 710, 842, 889, 919, 971, 1007, 1025, 1191, 1193, 1290, 1293, 1302, 1400], "outcom": [640, 852], "outer": [58, 326, 357, 937, 971], "outermost": 57, "outlin": 7, "output": [0, 8, 31, 38, 41, 43, 44, 45, 46, 47, 49, 53, 54, 55, 216, 224, 258, 265, 270, 273, 279, 281, 291, 297, 307, 320, 327, 357, 370, 372, 395, 427, 428, 433, 448, 488, 553, 554, 569, 587, 590, 598, 599, 610, 613, 624, 646, 647, 654, 697, 713, 717, 752, 757, 758, 763, 767, 768, 769, 770, 780, 781, 782, 786, 787, 800, 810, 811, 813, 814, 818, 826, 835, 836, 842, 852, 864, 869, 879, 885, 903, 908, 909, 923, 933, 954, 971, 984, 985, 999, 1000, 1008, 1018, 1040, 1041, 1047, 1067, 1110, 1179, 1180, 1195, 1213, 1224, 1244, 1245, 1289, 1305, 1309, 1344, 1358, 1359, 1363, 1374], "output_path": [614, 926, 971], "outsid": [56, 169, 172, 437, 852, 1055, 1374], "over": [52, 53, 54, 55, 66, 142, 152, 153, 154, 157, 163, 167, 172, 184, 185, 216, 234, 257, 258, 259, 265, 273, 290, 291, 292, 304, 320, 321, 335, 343, 357, 361, 427, 428, 447, 450, 505, 513, 598, 599, 610, 612, 613, 614, 615, 616, 624, 625, 650, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 757, 758, 786, 787, 800, 813, 814, 826, 831, 852, 869, 874, 885, 909, 913, 926, 929, 933, 946, 954, 968, 971, 977, 1040, 1041, 1066, 1130, 1135, 1224, 1260, 1261, 1263, 1267, 1358, 1359, 1374, 1402], "overflow": [429, 445, 446, 740, 752, 852, 871, 971, 1042, 1064, 1065, 1332, 1344, 1374], "overhead": [55, 57, 100, 167, 170, 171, 172], "overlap": [700, 707, 709, 711, 1292, 1299, 1301, 1303], "overrid": [1, 38, 41, 49, 133, 135, 136, 137, 138, 139, 152, 154, 155, 157, 161, 162, 163, 169, 171, 181, 182, 188, 190, 357, 971], "overridden": [41, 133, 135, 137, 139, 161, 162, 171, 190, 357, 971], "overview": [357, 852, 864, 971, 1374, 1401, 1405], "overwrit": [15, 39, 40, 42, 52, 55, 133, 135, 136, 137, 139, 143, 148, 152, 153, 161, 162, 167, 171, 212, 326, 357, 369, 750, 852, 937, 971], "overwrite_schema": [40, 357], "ow": 730, "own": [842, 867, 1354, 1374, 1405], "p": [60, 280, 357, 644, 834, 852, 912, 971, 977, 1302, 1304, 1387], "p13dt14h0": 488, "p1dt42": 488, "pa": [40, 133, 173, 357, 831], "pa_tabl": 831, "pacif": [456, 1074], "pack": [277, 357], "packag": [33, 34, 35, 149, 154, 357, 361, 455, 467, 777, 1073, 1085], "pad": [719, 720, 745, 1311, 1312, 1337], "pad_end": [720, 1312], "pad_start": [719, 745, 1311, 1337], "page": [47, 52, 158, 164, 170, 172, 357, 852, 864, 971, 1374, 1401], "pair": [133, 135, 136, 137, 139, 145, 161, 162, 171, 286, 357, 917, 971, 1405], "pairwis": [222, 357], "panda": [39, 134, 138, 148, 176, 237, 246, 285, 316, 322, 324, 357, 475, 476, 756, 831, 852, 889, 893, 916, 934, 936, 971, 1097, 1098, 1355, 1356, 1374, 1384, 1386, 1402], "pandas_df": 1402, "pane": [41, 357], "panic": 115, "pap": 1304, "papa": 712, "papai": [712, 1304], "papaya": [712, 725, 736, 1304, 1317, 1328], "parallel": [64, 66, 142, 155, 164, 172, 246, 261, 263, 280, 296, 332, 357, 562, 763, 842, 852, 893, 897, 898, 922, 941, 954, 971, 1066, 1188, 1363, 1374], "parallelis": [265, 343, 357, 1224, 1374], "parallelstrategi": [164, 172], "param": [41, 133, 135, 136, 137, 139, 152, 153, 161, 162, 167, 171, 183, 184, 188, 290, 357, 971], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 85, 89, 97, 101, 107, 116, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 197, 198, 212, 213, 214, 216, 217, 218, 222, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 256, 258, 259, 260, 261, 262, 264, 265, 266, 270, 272, 273, 276, 277, 279, 280, 281, 283, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 340, 342, 343, 349, 351, 357, 367, 369, 370, 371, 372, 373, 383, 390, 391, 394, 395, 402, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 427, 428, 429, 430, 434, 437, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 455, 457, 459, 460, 465, 467, 478, 481, 482, 483, 484, 485, 487, 488, 496, 499, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 533, 534, 535, 536, 540, 548, 550, 552, 557, 558, 559, 560, 562, 565, 566, 567, 568, 569, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 597, 598, 599, 606, 607, 613, 614, 615, 619, 621, 624, 625, 626, 627, 628, 629, 634, 635, 639, 640, 641, 644, 645, 647, 648, 650, 652, 653, 654, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 745, 746, 748, 750, 751, 753, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 869, 871, 872, 874, 875, 879, 880, 881, 882, 885, 886, 887, 888, 889, 891, 892, 893, 894, 897, 898, 899, 902, 903, 904, 908, 909, 912, 913, 914, 915, 916, 917, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 946, 947, 951, 953, 954, 960, 962, 971, 976, 977, 981, 983, 984, 985, 986, 996, 1003, 1004, 1007, 1008, 1015, 1016, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1040, 1041, 1042, 1043, 1048, 1054, 1055, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1075, 1077, 1078, 1083, 1085, 1100, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1118, 1121, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1143, 1144, 1145, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1164, 1171, 1174, 1178, 1183, 1184, 1185, 1186, 1188, 1191, 1192, 1193, 1194, 1195, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1214, 1215, 1216, 1217, 1224, 1236, 1240, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1280, 1284, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1337, 1338, 1341, 1345, 1348, 1349, 1350, 1351, 1352, 1354, 1355, 1358, 1359, 1360, 1363, 1364, 1365, 1374, 1383, 1384, 1385, 1386, 1387, 1389, 1394, 1397, 1402], "parameteris": 154, "parametr": 864, "paramount": [903, 971], "parent": [41, 77, 239, 357], "parenthes": 19, "parquet": [47, 52, 53, 54, 55, 164, 165, 166, 172, 201, 357, 864, 971], "parquetcompress": [47, 357], "parquetfieldoverwrit": [52, 971], "parquetmetadata": [47, 52, 357, 971], "pars": [38, 49, 151, 152, 153, 155, 157, 162, 163, 164, 167, 170, 171, 172, 216, 245, 295, 296, 300, 303, 320, 331, 332, 336, 357, 428, 437, 535, 640, 654, 655, 694, 714, 723, 739, 740, 750, 758, 768, 770, 775, 778, 779, 780, 781, 789, 802, 816, 818, 821, 830, 832, 834, 836, 842, 852, 869, 892, 921, 922, 925, 928, 933, 940, 941, 947, 971, 1041, 1055, 1158, 1252, 1253, 1277, 1306, 1331, 1332, 1359, 1374, 1383], "parseerror": [740, 1332], "parser": [152, 157], "part": [55, 133, 157, 208, 213, 314, 319, 357, 640, 707, 727, 728, 852, 942, 971, 981, 1299, 1319, 1320, 1397, 1398], "part_idx": 146, "parti": [598, 852], "partial": [136, 152, 167, 357, 971], "particip": [41, 357], "particular": [40, 152, 157, 158, 160, 216, 232, 320, 357, 427, 428, 757, 758, 852, 869, 933, 971, 1040, 1041, 1128, 1358, 1359, 1374], "partit": [47, 53, 54, 55, 155, 164, 168, 170, 172, 173, 259, 279, 357, 640, 852, 864], "partition_bi": [47, 153, 259, 357, 640, 852], "partition_chunk_size_byt": [47, 357], "partition_col": [47, 155, 357], "partition_df": 153, "partition_index": 200, "partition_num": 155, "partition_on": 155, "partition_rang": 155, "partitionbykei": [54, 55, 145, 146], "partitioned_object": [47, 357], "partitioningschem": [49, 50, 51, 52, 971], "partitionmax": 54, "partitionmaxs": [53, 55, 144], "partitionpart": [53, 54, 145, 146], "pass": [33, 34, 35, 37, 39, 40, 41, 47, 49, 50, 51, 52, 58, 64, 65, 107, 132, 135, 148, 149, 151, 154, 155, 157, 164, 167, 170, 172, 173, 177, 179, 182, 184, 186, 188, 216, 222, 226, 245, 246, 248, 261, 264, 279, 280, 281, 286, 289, 295, 300, 303, 308, 316, 319, 320, 327, 331, 336, 357, 402, 428, 455, 465, 467, 478, 482, 488, 511, 532, 583, 598, 599, 614, 640, 644, 654, 655, 660, 685, 694, 723, 730, 731, 732, 739, 758, 767, 775, 777, 802, 834, 842, 848, 852, 869, 874, 875, 881, 885, 892, 893, 895, 898, 903, 912, 913, 917, 919, 921, 925, 926, 928, 933, 940, 946, 947, 954, 971, 976, 1015, 1041, 1073, 1083, 1085, 1104, 1110, 1136, 1152, 1178, 1209, 1224, 1252, 1253, 1277, 1315, 1322, 1323, 1324, 1331, 1345, 1355, 1359, 1374, 1387, 1402], "pass_nam": [599, 852], "pass_name_to_appli": [149, 852], "password": [152, 155, 158, 160], "past": [37, 357, 903, 971], "pat": [710, 1302], "patch": 76, "path": [3, 6, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 144, 146, 149, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 225, 297, 357, 450, 613, 614, 617, 684, 852, 880, 923, 926, 971, 975, 1275, 1307, 1374, 1405], "pathlib": [36, 38, 43, 44, 47, 167, 357], "pattern": [103, 152, 153, 157, 158, 162, 164, 167, 170, 171, 172, 258, 357, 430, 434, 608, 698, 699, 700, 703, 706, 707, 708, 709, 710, 711, 721, 722, 723, 729, 867, 954, 977, 1043, 1048, 1272, 1274, 1290, 1291, 1292, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1313, 1314, 1315, 1321, 1374, 1397], "paya": 736, "pc": [915, 971], "pct": [184, 650, 852], "pct_chang": [852, 1374], "pct_valid": [650, 852], "pd": [134, 138, 756, 831, 852, 1355, 1356, 1374, 1384, 1402], "pd_df": 138, "pd_frame": 831, "pd_seri": 138, "pdsh": [142, 153], "pea": 712, "peak": [291, 357, 642, 643, 852, 1241, 1242, 1374], "peak_max": [852, 1374], "peak_min": [852, 1374], "pear": [712, 725, 736, 1304, 1317, 1328], "pearson": [222, 357, 548, 661, 691, 782, 852, 1174, 1258, 1284, 1374, 1391], "penalti": [735, 737, 738, 1327, 1329, 1330], "per": [15, 38, 41, 49, 149, 157, 182, 184, 216, 244, 266, 277, 278, 281, 296, 303, 320, 332, 346, 348, 349, 357, 394, 428, 562, 565, 567, 599, 623, 624, 626, 628, 630, 631, 694, 758, 763, 775, 852, 869, 904, 922, 928, 933, 941, 957, 959, 960, 971, 1007, 1041, 1188, 1191, 1193, 1359, 1363, 1374], "per_partition_sort_bi": [53, 54, 55], "percent": [641, 852, 1240, 1374], "percentag": [181, 184, 188, 641, 852, 1240, 1374], "percentil": [224, 357, 650, 852, 879, 971, 1068, 1374], "perform": [39, 47, 50, 52, 58, 105, 110, 112, 117, 119, 126, 134, 152, 153, 154, 158, 162, 164, 167, 169, 170, 171, 172, 212, 237, 245, 246, 260, 261, 262, 265, 284, 285, 289, 291, 292, 315, 343, 357, 418, 423, 426, 432, 433, 518, 590, 599, 640, 660, 699, 709, 711, 716, 717, 723, 735, 737, 738, 852, 889, 893, 897, 898, 899, 916, 919, 928, 943, 944, 971, 1031, 1036, 1039, 1046, 1047, 1224, 1291, 1301, 1303, 1308, 1309, 1315, 1327, 1329, 1330, 1354, 1374], "perhap": [321, 357], "period": [152, 153, 167, 246, 289, 357, 483, 504, 506, 507, 641, 660, 791, 792, 794, 795, 839, 840, 852, 893, 919, 971, 1105, 1129, 1131, 1132, 1240, 1374], "persist": 1389, "phase": [39, 325, 357], "philadelphia": [721, 722], "phone": [743, 1335], "physic": [57, 70, 100, 152, 153, 261, 281, 357, 756, 852, 870, 897, 898, 926, 971, 1356, 1374], "pi": [11, 449, 852, 1057, 1059, 1282, 1346, 1374, 1395, 1399], "pick": [185, 842], "pickl": [450, 852, 880, 971], "pip": [455, 467, 777, 1073, 1085], "pipe": [357, 852, 971], "pipelin": [157, 319, 357], "pitfal": 117, "pivot": [325, 357, 977], "pivot_long": [324, 357, 936, 971], "pivot_wid": [281, 357], "pivotagg": [281, 357], "pixel": [41, 357], "pk": [501, 852, 1124, 1374], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 100, 104, 107, 108, 109, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 167, 168, 169, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374, 1379, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1403, 1405], "pl_frame": 831, "place": [11, 12, 38, 49, 208, 214, 227, 234, 250, 251, 281, 287, 292, 303, 329, 357, 361, 383, 395, 403, 569, 585, 693, 694, 775, 852, 928, 971, 986, 996, 1008, 1016, 1135, 1195, 1211, 1248, 1286, 1374], "placehold": 801, "plai": [13, 781], "plain": [885, 915, 971], "plan": [64, 132, 261, 263, 357, 450, 852, 870, 874, 880, 885, 897, 898, 915, 923, 926, 971, 1404], "plan_stag": [926, 971], "plan_typ": [915, 971], "plane": [773, 774], "planstag": [926, 971], "plantypeprefer": [915, 971], "platform": 176, "ple": 1397, "pleas": [138, 154, 155, 237, 246, 285, 357, 361, 505, 783, 796, 852, 889, 893, 916, 971, 1130, 1374], "plenti": 977, "plot": [357, 913, 926, 971, 1374], "plu": [448, 595, 852, 1067, 1221, 1245, 1374, 1396], "plugin": [0, 852, 864], "plugin_path": 149, "point": [11, 12, 32, 33, 34, 35, 38, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 78, 79, 80, 99, 132, 143, 144, 145, 146, 147, 148, 156, 162, 164, 165, 167, 168, 170, 171, 172, 173, 174, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 228, 235, 246, 262, 263, 266, 304, 314, 319, 326, 357, 360, 361, 362, 436, 447, 448, 453, 455, 467, 483, 484, 512, 517, 518, 529, 543, 544, 578, 599, 647, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 680, 682, 777, 779, 810, 811, 852, 874, 875, 882, 885, 887, 893, 899, 903, 904, 913, 917, 929, 937, 945, 971, 977, 1050, 1052, 1066, 1067, 1071, 1073, 1085, 1105, 1106, 1137, 1142, 1153, 1204, 1245, 1258, 1259, 1262, 1264, 1265, 1269, 1271, 1352, 1357, 1374, 1379, 1402], "pointer": [232, 357, 1128, 1374], "poison": [632, 633, 852, 1233, 1234, 1374], "pola": 357, "polar": [1, 206, 357, 360, 361, 362, 851, 852, 858, 864, 971, 975, 976, 977, 1374, 1378, 1379, 1401, 1402, 1404], "polars_df": 1402, "polars_engine_affin": [49, 50, 51, 52, 64, 65, 874, 875, 885, 913, 926, 971], "polars_file_cache_ttl": [162, 167, 170, 171], "polars_hypothesis_profil": [187, 189], "polars_max_thread": 190, "polars_seri": 1402, "polars_verbos": [874, 885, 913, 926, 971], "polarsdatafram": 212, "polarsdataset": [319, 357], "polarsdatatyp": [67, 77, 85, 152, 153, 167, 181, 182, 183, 184, 185, 188, 217, 265, 314, 319, 357, 415, 429, 508, 598, 599, 654, 655, 714, 786, 787, 798, 800, 812, 813, 814, 824, 826, 827, 843, 848, 852, 871, 971, 977, 1028, 1042, 1224, 1252, 1253, 1306, 1374], "polarsintegertyp": [740, 772, 806, 807, 1332], "polarstemporaltyp": [735, 1327], "polarstyp": 66, "pool": [15, 65, 190, 191, 875, 971], "poor": 154, "pop2": [261, 357, 898, 971], "popul": [261, 357, 898, 971], "port": [39, 152, 154, 155, 158, 160, 357], "pos_a": 1397, "posit": [41, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 200, 213, 226, 233, 245, 279, 295, 296, 300, 303, 323, 331, 332, 336, 357, 402, 504, 506, 507, 508, 583, 640, 645, 647, 685, 694, 708, 721, 722, 740, 750, 773, 774, 775, 778, 779, 780, 781, 798, 830, 834, 848, 852, 881, 886, 892, 921, 922, 925, 928, 935, 940, 941, 947, 971, 977, 1015, 1129, 1131, 1132, 1209, 1243, 1245, 1277, 1300, 1332, 1374, 1403], "position": 1374, "possibl": [41, 47, 52, 107, 109, 135, 136, 139, 152, 157, 181, 184, 188, 245, 258, 265, 291, 322, 343, 357, 596, 599, 610, 662, 728, 762, 852, 874, 885, 892, 913, 926, 928, 934, 971, 1224, 1259, 1320, 1374], "post": [58, 76, 915, 971], "postgresql": [39, 154, 155, 357, 640, 852, 1400], "potenti": [117, 119, 149, 167, 170, 171, 258, 290, 292, 357, 623, 721, 722, 877, 879, 884, 920, 939, 971, 1313, 1314], "pow": [852, 1374, 1395], "pow_n": 60, "power": [832, 1243, 1374, 1396], "powersofn": 60, "pre": [55, 590, 647, 824, 827, 843, 852, 1245, 1374], "preced": [184, 977], "precis": [11, 12, 38, 41, 49, 56, 74, 154, 258, 291, 292, 311, 314, 319, 357, 457, 739, 810, 971, 977, 1075, 1331], "pred1": 842, "pred2": 842, "predefin": [281, 357], "predic": [40, 64, 147, 167, 170, 171, 172, 173, 217, 237, 256, 261, 262, 285, 290, 357, 429, 514, 765, 800, 842, 852, 874, 885, 889, 898, 899, 903, 913, 916, 917, 926, 943, 944, 971, 1139, 1272, 1274, 1374], "predicate_pushdown": [64, 874, 885, 903, 913, 926, 945, 971], "predict": [284, 327, 357], "prefer": [152, 153, 157, 158, 162, 164, 167, 189, 216, 234, 258, 265, 290, 291, 320, 343, 357, 427, 428, 508, 599, 646, 752, 757, 758, 835, 842, 852, 869, 933, 971, 975, 977, 1040, 1041, 1135, 1224, 1244, 1344, 1358, 1359, 1374, 1384, 1405], "prefilt": 172, "prefix": [40, 152, 153, 167, 208, 357, 369, 417, 434, 488, 608, 624, 627, 628, 630, 631, 729, 732, 733, 745, 852, 977, 1030, 1048, 1321, 1325, 1337], "prefix_": 627, "prefix_a": 627, "prefix_b": 627, "prefix_field": [625, 629], "presenc": [799, 808, 977], "present": [136, 184, 241, 357, 540, 614, 731, 732, 842, 852, 926, 971], "preserv": [228, 229, 237, 245, 260, 262, 265, 285, 315, 316, 326, 357, 453, 454, 455, 475, 476, 514, 561, 640, 654, 688, 705, 852, 882, 883, 889, 897, 899, 916, 937, 971, 1071, 1072, 1073, 1139, 1187, 1252, 1281, 1297, 1355, 1374], "pressur": [52, 152, 153, 162, 164, 167, 171, 172, 686, 852, 971, 1278, 1374], "presum": [598, 852], "prev_pow2": 60, "prevent": [315, 357, 369, 445, 446, 623, 752, 852, 971, 1064, 1065, 1344, 1374], "preview": [244, 357], "previou": [55, 60, 208, 357, 360, 455, 623, 624, 626, 628, 630, 631, 641, 748, 852, 1073, 1240, 1374, 1379], "previous": [2, 3], "price": [357, 360, 1405], "primari": [157, 975, 1402, 1405], "primarili": [1, 867], "primit": [40, 357, 540, 852], "print": [9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 153, 176, 177, 179, 230, 244, 245, 259, 263, 313, 335, 357, 532, 615, 791, 794, 852, 874, 895, 971, 977, 1164, 1351, 1374, 1405], "prior": [138, 357, 360, 1374, 1379], "prioriti": 185, "probabl": [501, 647, 852, 1124, 1245, 1374], "process": [15, 38, 49, 50, 51, 52, 64, 65, 152, 153, 154, 167, 190, 291, 357, 874, 875, 885, 913, 926, 971], "process_index": [314, 357], "produc": [2, 3, 97, 147, 184, 188, 217, 260, 357, 391, 429, 559, 610, 810, 813, 852, 897, 903, 971, 1004, 1185], "product": [58, 222, 260, 357, 445, 452, 852, 897, 971, 1064, 1070, 1374], "profil": [33, 187, 189, 874, 971], "profile_nam": 33, "programmat": [224, 357, 879, 971], "progress": [74, 80], "project": [64, 147, 167, 169, 170, 171, 172, 693, 694, 852, 874, 885, 903, 913, 917, 926, 971], "projection_pushdown": [64, 874, 885, 903, 913, 926, 945, 971], "prompt": 140, "propag": [390, 395, 503, 540, 558, 569, 632, 633, 635, 697, 713, 780, 781, 852, 1003, 1008, 1126, 1164, 1184, 1195, 1233, 1234, 1236, 1289, 1305, 1374], "propagate_nan": 782, "proper": [262, 357, 899, 971], "properti": [40, 41, 52, 199, 202, 203, 212, 220, 221, 230, 238, 249, 294, 299, 330, 334, 357, 360, 361, 876, 877, 884, 920, 939, 944, 971, 976, 977, 1123, 1141, 1232, 1276, 1374, 1379, 1405], "proport": [763, 852, 1363, 1374], "protocol": [40, 134, 154, 155, 212, 357], "prototyp": 848, "provid": [32, 33, 34, 35, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 53, 54, 55, 152, 153, 155, 156, 157, 162, 164, 167, 168, 169, 170, 171, 172, 184, 188, 198, 214, 237, 241, 256, 261, 285, 304, 314, 357, 360, 412, 413, 488, 508, 529, 590, 598, 599, 701, 702, 706, 714, 715, 731, 732, 733, 734, 802, 834, 852, 864, 874, 885, 889, 898, 913, 916, 926, 929, 946, 968, 971, 977, 1025, 1026, 1110, 1153, 1173, 1224, 1293, 1294, 1298, 1306, 1307, 1352, 1374, 1387, 1394, 1397, 1402, 1405], "provis": 865, "proxi": 977, "prune": [164, 170, 172, 903, 971], "pt0": 488, "public": [155, 357, 852, 864, 971, 1374, 1401], "pulp": 1383, "pure": [41, 357], "purpos": [622, 852, 971], "push": [152, 158, 162, 164, 167, 170, 171, 172, 173, 217, 357, 429, 852], "pushdown": [64, 147, 874, 885, 903, 913, 917, 926, 943, 944, 971, 1272, 1274, 1374], "put": [38, 49, 76, 357, 361, 971], "pwd": 154, "py": 169, "pyarrow": [40, 47, 56, 133, 138, 152, 155, 156, 158, 160, 164, 168, 173, 176, 309, 315, 316, 357, 831, 864, 1348, 1354, 1355, 1374, 1384, 1386, 1402], "pyarrow_opt": [47, 156, 164, 168, 357], "pyarrow_t": 1402, "pycapsul": [133, 134, 211, 980], "pycapsuleinterfac": [134, 211, 980], "pydant": 176, "pyiceberg": [42, 169, 176, 357], "pyodbc": [39, 357], "pyodbc_uri": [39, 357], "pyspark": 190, "pytest": [177, 179], "python": [0, 33, 34, 35, 43, 44, 76, 87, 103, 134, 152, 153, 158, 160, 176, 177, 179, 212, 258, 265, 291, 292, 311, 343, 357, 450, 455, 459, 467, 518, 598, 599, 708, 777, 791, 792, 794, 795, 839, 840, 852, 858, 880, 954, 971, 975, 976, 1073, 1077, 1085, 1088, 1089, 1090, 1094, 1224, 1300, 1353, 1374, 1378, 1401], "pythondatatyp": [67, 85, 217, 357, 848, 871, 971, 977], "pythonliter": [987, 1031, 1036, 1039, 1140, 1175, 1225, 1226, 1227, 1228, 1272, 1374], "pytimezon": 977, "pytorch": [319, 357, 1357, 1374], "q": [292, 357, 834, 1374, 1379, 1387], "q1": [41, 357], "q2": [41, 357], "q3": [41, 357], "q4": [41, 357], "qcut": [448, 852, 1067, 1374], "qhoo": 1405, "qmark": 154, "qqr": 977, "quad": [505, 852, 1130, 1374], "qualifi": [39, 357], "quantifi": [707, 1299], "quantil": [357, 647, 671, 672, 852, 971, 1245, 1264, 1374, 1391], "quantile_cont": 1395, "quantile_disc": 1395, "quantilemethod": [224, 283, 349, 357, 648, 671, 672, 825, 852, 879, 914, 960, 971, 1068, 1246, 1264, 1374], "quarter": [246, 261, 289, 327, 357, 478, 483, 496, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118, 1398], "queri": [10, 49, 50, 51, 52, 53, 54, 55, 64, 65, 97, 132, 154, 155, 158, 167, 170, 171, 172, 234, 263, 280, 304, 357, 590, 598, 599, 715, 831, 852, 864, 874, 875, 885, 913, 915, 926, 929, 943, 944, 945, 946, 954, 963, 971, 1135, 1224, 1307, 1374, 1383, 1384, 1386, 1390, 1401, 1403, 1404], "queryoptflag": [49, 50, 51, 52, 64, 65, 132, 874, 875, 885, 913, 926, 971], "quick": [848, 1068, 1374, 1405], "quit": [261, 357, 898, 971], "quot": [38, 39, 49, 152, 153, 155, 167, 357, 743, 971, 1335], "quota_project_id": 35, "quote_char": [38, 49, 152, 153, 167, 357, 971], "quote_plu": 155, "quote_styl": [38, 49, 357, 971], "quotes_titl": 743, "quotient": 1396, "r": [152, 153, 167, 357, 605, 644, 700, 705, 706, 707, 708, 721, 722, 852, 977, 1292, 1297, 1298, 1299, 1300, 1313, 1314, 1328, 1387, 1397], "r1": 66, "r2": 66, "r3": 66, "rab": [698, 724, 1290, 1316, 1392], "rad": 1399, "radian": [449, 773, 852, 1395], "radix": [740, 1332], "rai": [773, 774], "raini": [721, 722, 1313, 1314], "rais": [1, 10, 16, 17, 21, 40, 56, 66, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 152, 153, 157, 163, 164, 167, 172, 177, 179, 212, 214, 217, 241, 266, 281, 290, 315, 357, 394, 412, 429, 455, 481, 482, 565, 567, 598, 610, 645, 647, 655, 698, 701, 710, 735, 737, 738, 740, 742, 793, 812, 852, 904, 946, 971, 1007, 1025, 1073, 1103, 1104, 1191, 1193, 1243, 1245, 1253, 1290, 1293, 1302, 1327, 1329, 1330, 1332, 1334, 1354, 1374], "raise_if_empti": [152, 153, 157, 163, 167], "raise_if_undetermin": 610, "raise_on_fail": 946, "raker": 148, "ram": [49, 50, 51, 52, 971], "ran": [149, 852], "randn": 97, "random": [41, 43, 97, 158, 175, 182, 247, 293, 357, 527, 578, 650, 682, 687, 852, 864, 1151, 1204, 1247, 1271, 1280, 1374], "randomli": 183, "rang": [18, 41, 154, 155, 224, 232, 246, 259, 357, 374, 449, 455, 463, 467, 474, 479, 480, 481, 483, 496, 497, 533, 536, 772, 777, 780, 790, 791, 792, 793, 794, 795, 806, 807, 810, 811, 838, 839, 840, 852, 879, 893, 971, 977, 1068, 1073, 1081, 1085, 1096, 1101, 1102, 1103, 1105, 1118, 1119, 1128, 1159, 1240, 1374, 1397], "rank": [383, 562, 775, 782, 797, 852, 996, 1188, 1374], "rankmethod": [650, 852, 1247, 1374], "rare": [456, 1074], "rather": [261, 357, 520, 615, 647, 659, 745, 852, 898, 971, 1245, 1257, 1337, 1374], "raw": 155, "raw_output": [614, 926, 971], "raw_valu": 145, "re": [241, 246, 257, 322, 324, 357, 475, 476, 485, 488, 893, 934, 936, 971, 1097, 1098, 1107, 1110, 1402], "reach": [54, 719, 720, 745, 1311, 1312, 1337], "read": [37, 142, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 198, 225, 234, 357, 360, 450, 520, 852, 880, 915, 971, 1135, 1374, 1379], "read_arrow_batches_from_odbc": 154, "read_clipboard": [37, 357], "read_csv": [151, 157, 167], "read_csv_batch": 142, "read_csv_opt": 157, "read_databas": [97, 155], "read_database_uri": 154, "read_excel": 163, "read_ndjson": 161, "read_od": 157, "read_opt": 157, "read_parquet": 172, "read_tabl": 164, "readabl": 848, "reader": [47, 52, 142, 147, 152, 153, 158, 160, 162, 164, 169, 357, 971], "reader_overrid": 169, "readi": 964, "readthedoc": [41, 357], "real": [707, 1299], "realli": [447, 699, 723, 852, 1066, 1291, 1315, 1374], "realloc": [162, 167, 170, 171, 234, 357, 1135, 1374], "rearrang": [265, 357], "reason": [190, 224, 357, 590, 598, 852, 879, 971], "receiv": [58, 154, 167, 265, 280, 343, 357, 599, 644, 852, 912, 971, 1405], "recent": [177, 178, 179, 180, 315, 357, 641, 655, 852, 1240, 1253, 1354, 1374, 1386, 1402], "rechunk": [66, 133, 134, 138, 152, 153, 156, 158, 160, 162, 164, 167, 168, 170, 171, 172, 234, 357, 852, 1053, 1135, 1147, 1230, 1374], "recognis": [10, 16, 17, 21, 977], "recommend": [41, 166, 190, 224, 258, 263, 280, 357, 590, 870, 879, 971, 977], "record": [38, 44, 49, 148, 160, 173, 357, 971], "record_batch": [259, 357], "recordbatch": [133, 259, 357, 831, 1384, 1386, 1402], "recurs": [49, 50, 51, 52, 504, 506, 507, 852, 971, 1129, 1131, 1132, 1374], "red": [57, 98, 100, 343, 763, 852, 954, 1363, 1374], "redempt": 1383, "redshift": 155, "redshift_format": 201, "reduc": [52, 152, 153, 162, 164, 167, 170, 171, 172, 291, 344, 345, 347, 350, 357, 686, 787, 800, 852, 955, 956, 958, 961, 971, 1226, 1244, 1278, 1344, 1374], "reduct": [239, 357], "ref": [706, 708, 1298, 1300], "refer": [0, 33, 41, 103, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 222, 225, 357, 361, 362, 450, 485, 488, 650, 706, 721, 722, 735, 737, 738, 742, 852, 880, 971, 1107, 1110, 1247, 1313, 1314, 1327, 1329, 1330, 1334, 1374], "referenc": [41, 357, 598, 721, 722, 748, 852, 1313, 1314, 1384, 1402], "reg": 148, "regard": [152, 782], "regardless": [138, 216, 245, 261, 320, 357, 428, 460, 715, 758, 842, 852, 869, 898, 933, 971, 1041, 1078, 1307, 1359, 1374], "regex": [101, 508, 605, 606, 608, 698, 700, 706, 707, 708, 710, 721, 722, 746, 798, 852, 977, 1290, 1292, 1298, 1299, 1300, 1302, 1313, 1314], "regexp_lik": 1395, "region": [41, 169, 357], "region_nam": 33, "regist": [1, 53, 54, 55, 59, 60, 61, 62, 147, 149, 187, 189, 304, 357, 852, 929, 971, 975, 1383, 1384, 1386, 1387, 1388, 1389, 1402, 1404], "register_dataframe_namespac": [1, 60, 61, 62], "register_expr_namespac": [1, 59, 61, 62], "register_glob": [1385, 1387, 1389, 1402], "register_io_sourc": 975, "register_lazyframe_namespac": [1, 59, 60, 62], "register_mani": [1385, 1386, 1389], "register_plugin": 852, "register_plugin_funct": 852, "register_series_namespac": [1, 59, 60, 61], "registr": [304, 357, 831, 864, 929, 971, 1389, 1402], "regrid": [533, 852], "regular": [141, 258, 290, 291, 327, 334, 357, 508, 698, 699, 700, 704, 706, 707, 708, 709, 710, 711, 721, 722, 723, 777, 798, 842, 848, 852, 944, 971, 977, 1290, 1291, 1292, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1313, 1314, 1315, 1400], "reinterpret": [852, 1374], "rel": [41, 53, 54, 55, 149, 155, 156, 168, 169, 177, 178, 179, 180, 357, 478, 504, 506, 507, 536, 763, 852, 1100, 1129, 1131, 1132, 1159, 1363, 1374], "rel_tol": [536, 852, 1159, 1374], "relat": [140, 154, 208, 721, 722, 977, 1313, 1314, 1390], "releas": [65, 260, 357, 599, 852, 875, 897, 971, 1405], "release_year": 1383, "relev": 66, "reli": [260, 357, 897, 971], "reliabl": [98, 100], "remain": [53, 152, 153, 167, 228, 229, 232, 237, 252, 281, 285, 357, 453, 454, 514, 533, 534, 561, 654, 727, 728, 852, 882, 883, 889, 896, 903, 916, 971, 1071, 1072, 1128, 1139, 1156, 1157, 1187, 1252, 1319, 1320, 1374, 1389], "remaind": [415, 728, 1028, 1320, 1396], "remap": 102, "remot": [97, 152, 153, 158, 160, 971], "remov": [4, 47, 52, 152, 153, 165, 167, 212, 226, 237, 266, 312, 357, 508, 599, 624, 730, 731, 732, 733, 734, 798, 852, 881, 889, 904, 971, 1322, 1323, 1324, 1325, 1326, 1349, 1374, 1404], "removes_pronoun": 723, "removesuffix": 624, "renam": [1, 43, 44, 136, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 177, 178, 179, 180, 191, 216, 245, 246, 260, 281, 289, 295, 296, 309, 320, 327, 331, 332, 336, 338, 357, 369, 428, 447, 504, 506, 507, 520, 616, 617, 623, 624, 625, 626, 628, 630, 631, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 748, 750, 758, 828, 829, 830, 834, 852, 869, 892, 893, 897, 919, 921, 922, 933, 940, 941, 947, 949, 971, 983, 1066, 1127, 1129, 1131, 1132, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1302, 1341, 1348, 1350, 1374, 1402], "rename_field": [727, 728, 1319, 1320], "render": [614, 926, 971], "render_as_str": 154, "reoconstruct": [292, 357], "reorder": [266, 357, 904, 971], "repeat": [55, 158, 170, 651, 653, 824, 843, 852, 1251, 1374], "repeat_bi": [852, 1374], "replac": [39, 40, 42, 152, 153, 167, 235, 236, 287, 321, 324, 331, 332, 357, 360, 459, 482, 598, 599, 655, 722, 723, 738, 852, 936, 940, 941, 971, 1077, 1104, 1253, 1272, 1274, 1314, 1315, 1330, 1374, 1379, 1395], "replace_al": [721, 1252, 1313, 1374], "replace_column": 357, "replace_strict": [654, 852, 1252, 1374], "replace_time_zon": [456, 462, 464, 1079, 1080, 1108], "replace_with": [723, 1315], "replic": [756, 852, 1356, 1374], "report": [154, 232, 357, 718, 1128, 1310, 1374], "repr": [140, 430, 434, 488, 1043, 1048, 1110], "repres": [38, 41, 42, 49, 72, 73, 75, 86, 90, 95, 133, 135, 137, 138, 139, 154, 281, 304, 305, 314, 315, 328, 335, 357, 362, 433, 518, 543, 544, 586, 592, 598, 696, 712, 717, 721, 722, 725, 736, 764, 767, 784, 796, 798, 812, 813, 814, 823, 828, 829, 833, 841, 848, 852, 929, 930, 938, 971, 977, 1047, 1272, 1288, 1304, 1309, 1313, 1314, 1317, 1328, 1354, 1364, 1374, 1402], "represent": [11, 45, 46, 72, 73, 75, 90, 140, 297, 313, 357, 430, 432, 433, 434, 458, 463, 466, 469, 470, 471, 472, 473, 474, 477, 479, 480, 484, 497, 498, 500, 613, 756, 852, 885, 901, 923, 971, 1043, 1046, 1047, 1048, 1049, 1076, 1081, 1084, 1086, 1087, 1091, 1092, 1093, 1095, 1096, 1099, 1101, 1102, 1106, 1119, 1120, 1122, 1351, 1356, 1374, 1393], "request": 35, "requested_schema": [211, 980], "requir": [1, 33, 34, 35, 40, 41, 58, 66, 138, 143, 154, 155, 177, 178, 179, 180, 193, 222, 228, 290, 314, 315, 316, 319, 357, 408, 430, 434, 504, 506, 507, 591, 640, 664, 666, 668, 670, 672, 675, 677, 679, 683, 686, 735, 737, 738, 760, 776, 778, 782, 784, 827, 852, 867, 877, 882, 883, 884, 928, 939, 971, 1021, 1127, 1129, 1131, 1132, 1217, 1273, 1278, 1313, 1327, 1329, 1330, 1354, 1355, 1360, 1374], "require_al": 977, "require_http": 193, "rerais": [65, 875, 971], "rerun": [234, 357, 1135, 1374], "resampl": [246, 357, 893, 971], "reset": [4, 208], "reset_index": [138, 246, 357, 893, 971], "reshap": [281, 315, 357, 563, 779, 852, 1189, 1374], "resolv": [149, 237, 357, 459, 590, 876, 877, 884, 920, 939, 971], "resourc": [946, 975], "respect": [41, 152, 153, 167, 266, 281, 357, 699, 709, 711, 723, 904, 971, 977, 1291, 1301, 1303, 1315, 1357, 1374], "respons": [155, 273, 357, 909, 971], "rest": [743, 1335, 1397], "restor": [208, 357, 360, 1374, 1379], "restore_default": 208, "restrict": [31, 728, 1320], "result": [14, 38, 45, 46, 47, 49, 50, 51, 52, 58, 66, 137, 138, 139, 154, 155, 157, 167, 170, 172, 173, 188, 234, 237, 246, 247, 260, 261, 262, 277, 281, 285, 289, 292, 297, 298, 300, 314, 315, 316, 327, 334, 336, 342, 357, 455, 483, 485, 488, 496, 504, 505, 506, 507, 511, 518, 527, 535, 548, 589, 590, 598, 599, 613, 640, 645, 647, 654, 655, 656, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 705, 722, 726, 727, 738, 759, 763, 786, 787, 791, 793, 794, 795, 796, 811, 812, 813, 824, 827, 828, 829, 831, 842, 843, 852, 870, 874, 879, 889, 893, 897, 898, 899, 903, 913, 916, 919, 923, 924, 925, 944, 947, 953, 964, 965, 971, 977, 986, 1105, 1107, 1110, 1118, 1129, 1131, 1132, 1135, 1136, 1151, 1158, 1174, 1215, 1224, 1243, 1245, 1252, 1253, 1254, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1275, 1277, 1297, 1318, 1319, 1330, 1354, 1355, 1363, 1374, 1384, 1390, 1397, 1402, 1403, 1405], "resultset": 154, "retain": [237, 285, 357, 889, 916, 971], "retri": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 170, 171, 172, 198, 357, 971], "retriev": [193, 194, 198, 241, 314, 357, 388, 389, 555, 556, 746, 823, 1001, 1002, 1181, 1182, 1338, 1352, 1374, 1390], "return": [1, 5, 6, 31, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 97, 110, 113, 121, 129, 132, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 190, 191, 198, 210, 213, 216, 218, 221, 222, 223, 227, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 244, 245, 246, 248, 249, 250, 254, 256, 257, 258, 259, 260, 263, 264, 265, 266, 268, 270, 275, 276, 277, 279, 280, 281, 286, 289, 290, 291, 292, 293, 297, 304, 307, 308, 314, 315, 316, 319, 320, 321, 322, 327, 330, 331, 332, 338, 340, 342, 343, 346, 351, 357, 370, 372, 375, 376, 377, 378, 379, 380, 383, 384, 388, 389, 390, 392, 394, 395, 406, 411, 412, 413, 414, 415, 416, 417, 427, 428, 432, 433, 438, 439, 440, 441, 442, 448, 449, 455, 456, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 505, 510, 518, 521, 522, 524, 528, 529, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 551, 552, 555, 556, 558, 563, 565, 567, 568, 569, 571, 578, 588, 589, 596, 598, 599, 611, 613, 614, 615, 620, 644, 646, 647, 649, 653, 654, 655, 656, 658, 659, 682, 683, 688, 689, 690, 697, 698, 700, 701, 702, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 724, 725, 726, 727, 728, 736, 740, 745, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 766, 767, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 799, 800, 802, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 824, 826, 827, 830, 831, 834, 835, 837, 838, 839, 840, 842, 843, 852, 867, 869, 872, 874, 875, 877, 878, 879, 884, 885, 891, 893, 894, 897, 901, 902, 903, 904, 912, 913, 917, 919, 923, 926, 932, 933, 934, 939, 940, 941, 949, 951, 953, 957, 962, 964, 971, 976, 977, 979, 981, 984, 985, 986, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1019, 1021, 1024, 1025, 1026, 1028, 1029, 1040, 1041, 1045, 1046, 1047, 1049, 1054, 1060, 1061, 1067, 1068, 1073, 1074, 1076, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1128, 1130, 1134, 1135, 1140, 1145, 1152, 1153, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1189, 1191, 1193, 1194, 1195, 1197, 1204, 1214, 1215, 1222, 1224, 1229, 1238, 1244, 1245, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1271, 1273, 1281, 1289, 1290, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1316, 1317, 1318, 1319, 1320, 1328, 1332, 1337, 1344, 1345, 1348, 1355, 1358, 1359, 1361, 1362, 1363, 1365, 1374, 1383, 1384, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1400, 1402, 1403, 1404, 1405], "return_as_str": [244, 357, 615], "return_dtyp": [41, 265, 357, 362, 598, 599, 654, 655, 766, 786, 787, 800, 813, 814, 826, 852, 1224, 1252, 1253, 1374], "return_typ": [314, 319, 357], "returns_scalar": [149, 598, 599, 786, 787, 800, 814, 826, 852], "reus": [64, 208, 874, 885, 913, 926, 971], "reusabl": 208, "rev": [262, 357, 899, 971], "revers": [216, 232, 320, 357, 428, 442, 443, 444, 445, 446, 624, 626, 628, 758, 779, 785, 852, 869, 933, 971, 1041, 1061, 1062, 1063, 1064, 1065, 1359, 1374, 1392, 1395], "reverse_": 626, "reverse_a": 626, "reverse_b": 626, "revert": [7, 9, 11], "rfc": 152, "rhap": [709, 711, 1303], "rhapsodi": [709, 711, 1303], "right": [9, 11, 16, 17, 19, 28, 41, 74, 152, 153, 177, 178, 179, 180, 246, 260, 261, 289, 326, 357, 448, 504, 505, 506, 507, 535, 579, 580, 581, 582, 647, 660, 664, 666, 668, 670, 672, 675, 677, 679, 683, 691, 778, 791, 792, 794, 795, 810, 811, 839, 840, 842, 852, 893, 897, 898, 919, 937, 971, 1067, 1129, 1130, 1131, 1132, 1158, 1205, 1206, 1207, 1208, 1245, 1273, 1284, 1374, 1390, 1395], "right_left": [260, 326, 357, 897, 937, 971], "right_on": [260, 261, 326, 357, 897, 898, 937, 971], "rightmost": [683, 852, 1273, 1374, 1397], "rld": [730, 732, 1324], "rle": [659, 852, 1257, 1374], "rle_id": [658, 852, 1374], "rle_id_a": [659, 852], "rle_id_ab": [659, 852], "rmm": 946, "rn": [152, 153, 167], "role": [33, 155], "roll": [246, 357, 455, 475, 476, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 780, 828, 829, 852, 893, 971, 1073, 1097, 1098, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374], "rollback": [476, 1098], "rolled_forward": 455, "rollforward": [475, 1097], "rolling_kurtosi": [852, 1374], "rolling_map": [852, 1374], "rolling_max": [852, 1374], "rolling_max_bi": 852, "rolling_mean": [852, 1374], "rolling_mean_bi": 852, "rolling_median": [852, 1374], "rolling_median_bi": 852, "rolling_min": [852, 1374], "rolling_min_bi": 852, "rolling_quantil": [852, 1374], "rolling_quantile_bi": 852, "rolling_row_max": [664, 852], "rolling_row_mean": [666, 852], "rolling_row_median": [668, 852], "rolling_row_min": [670, 852], "rolling_row_quantil": [672, 852], "rolling_row_std": [675, 852], "rolling_row_sum": [677, 852], "rolling_row_var": [679, 852], "rolling_skew": [852, 1374], "rolling_std": [852, 1374], "rolling_std_bi": 852, "rolling_sum": [662, 852, 1259, 1374], "rolling_sum_bi": 852, "rolling_var": [852, 1374], "rolling_var_bi": 852, "rollinggroupbi": [289, 357], "ronaldo": [706, 1298], "root": [156, 168, 435, 612, 623, 624, 626, 628, 630, 631, 695, 851, 852, 1051, 1287, 1374, 1396], "rotat": [357, 360, 1374, 1379], "round": [21, 41, 60, 140, 154, 357, 436, 440, 517, 681, 754, 852, 1052, 1142, 1270, 1374, 1395], "round_sig_fig": [852, 1374], "round_str": 1105, "round_td": 1105, "rounded_corn": 21, "roundmod": [680, 852, 1269, 1374], "row": [15, 21, 26, 38, 39, 41, 47, 49, 52, 54, 58, 59, 61, 66, 107, 113, 121, 129, 136, 137, 138, 139, 140, 147, 148, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 177, 178, 184, 213, 214, 216, 217, 218, 228, 229, 234, 237, 239, 240, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 272, 273, 277, 281, 285, 289, 292, 293, 302, 308, 311, 313, 314, 319, 320, 322, 324, 325, 326, 333, 334, 338, 340, 342, 343, 351, 357, 361, 383, 384, 392, 407, 428, 429, 510, 518, 522, 528, 552, 553, 554, 563, 587, 590, 640, 641, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 687, 692, 694, 705, 714, 753, 758, 772, 775, 781, 783, 800, 804, 806, 807, 809, 811, 826, 828, 829, 837, 852, 869, 872, 882, 883, 889, 890, 891, 893, 894, 897, 898, 899, 900, 902, 903, 908, 909, 916, 927, 932, 933, 934, 936, 937, 943, 944, 949, 951, 953, 954, 962, 971, 981, 996, 999, 1000, 1005, 1018, 1134, 1135, 1145, 1152, 1178, 1179, 1180, 1189, 1213, 1240, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1285, 1297, 1306, 1345, 1374, 1383, 1390, 1392, 1403, 1404, 1405], "row_count_nam": [152, 153, 158, 160, 164, 167, 170, 171, 172], "row_count_offset": [152, 153, 158, 160, 164, 167, 170, 171, 172], "row_group": [164, 172], "row_group_s": [47, 52, 357, 971], "row_height": [41, 357], "row_idx": 214, "row_index": [41, 357], "row_index_nam": [152, 153, 158, 160, 162, 164, 167, 170, 171, 172], "row_index_offset": [152, 153, 158, 160, 162, 164, 167, 170, 171, 172], "row_nr": [333, 357, 943, 971], "row_tot": [41, 357], "rowname_col": [357, 361], "rows_by_kei": [258, 291, 310, 357], "rowserror": [290, 357], "rowtotalsdefinit": [41, 357], "rtol": [177, 178, 179, 180], "rtrim": 1395, "ru": 1397, "rule": [152, 164, 167, 172, 239, 266, 357, 699, 723, 738, 904, 971, 1291, 1315, 1330], "run": [49, 50, 51, 52, 64, 65, 73, 97, 132, 154, 184, 187, 188, 189, 245, 260, 263, 265, 296, 322, 332, 343, 357, 433, 447, 562, 598, 599, 658, 659, 717, 830, 852, 874, 875, 885, 892, 897, 903, 908, 913, 915, 922, 926, 934, 941, 946, 971, 975, 977, 1047, 1066, 1188, 1224, 1256, 1257, 1309, 1374, 1402, 1405], "runtim": 975, "runtimeerror": [315, 357, 1354, 1374], "rust": [38, 47, 49, 103, 115, 149, 157, 158, 160, 164, 265, 343, 357, 708, 971, 975, 1224, 1300, 1374], "s1": [57, 98, 100, 179, 180, 239, 357, 778, 782, 784, 1020, 1126, 1127, 1147, 1173, 1183, 1216, 1236, 1248, 1365, 1374], "s2": [1, 57, 98, 100, 179, 180, 239, 357, 778, 782, 784, 1020, 1053, 1070, 1126, 1127, 1147, 1164, 1173, 1183, 1216, 1230, 1236, 1248, 1365, 1374], "s3": [1, 40, 156, 168, 169, 172, 173, 357, 915, 971, 1020, 1216, 1374], "s_": 488, "s_bar": 1392, "s_dt": [488, 1397, 1398], "s_dt1": 1397, "s_dt2": 1397, "s_dtm": 488, "s_foo": 1392, "s_from_str_repr": [1351, 1374], "s_head_5": 712, "s_head_n": 712, "s_tail_5": 736, "s_tail_n": 736, "s_td": 488, "s_tm": [488, 1397, 1398], "safe": [652, 852, 1249, 1374], "sale": [640, 852], "salesforce_format": 201, "sam": 13, "same": [21, 40, 41, 55, 57, 58, 64, 65, 66, 98, 100, 116, 158, 167, 177, 178, 179, 180, 182, 208, 214, 228, 229, 235, 236, 237, 245, 261, 265, 281, 285, 291, 292, 303, 322, 331, 332, 336, 343, 357, 366, 373, 406, 432, 453, 454, 488, 512, 513, 514, 518, 520, 521, 524, 589, 603, 609, 640, 654, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 687, 694, 705, 716, 748, 842, 848, 852, 874, 875, 882, 883, 887, 888, 889, 892, 898, 901, 903, 916, 926, 928, 934, 940, 941, 947, 971, 977, 982, 1019, 1046, 1071, 1072, 1077, 1110, 1137, 1138, 1215, 1224, 1252, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1297, 1308, 1365, 1374, 1388, 1390, 1398], "samoa": [456, 1074], "sampl": [152, 153, 343, 357, 687, 691, 810, 811, 852, 954, 1284, 1374, 1391], "sample_s": [152, 153], "sampled_from": 1405, "sandwich": [242, 357], "sat": [357, 360], "satisfi": [535, 852, 1158, 1374], "saturdai": [246, 357, 893, 971], "save": [2, 3, 6, 246, 261, 289, 327, 357, 456, 464, 478, 483, 496, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 796, 839, 840, 848, 852, 864, 893, 898, 919, 971, 1082, 1100, 1105, 1118], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [149, 213, 214, 256, 265, 290, 300, 357, 433, 598, 683, 685, 712, 717, 725, 736, 786, 800, 812, 814, 826, 852, 925, 971, 981, 1047, 1173, 1273, 1277, 1304, 1309, 1317, 1328, 1374], "scale": [29, 74, 232, 357, 416, 599, 644, 680, 739, 852, 977, 1128, 1331, 1374], "scale_negative_even": [644, 852], "scan": [56, 136, 139, 152, 153, 154, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 198, 357, 714, 864, 971, 1306], "scan_csv": [49, 50, 51, 52, 152, 153, 971], "scan_ipc": 158, "scan_ndjson": 162, "scan_parquet": [53, 54, 55, 164, 166, 173, 915, 971], "scan_pyarrow_dataset": [164, 172], "scan_tabl": 206, "scancastopt": 172, "scatter": [357, 360, 1374, 1379], "scenario": 1374, "schedul": [65, 875, 971], "schema": [0, 1, 15, 29, 36, 39, 40, 56, 59, 60, 61, 66, 97, 107, 124, 125, 133, 135, 136, 137, 139, 147, 148, 152, 153, 154, 155, 157, 159, 161, 162, 163, 164, 166, 167, 170, 171, 172, 194, 196, 197, 198, 202, 204, 218, 219, 220, 226, 230, 232, 259, 263, 265, 266, 273, 277, 286, 315, 319, 357, 362, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 462, 589, 590, 610, 611, 614, 615, 625, 627, 629, 714, 766, 834, 852, 864, 872, 873, 876, 877, 881, 884, 903, 904, 909, 917, 939, 954, 971, 977, 1056, 1306, 1374, 1383], "schema_mod": [40, 357], "schema_overrid": [133, 135, 136, 137, 138, 139, 152, 153, 154, 155, 157, 161, 162, 163, 167, 171, 259, 315, 357, 680, 852, 971, 977], "schemadefinit": [133, 135, 136, 137, 139, 161, 162, 171, 357, 971], "schemadict": [89, 97, 133, 135, 136, 137, 138, 139, 147, 152, 154, 155, 157, 163, 164, 167, 170, 172, 266, 357, 362, 611, 614, 615, 834, 903, 904, 954, 971], "schemaerror": [266, 357, 904, 971], "schemainitdatatyp": 976, "scheme": [53, 54, 55], "schindler": 1383, "scientif": [12, 38, 49, 357, 971], "scikit": [319, 357], "scipi": [548, 691, 852, 1174, 1284, 1374], "scope": [34, 35, 208, 863, 977, 1386, 1389, 1402], "score": [41, 281, 357], "script": [357, 360, 1374, 1379], "scroll": [41, 357], "sdiff": 581, "sdk": 193, "search": [261, 357, 590, 699, 709, 711, 723, 898, 928, 971, 1155, 1291, 1301, 1303, 1315, 1374], "search_sort": [852, 1374], "searchsortedsid": [683, 852, 1273, 1374], "searchstrategi": [181, 183, 184, 185, 186, 188], "season": [721, 722], "sec": [1398, 1405], "second": [38, 49, 162, 167, 170, 171, 177, 178, 179, 180, 246, 261, 289, 327, 357, 466, 470, 472, 473, 477, 478, 481, 483, 488, 495, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 721, 722, 735, 738, 793, 794, 795, 796, 838, 839, 840, 852, 893, 898, 919, 971, 977, 1100, 1103, 1105, 1117, 1118, 1130, 1313, 1314, 1327, 1330, 1374, 1397, 1398, 1403, 1405], "second_part": [727, 728, 1319, 1320], "seconds_diff": 495, "secret": [169, 172], "section": [281, 357, 698, 706, 707, 710, 721, 722, 791, 792, 794, 795, 839, 840, 975, 1290, 1298, 1299, 1302, 1313, 1314], "secur": [450, 852, 880, 971], "see": [38, 40, 41, 43, 44, 47, 49, 50, 51, 52, 73, 147, 149, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 177, 178, 179, 180, 184, 188, 198, 210, 222, 237, 246, 260, 280, 281, 285, 326, 357, 361, 421, 422, 424, 425, 437, 488, 513, 548, 598, 691, 698, 706, 707, 710, 712, 721, 722, 736, 791, 792, 794, 795, 826, 839, 840, 848, 852, 889, 893, 916, 937, 946, 971, 975, 977, 979, 1034, 1035, 1037, 1038, 1055, 1110, 1174, 1284, 1290, 1298, 1299, 1302, 1304, 1313, 1314, 1328, 1374, 1405], "seed": [97, 175, 247, 293, 357, 527, 578, 650, 682, 687, 852, 1151, 1204, 1247, 1271, 1280, 1374], "seed_1": [247, 357, 527, 852, 1151, 1374], "seed_2": [247, 357, 527, 852, 1151, 1374], "seed_3": [247, 357, 527, 852, 1151, 1374], "seen": [488, 1110], "seen_group": 153, "select": [1, 8, 39, 49, 50, 51, 52, 58, 59, 60, 61, 64, 65, 97, 104, 150, 152, 153, 154, 155, 156, 158, 160, 164, 167, 169, 173, 183, 213, 215, 256, 257, 261, 265, 277, 280, 290, 296, 302, 304, 317, 323, 327, 334, 357, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 392, 397, 398, 399, 404, 405, 406, 407, 408, 409, 411, 414, 417, 418, 423, 426, 427, 428, 431, 435, 436, 438, 439, 440, 441, 447, 449, 451, 452, 453, 454, 457, 459, 460, 469, 475, 476, 478, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 501, 504, 506, 507, 508, 509, 510, 511, 515, 517, 522, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 541, 547, 548, 549, 551, 552, 562, 563, 590, 593, 594, 595, 596, 598, 600, 601, 602, 606, 618, 620, 622, 623, 625, 627, 629, 632, 633, 637, 638, 639, 640, 642, 643, 646, 648, 649, 650, 651, 652, 653, 656, 657, 658, 661, 662, 673, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 705, 706, 707, 708, 709, 710, 711, 713, 718, 735, 746, 748, 749, 752, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 767, 769, 771, 774, 775, 776, 779, 780, 782, 783, 784, 788, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 815, 817, 819, 820, 822, 823, 826, 827, 831, 832, 833, 834, 835, 837, 841, 848, 852, 867, 868, 874, 875, 877, 885, 898, 912, 913, 922, 926, 927, 929, 935, 942, 944, 946, 971, 977, 981, 1104, 1144, 1188, 1272, 1274, 1285, 1303, 1307, 1327, 1374, 1383, 1384, 1385, 1386, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404], "select_from": [183, 186, 188], "select_seq": [357, 971], "selector": [0, 41, 217, 226, 228, 229, 233, 272, 279, 281, 303, 312, 314, 319, 322, 324, 325, 357, 361, 488, 508, 606, 852, 864, 871, 881, 882, 883, 886, 908, 928, 934, 936, 971], "selectortyp": [41, 357], "self": [1, 59, 60, 61, 62, 64, 174, 304, 335, 357, 831, 852, 874, 885, 913, 926, 929, 942, 971, 986, 1032, 1033, 1034, 1035, 1037, 1038, 1042, 1056, 1061, 1135, 1139, 1154, 1222, 1224, 1237, 1241, 1242, 1248, 1251, 1252, 1253, 1272, 1274, 1275, 1286, 1362, 1365, 1374, 1385, 1386, 1387, 1389, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402], "self_dtyp": [598, 599, 852], "semi": [148, 260, 357, 897, 971, 1390], "semigraph": 21, "sens": [152, 158, 160, 273, 327, 357, 640, 852, 909, 971], "sensit": [698, 707, 710, 721, 722, 1290, 1299, 1302, 1313, 1314], "sep": 148, "separ": [9, 11, 25, 28, 37, 38, 49, 142, 148, 151, 152, 153, 157, 167, 279, 281, 312, 321, 323, 357, 392, 395, 488, 563, 569, 599, 705, 781, 786, 787, 852, 926, 935, 971, 1005, 1008, 1110, 1189, 1195, 1297, 1343, 1349, 1374, 1397], "seq": 27, "seq1": 27, "seq2": 27, "sequenc": [41, 47, 52, 53, 55, 58, 89, 133, 135, 136, 137, 139, 143, 148, 152, 153, 154, 157, 161, 162, 163, 167, 171, 182, 183, 184, 185, 186, 214, 216, 224, 234, 260, 261, 272, 277, 279, 280, 281, 292, 303, 312, 314, 319, 320, 324, 325, 326, 327, 357, 407, 428, 448, 521, 540, 590, 598, 644, 647, 654, 655, 694, 723, 733, 734, 748, 758, 775, 786, 787, 800, 802, 810, 811, 813, 814, 823, 826, 832, 852, 869, 879, 897, 898, 908, 912, 928, 933, 936, 937, 971, 977, 1020, 1041, 1067, 1068, 1135, 1216, 1245, 1252, 1253, 1315, 1341, 1359, 1374], "sequenti": [64, 296, 332, 357, 874, 885, 913, 922, 926, 941, 971], "ser": [1079, 1080, 1108], "seri": [0, 1, 12, 26, 41, 57, 59, 60, 61, 62, 66, 67, 76, 89, 98, 100, 109, 133, 135, 138, 140, 149, 177, 179, 180, 184, 213, 214, 227, 237, 239, 241, 243, 246, 247, 250, 251, 252, 253, 255, 257, 268, 270, 275, 285, 287, 289, 293, 307, 310, 312, 313, 315, 317, 318, 337, 357, 373, 384, 407, 411, 430, 431, 432, 433, 434, 436, 482, 511, 514, 517, 521, 522, 532, 533, 534, 538, 540, 541, 543, 544, 545, 546, 557, 563, 565, 590, 596, 598, 599, 650, 651, 652, 653, 654, 655, 660, 662, 673, 684, 686, 712, 723, 735, 736, 737, 738, 742, 746, 757, 762, 772, 776, 778, 779, 782, 784, 786, 787, 791, 792, 794, 795, 800, 802, 806, 807, 810, 811, 812, 813, 814, 824, 826, 827, 830, 831, 834, 839, 840, 843, 852, 864, 889, 893, 896, 916, 919, 948, 971, 1366, 1368, 1370, 1373, 1375, 1378, 1379, 1380, 1381, 1382, 1384, 1386, 1397, 1402, 1405], "serial": [45, 46, 225, 357, 450, 617, 852, 880, 971], "serializ": [149, 852], "serializationformat": [225, 297, 357, 450, 613, 852, 880, 923, 971], "seriesplot": [1374, 1379], "server": [39, 154, 155, 357], "servic": 33, "service_account": [156, 168], "service_account_json_absolute_path": [156, 168], "session": 154, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 38, 39, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 58, 59, 64, 65, 70, 73, 74, 76, 134, 135, 136, 139, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 167, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 198, 208, 212, 221, 228, 229, 238, 241, 245, 247, 258, 260, 261, 270, 272, 291, 293, 297, 302, 307, 312, 314, 315, 319, 321, 322, 324, 325, 326, 357, 360, 370, 372, 394, 395, 407, 419, 421, 422, 424, 425, 437, 448, 481, 482, 499, 527, 540, 565, 567, 569, 578, 579, 580, 581, 582, 584, 590, 598, 599, 606, 607, 613, 644, 647, 654, 655, 661, 662, 663, 665, 667, 669, 671, 673, 674, 676, 678, 682, 687, 691, 692, 697, 713, 714, 721, 722, 725, 730, 731, 732, 733, 734, 735, 737, 738, 742, 763, 767, 769, 772, 776, 778, 781, 782, 784, 786, 787, 791, 792, 793, 794, 795, 796, 800, 806, 807, 810, 811, 812, 818, 824, 826, 827, 828, 829, 830, 834, 836, 839, 840, 842, 843, 852, 864, 874, 875, 882, 885, 892, 897, 898, 903, 908, 913, 923, 926, 927, 934, 936, 937, 945, 954, 971, 984, 985, 1007, 1008, 1020, 1025, 1032, 1034, 1035, 1037, 1038, 1055, 1067, 1103, 1104, 1121, 1141, 1151, 1164, 1171, 1191, 1193, 1195, 1204, 1205, 1206, 1207, 1208, 1210, 1216, 1224, 1245, 1252, 1253, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1280, 1284, 1285, 1289, 1305, 1306, 1313, 1314, 1317, 1322, 1323, 1324, 1327, 1329, 1330, 1334, 1354, 1363, 1374, 1393, 1401, 1405], "set_": 208, "set_decimal_separ": 28, "set_environ": 187, "set_except": [65, 875, 971], "set_fmt_float": 31, "set_fmt_str_length": [699, 709, 711, 723, 1291, 1303, 1315], "set_index": [246, 357, 893, 971], "set_legend": [41, 357], "set_sort": [289, 327, 357, 660, 852, 919, 971, 1374], "set_stat": 31, "set_streaming_chunk_s": [874, 971], "set_styl": [41, 357], "set_tbl_column_data_type_inlin": 25, "set_tbl_format": [7, 58], "set_tbl_row": 208, "set_tbl_width_char": 723, "set_thousands_separ": 9, "set_titl": [41, 357], "set_verbos": 208, "setosa": [357, 360], "setup": 1405, "seventeen": [531, 852], "sever": [133, 135, 136, 137, 139, 161, 162, 171, 357, 915, 971, 1405], "sfu": 155, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 57, 58, 59, 60, 61, 62, 66, 67, 85, 89, 97, 98, 100, 107, 126, 133, 134, 135, 136, 137, 138, 139, 140, 148, 152, 161, 162, 167, 173, 177, 179, 181, 184, 188, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 239, 240, 241, 243, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 293, 295, 297, 300, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 618, 619, 620, 621, 622, 623, 624, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 867, 868, 869, 871, 872, 874, 875, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 981, 982, 983, 986, 988, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1126, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1144, 1145, 1147, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1229, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1245, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1277, 1278, 1280, 1281, 1282, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1343, 1345, 1346, 1347, 1349, 1350, 1351, 1356, 1358, 1359, 1360, 1361, 1362, 1363, 1365, 1374, 1383, 1384, 1385, 1386, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1402, 1403], "share": [177, 178, 179, 180, 232, 357, 1128, 1374], "shawshank": 1383, "sheet": [41, 157, 163, 357], "sheet1": [41, 357], "sheet_id": [157, 163], "sheet_nam": [157, 163], "sheet_zoom": [41, 357], "sheetnam": [157, 163], "shift": [246, 357, 410, 451, 519, 560, 641, 780, 852, 893, 971, 1023, 1069, 1143, 1186, 1240, 1374], "short": [177, 179, 415, 1028], "shorten": [177, 179], "shorter": [152, 153, 167, 590, 806, 807], "shorthand": [357, 360, 842, 1374, 1379], "should": [11, 39, 41, 47, 49, 50, 51, 52, 66, 97, 133, 135, 137, 139, 147, 148, 157, 161, 162, 167, 169, 171, 173, 181, 182, 184, 188, 214, 226, 258, 260, 261, 265, 290, 291, 292, 303, 311, 312, 323, 343, 357, 368, 447, 450, 455, 499, 505, 508, 536, 543, 544, 562, 599, 613, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 691, 694, 721, 722, 739, 763, 775, 777, 796, 798, 812, 814, 828, 829, 848, 852, 874, 880, 881, 885, 897, 898, 903, 913, 923, 926, 928, 935, 971, 977, 1066, 1073, 1121, 1130, 1159, 1188, 1224, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1273, 1284, 1313, 1314, 1331, 1363, 1374, 1384], "show": [31, 41, 224, 229, 244, 263, 278, 357, 529, 614, 852, 879, 913, 926, 971, 1153, 1374, 1388, 1401], "show_graph": [263, 357, 971], "show_plot": [913, 971], "shrink": [301, 357, 686, 852, 1278, 1279, 1374], "shrink_dtyp": [852, 1374], "shrink_to_fit": [357, 1374], "shuffl": [175, 293, 319, 343, 357, 578, 682, 852, 954, 1204, 1271, 1374], "side": [41, 149, 246, 289, 357, 535, 579, 580, 581, 582, 660, 664, 666, 668, 670, 672, 675, 677, 679, 683, 791, 792, 794, 795, 810, 811, 839, 840, 852, 893, 919, 971, 1158, 1205, 1206, 1207, 1208, 1273, 1374], "sign": [72, 73, 75, 80, 81, 82, 83, 84, 90, 478, 652, 721, 722, 745, 852, 977, 1100, 1249, 1313, 1314, 1337, 1374, 1395], "sign_x": 1396, "signed_integ": 977, "signific": [172, 258, 265, 357, 421, 422, 424, 425, 599, 681, 852, 1034, 1035, 1037, 1038, 1224, 1270, 1374], "significantli": [157, 265, 343, 357, 1224, 1374, 1405], "silenc": 107, "silent": [56, 172, 740, 1332], "similar": [37, 47, 56, 151, 190, 214, 239, 261, 300, 322, 324, 357, 402, 485, 488, 583, 640, 685, 750, 809, 842, 852, 889, 898, 925, 934, 936, 971, 1015, 1107, 1110, 1209, 1277, 1374], "similarli": [41, 136, 246, 261, 289, 327, 357, 478, 483, 496, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 1100, 1105, 1118], "simpl": [41, 277, 357], "simpler": [977, 1313], "simpli": [167, 786, 800, 1049], "simplifi": [64, 874, 885, 913, 926, 971], "simplify_express": [64, 874, 885, 913, 926, 945, 971], "sin": [852, 1374, 1395], "sinc": [8, 40, 64, 67, 72, 73, 90, 152, 153, 154, 156, 162, 164, 167, 168, 170, 171, 172, 181, 182, 183, 184, 188, 191, 215, 272, 315, 333, 338, 357, 462, 465, 499, 520, 598, 599, 617, 654, 697, 705, 765, 774, 782, 802, 852, 868, 874, 885, 908, 913, 926, 928, 942, 943, 949, 971, 1080, 1083, 1089, 1090, 1121, 1150, 1252, 1289, 1297, 1354, 1374], "sind": 1395, "sine": [377, 378, 598, 689, 690, 852, 990, 991, 1282, 1283, 1374, 1399], "singl": [41, 47, 58, 65, 66, 77, 151, 152, 153, 154, 155, 156, 157, 164, 167, 168, 170, 182, 214, 217, 226, 227, 228, 229, 234, 241, 247, 256, 262, 265, 279, 290, 292, 303, 314, 315, 357, 391, 433, 437, 455, 478, 521, 524, 527, 559, 565, 598, 599, 651, 654, 656, 658, 694, 697, 712, 713, 717, 725, 736, 765, 775, 779, 780, 781, 807, 811, 813, 814, 832, 840, 842, 848, 852, 871, 881, 882, 883, 899, 928, 971, 977, 1004, 1047, 1055, 1073, 1100, 1135, 1151, 1185, 1191, 1248, 1252, 1254, 1256, 1289, 1304, 1305, 1309, 1317, 1328, 1348, 1354, 1374, 1385], "singlecolselector": 213, "singleindexselector": [213, 981], "sinh": [852, 1374], "sink": 865, "sink_": [53, 55], "sink_csv": [53, 54, 55, 971], "sink_ipc": 971, "sink_ndjson": 971, "sink_parquet": [53, 143, 971], "site_id": [357, 361], "six": [683, 852], "size": [15, 47, 52, 54, 147, 152, 153, 154, 181, 182, 183, 184, 188, 190, 232, 325, 357, 496, 590, 656, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 772, 806, 807, 828, 829, 852, 874, 971, 1118, 1128, 1254, 1258, 1265, 1374, 1405], "sizeunit": [232, 357, 416, 1029, 1128, 1374], "skew": [673, 852, 1265, 1374], "skewtest": [691, 852, 1284, 1374], "skip": [152, 153, 157, 164, 167, 172, 261, 325, 357, 898, 971, 1224, 1374, 1390], "skip_empty_lin": 157, "skip_lin": [152, 153, 167], "skip_nul": [599, 852, 1224, 1374], "skip_row": [152, 153, 167], "skip_rows_after_head": [152, 153, 167], "sklearn": [319, 357], "slice": [59, 64, 149, 232, 248, 259, 308, 357, 568, 588, 610, 612, 662, 663, 665, 667, 669, 671, 674, 676, 678, 712, 736, 852, 867, 874, 885, 903, 913, 926, 971, 1128, 1152, 1194, 1214, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1304, 1328, 1345, 1374, 1397], "slice_pushdown": [64, 874, 885, 903, 913, 926, 945, 971], "slide": [447, 852, 1066, 1374], "slightli": [49, 50, 51, 52, 103, 518, 852, 971, 1398], "slot": [447, 451, 560, 852, 1066, 1069, 1186, 1374], "slow": [119, 136, 139, 152, 153, 154, 157, 161, 162, 163, 167, 171, 172, 357, 447, 599, 662, 714, 852, 954, 971, 1066, 1259, 1306, 1374], "slower": [137, 139, 157, 245, 265, 279, 327, 343, 357, 599, 814, 852, 892, 954, 971, 1224, 1374], "small": [12, 155, 483, 971, 1405], "smaller": [47, 52, 54, 232, 357, 971, 1128, 1374], "smallest": [216, 320, 357, 427, 428, 758, 852, 869, 933, 971, 1040, 1041, 1359, 1374, 1391, 1394], "smooth": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "snappi": [36, 47, 52, 357, 971], "snapshot": 169, "snapshot_id": 169, "snowflak": [154, 155], "snowflake_format": 201, "snowi": [721, 722], "so": [1, 41, 155, 157, 167, 190, 208, 244, 246, 262, 281, 289, 357, 384, 394, 450, 518, 535, 567, 590, 599, 660, 721, 722, 723, 730, 731, 732, 746, 852, 867, 880, 893, 899, 919, 971, 977, 1007, 1193, 1313, 1314, 1315, 1322, 1323, 1324], "softwar": [37, 151, 357], "solut": [39, 357], "solv": [97, 147], "some": [15, 31, 41, 47, 52, 57, 66, 100, 136, 152, 153, 154, 167, 212, 229, 281, 292, 315, 357, 361, 721, 722, 848, 915, 971, 1164, 1313, 1314, 1374, 1405], "some_account": [707, 1299], "some_t": 1404, "someth": [598, 852], "sometim": [796, 851], "somewher": [707, 1299], "sort": [53, 54, 55, 58, 59, 216, 246, 261, 273, 280, 281, 289, 298, 320, 327, 340, 351, 357, 383, 427, 428, 505, 514, 599, 640, 660, 683, 684, 694, 757, 758, 763, 765, 775, 791, 794, 814, 852, 869, 885, 893, 898, 909, 912, 913, 919, 924, 926, 933, 951, 962, 971, 977, 996, 1040, 1041, 1130, 1171, 1273, 1275, 1358, 1359, 1360, 1363, 1374, 1390, 1403, 1405], "sort_bi": 852, "sort_column": [281, 357], "sorted": [261, 357, 898, 971], "sorted_asc": [1141, 1374], "sorted_desc": [1141, 1374], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 852, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 971, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1340, 1341, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374, 1379, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1402], "source_ac": 140, "source_actor_id": 140, "source_alia": [40, 357], "source_cha": 140, "source_channel_id": 140, "south": 76, "space": [21, 246, 357, 488, 810, 811, 893, 971, 977, 1110], "spam": [269, 357, 707, 1299], "span": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "spanner": [357, 361], "spark": [47, 357], "sparklin": [41, 357], "speak": [691, 852, 1284, 1374], "spearman": 782, "speci": [357, 360], "special": [39, 55, 152, 153, 155, 167, 319, 334, 357, 662, 707, 721, 722, 852, 944, 971, 1224, 1259, 1299, 1313, 1314, 1374], "specif": [1, 31, 40, 41, 43, 44, 50, 103, 133, 135, 137, 139, 148, 152, 155, 156, 157, 161, 162, 163, 168, 169, 171, 214, 217, 258, 260, 266, 309, 314, 357, 362, 485, 488, 536, 735, 737, 738, 742, 763, 852, 871, 897, 904, 971, 976, 977, 1107, 1110, 1159, 1327, 1329, 1330, 1334, 1348, 1352, 1363, 1374, 1390, 1402, 1404, 1405], "specifi": [10, 38, 39, 40, 41, 47, 49, 58, 104, 107, 110, 125, 128, 152, 157, 163, 164, 167, 172, 185, 194, 196, 197, 198, 214, 216, 217, 232, 233, 236, 241, 245, 246, 260, 261, 279, 281, 289, 290, 292, 295, 296, 300, 303, 314, 320, 323, 331, 332, 336, 357, 428, 437, 481, 488, 504, 506, 507, 508, 513, 640, 653, 655, 663, 665, 667, 669, 671, 674, 676, 678, 685, 694, 750, 758, 775, 778, 779, 780, 781, 791, 792, 794, 795, 796, 798, 830, 834, 839, 840, 848, 852, 869, 871, 886, 888, 892, 893, 897, 898, 919, 921, 922, 925, 928, 933, 935, 940, 941, 947, 971, 977, 1041, 1055, 1103, 1110, 1128, 1129, 1131, 1132, 1138, 1251, 1253, 1277, 1352, 1359, 1374, 1390, 1397, 1404], "speed": [52, 298, 357, 599, 852, 924, 971, 975, 1405], "speedup": [58, 172, 258, 265, 357, 599, 852, 1224, 1374], "split": [1, 41, 47, 53, 54, 55, 59, 259, 357, 705, 727, 728, 1297, 1319, 1320, 1397], "split_by_column_dtyp": 61, "split_inclus": 726, "split_part": 1395, "splitfram": [1, 59], "spreadsheet": [37, 151, 157, 163, 281, 357], "spring": [721, 722], "sql": [0, 39, 122, 123, 131, 154, 155, 260, 300, 357, 402, 583, 685, 809, 832, 852, 864, 925, 971, 1015, 1209, 1277, 1374, 1383, 1384, 1386, 1388, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1399, 1400, 1403, 1404], "sql_expr": 1402, "sqlalchemi": [39, 154, 176, 357], "sqlcontext": [304, 357, 831, 929, 971, 1401], "sqldw_format": 201, "sqlite": [39, 154, 357], "sqrt": [599, 691, 750, 852, 1224, 1284, 1374, 1395], "sqrt_x": 1396, "squar": [1, 62, 343, 548, 656, 695, 852, 954, 1174, 1254, 1287, 1374, 1396], "st": [33, 1405], "stabil": [247, 357, 527, 852, 1151, 1374], "stabl": [164, 210, 222, 224, 225, 247, 293, 297, 304, 357, 450, 527, 595, 613, 756, 852, 879, 880, 908, 923, 928, 929, 971, 979, 1151, 1356, 1374], "stack": [66, 250, 329, 357, 360, 1384], "stage": [926, 971], "stai": [598, 687, 852], "standalon": [182, 977], "standard": [7, 11, 38, 41, 154, 305, 314, 319, 357, 469, 506, 674, 675, 691, 696, 715, 718, 833, 848, 852, 867, 930, 971, 977, 1087, 1126, 1131, 1236, 1284, 1288, 1307, 1310, 1374, 1391, 1405], "standardis": [41, 357], "start": [41, 49, 50, 51, 52, 55, 150, 152, 153, 155, 157, 158, 160, 162, 163, 164, 167, 170, 171, 172, 190, 240, 245, 246, 263, 302, 327, 333, 334, 357, 411, 414, 417, 430, 434, 455, 463, 467, 474, 479, 483, 496, 497, 508, 522, 566, 584, 659, 664, 666, 668, 670, 672, 675, 677, 679, 692, 698, 703, 707, 711, 720, 725, 729, 730, 732, 733, 736, 745, 772, 777, 786, 790, 791, 792, 793, 794, 795, 798, 800, 806, 807, 810, 811, 839, 840, 842, 848, 852, 891, 892, 893, 913, 927, 943, 944, 971, 977, 1030, 1043, 1048, 1073, 1075, 1078, 1081, 1083, 1084, 1091, 1093, 1095, 1096, 1099, 1101, 1105, 1109, 1118, 1119, 1145, 1192, 1210, 1257, 1285, 1295, 1299, 1303, 1312, 1317, 1321, 1322, 1324, 1328, 1337, 1374, 1390, 1397, 1405], "start_bi": [246, 357, 893, 971], "startbi": [246, 357, 893, 971], "starts_a": 1397, "starts_with": [59, 281, 357, 361, 411, 414, 430, 606, 698, 703, 831, 929, 971, 977, 1043, 1295, 1395], "starts_with_expr": 417, "starts_with_lit": 417, "startup": [314, 357], "stat": [548, 691, 852, 1174, 1284, 1374], "state": [4, 5, 115, 786, 787, 864, 1402], "statement": [640, 842, 852, 1388, 1403], "static": [48, 95, 954], "statist": [47, 52, 152, 153, 164, 170, 172, 224, 357, 506, 507, 548, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 691, 852, 879, 971, 1068, 1131, 1132, 1174, 1258, 1265, 1284, 1374], "std": [224, 357, 674, 675, 852, 879, 971, 1068, 1266, 1374], "std_dev": [41, 357], "stddev": 1395, "stddev_samp": 1391, "stdev": [41, 357, 1391], "stdev_samp": 1391, "stdout": [208, 244, 357, 615], "step": [325, 357, 518, 772, 806, 807, 852, 867], "steve": [273, 357, 909, 971], "still": [154, 155], "stock": [357, 360], "stop": [147, 150, 152, 153, 158, 160, 162, 164, 167, 170, 171, 172, 664, 666, 668, 670, 672, 675, 677, 679, 852, 867, 1075, 1078, 1083, 1084, 1091, 1093, 1095, 1099, 1105, 1109], "storag": [38, 40, 43, 47, 49, 50, 51, 52, 152, 156, 158, 160, 162, 164, 167, 168, 169, 170, 171, 172, 198, 357, 971], "storage_loc": [199, 202, 203], "storage_opt": [38, 40, 43, 47, 49, 50, 51, 52, 152, 156, 158, 160, 162, 164, 166, 167, 168, 169, 170, 171, 172, 198, 357, 971], "store": [40, 169, 234, 258, 291, 357, 431, 658, 852, 1044, 1135, 1256, 1374], "store_id": [640, 852], "str": [1, 2, 3, 5, 6, 9, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 73, 76, 77, 99, 101, 132, 133, 134, 135, 136, 137, 139, 140, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 181, 182, 184, 187, 188, 189, 193, 194, 196, 197, 198, 199, 200, 202, 203, 208, 214, 216, 217, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 241, 242, 244, 245, 246, 248, 250, 251, 253, 255, 256, 258, 260, 261, 262, 264, 266, 267, 269, 271, 272, 273, 274, 277, 279, 281, 283, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 367, 368, 369, 390, 395, 407, 411, 412, 413, 414, 417, 418, 423, 426, 428, 430, 431, 434, 442, 448, 450, 452, 460, 478, 482, 483, 485, 488, 496, 505, 508, 514, 516, 520, 521, 524, 532, 535, 557, 567, 568, 569, 584, 588, 590, 599, 610, 612, 613, 614, 615, 617, 624, 625, 626, 627, 628, 629, 630, 631, 637, 640, 644, 647, 653, 654, 655, 657, 659, 660, 664, 666, 668, 670, 672, 675, 677, 679, 686, 693, 694, 746, 747, 748, 749, 758, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 780, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 848, 852, 859, 869, 871, 874, 875, 877, 879, 880, 881, 882, 883, 885, 886, 889, 892, 893, 895, 897, 898, 899, 904, 908, 909, 912, 913, 916, 917, 918, 919, 923, 924, 926, 927, 928, 929, 933, 934, 935, 936, 937, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 971, 976, 977, 983, 1008, 1020, 1026, 1042, 1043, 1044, 1048, 1067, 1068, 1078, 1100, 1104, 1105, 1107, 1110, 1118, 1130, 1138, 1141, 1183, 1195, 1216, 1232, 1233, 1234, 1245, 1250, 1252, 1253, 1274, 1338, 1340, 1341, 1349, 1350, 1351, 1352, 1363, 1374, 1380, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1394, 1397, 1398, 1402, 1403, 1405], "str_date": 1397, "str_timestamp": 1397, "str_valu": [53, 145], "strategi": [38, 49, 58, 66, 152, 172, 181, 182, 183, 184, 185, 186, 188, 236, 246, 260, 261, 276, 326, 327, 357, 410, 443, 446, 513, 519, 590, 599, 852, 865, 888, 893, 897, 898, 915, 937, 971, 1023, 1138, 1143, 1216, 1374], "stream": [10, 15, 43, 44, 49, 50, 51, 52, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 245, 260, 322, 357, 598, 852, 874, 885, 892, 897, 903, 908, 913, 926, 928, 934, 971], "streamabl": [903, 908, 936, 971], "streaming_t": 205, "strftime": [103, 488, 1110, 1395, 1397], "strict": [135, 136, 139, 148, 217, 226, 286, 357, 412, 429, 488, 698, 701, 710, 735, 737, 738, 740, 742, 823, 852, 871, 881, 917, 971, 977, 1025, 1042, 1110, 1127, 1290, 1293, 1302, 1327, 1329, 1330, 1332, 1334, 1374], "strictli": [38, 49, 57, 100, 152, 261, 357, 898, 971], "string": [1, 2, 3, 5, 6, 13, 15, 16, 17, 21, 36, 38, 39, 40, 41, 45, 46, 49, 57, 70, 73, 76, 89, 96, 98, 100, 101, 103, 109, 127, 136, 140, 148, 152, 153, 154, 155, 167, 177, 178, 179, 180, 181, 188, 192, 216, 217, 220, 225, 230, 232, 239, 241, 244, 245, 246, 261, 266, 279, 281, 289, 292, 294, 295, 296, 297, 303, 313, 314, 320, 321, 325, 327, 331, 332, 336, 357, 367, 390, 395, 414, 428, 430, 432, 433, 434, 437, 450, 478, 483, 485, 488, 496, 505, 508, 516, 520, 535, 569, 613, 615, 640, 644, 654, 655, 660, 664, 666, 668, 670, 672, 675, 677, 679, 694, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 750, 758, 766, 768, 770, 775, 778, 779, 780, 781, 789, 791, 792, 794, 795, 801, 816, 818, 821, 830, 834, 836, 839, 840, 842, 848, 852, 864, 869, 871, 876, 880, 884, 885, 892, 893, 898, 904, 919, 920, 921, 922, 923, 928, 933, 940, 941, 947, 971, 976, 977, 1008, 1025, 1026, 1027, 1041, 1043, 1046, 1047, 1048, 1100, 1105, 1107, 1110, 1118, 1130, 1158, 1195, 1252, 1253, 1289, 1290, 1291, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1340, 1351, 1352, 1359, 1374, 1383, 1384, 1392, 1395, 1398, 1401, 1405], "string_to_arrai": 1395, "stringcach": [98, 100, 260, 357, 864], "stringio": [161, 162, 520, 852], "strings_hex": 702, "strip": [29, 730, 731, 732, 733, 734, 1322, 1323, 1324, 1397], "strip_chars_end": [732, 734], "strip_chars_start": [731, 733], "strip_prefix": [732, 734], "strip_suffix": [731, 733], "strongli": [41, 190, 265, 290, 343, 357, 599, 852, 1224, 1374], "strpo": 1395, "strptime": [289, 357, 482, 660, 852, 919, 971, 1104, 1395], "struct": [8, 56, 77, 128, 140, 143, 266, 277, 318, 323, 357, 407, 448, 529, 590, 598, 599, 625, 627, 629, 647, 658, 659, 708, 714, 727, 728, 756, 763, 786, 787, 789, 813, 842, 852, 904, 935, 954, 971, 977, 1020, 1067, 1216, 1224, 1245, 1256, 1300, 1306, 1319, 1320, 1354, 1356, 1374], "struct_col": [746, 748, 749], "struct_seri": 954, "structarrai": [232, 357, 1128, 1374], "structfieldnotfounderror": 748, "structur": [41, 43, 44, 50, 109, 112, 126, 148, 214, 234, 280, 292, 309, 315, 357, 644, 852, 912, 971, 1135, 1348, 1374, 1402], "student": [281, 357], "style": [7, 21, 41, 53, 154, 281, 357], "sub": [343, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 409, 569, 576, 852, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1018, 1022, 1195, 1202], "subarrai": [386, 387, 999, 1000], "subclass": [1, 357], "subexpress": [64, 874, 885, 913, 926, 971], "subinterv": 1391, "subject": [47, 169, 281, 357], "sublist": [394, 555, 556, 558, 560, 564, 565, 566, 567, 568, 569, 570, 579, 584, 588, 590, 1007, 1164, 1181, 1182, 1184, 1186, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1205, 1210, 1214, 1216, 1374], "subplan": [64, 132, 874, 885, 913, 926, 971], "subscript": 867, "subsequ": [41, 164, 172, 284, 316, 357, 590, 831, 842, 885, 971, 1355, 1374, 1389], "subset": [228, 229, 277, 322, 357, 882, 883, 934, 971], "substr": [411, 414, 417, 430, 434, 698, 703, 710, 721, 722, 725, 726, 727, 728, 729, 977, 1024, 1027, 1030, 1043, 1048, 1290, 1295, 1302, 1313, 1314, 1317, 1318, 1319, 1320, 1321, 1395], "subtl": [41, 357], "subtli": [518, 852], "subtract": [548, 751, 852, 1174, 1374], "succe": [152, 153, 167], "success": [700, 707, 1292, 1299], "successfulli": [53, 54, 55, 874, 885, 913, 926, 971], "suffer": 55, "suffix": [260, 261, 262, 336, 357, 369, 414, 428, 430, 543, 544, 545, 546, 604, 624, 626, 629, 630, 631, 657, 680, 703, 731, 734, 758, 852, 897, 898, 899, 942, 947, 971, 977, 1027, 1043, 1295, 1326], "suffix_field": [625, 627], "sugar": [326, 357, 654, 655, 723, 767, 769, 771, 783, 785, 788, 798, 803, 804, 805, 815, 817, 819, 820, 822, 824, 825, 830, 833, 835, 837, 841, 843, 852, 937, 971, 1252, 1253, 1287, 1315, 1374], "suggest": [357, 360, 1374, 1379], "suitabl": [58, 66, 154, 182, 265, 357, 599, 683, 852, 1224, 1273, 1374], "sum": [41, 97, 149, 232, 239, 245, 246, 256, 281, 289, 307, 336, 357, 445, 446, 450, 501, 514, 590, 599, 610, 612, 613, 614, 615, 616, 654, 655, 660, 676, 677, 765, 767, 779, 786, 788, 789, 800, 814, 826, 836, 852, 874, 875, 880, 885, 892, 893, 911, 913, 915, 919, 923, 926, 947, 971, 977, 1064, 1065, 1124, 1128, 1267, 1374, 1383, 1390, 1392, 1395, 1402], "sum_": [691, 852, 1284, 1374], "sum_a": [289, 357, 660, 852, 919, 971], "sum_horizont": [58, 357, 835], "summari": [224, 357, 879, 971, 1068, 1374, 1390], "summer": [721, 722], "sun": [357, 360, 735, 1327], "sundai": [246, 357, 455, 467, 485, 488, 498, 777, 893, 971, 1073, 1085, 1107, 1110, 1120], "sunni": [721, 722, 1313, 1314], "supercast": [239, 357], "supertyp": [66, 149, 236, 315, 319, 357, 373, 780, 852, 888, 971, 1374], "suppli": [39, 41, 133, 135, 136, 137, 139, 154, 161, 162, 171, 237, 285, 290, 314, 357, 514, 644, 852, 889, 916, 971, 1352, 1374], "support": [1, 38, 39, 40, 41, 43, 47, 49, 50, 51, 52, 64, 65, 66, 133, 134, 135, 136, 137, 138, 139, 140, 154, 155, 156, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 181, 185, 188, 198, 208, 214, 258, 259, 260, 261, 291, 292, 302, 303, 311, 316, 319, 357, 488, 505, 584, 640, 654, 655, 692, 694, 699, 709, 711, 712, 721, 722, 723, 725, 736, 848, 852, 858, 867, 874, 875, 885, 897, 898, 913, 926, 927, 928, 971, 977, 1110, 1130, 1210, 1252, 1253, 1285, 1291, 1301, 1303, 1304, 1313, 1314, 1315, 1317, 1328, 1355, 1357, 1374, 1378, 1392, 1397, 1398, 1400, 1401, 1402], "supportsinterchang": 134, "suppos": [213, 281, 357, 599, 852, 1224, 1374], "sure": [66, 133, 134, 138, 149, 152, 153, 156, 158, 160, 164, 168, 284, 357, 852], "surreal_query_to_fram": 154, "surrealdb": 154, "surrealql": 154, "suscept": 971, "swap": [842, 917, 971], "swim": 781, "switch": [64, 65, 456, 874, 875, 885, 913, 926, 971, 1074], "sy": 208, "sydnei": 793, "symbol": [37, 38, 49, 357, 852, 971], "symmetr": [536, 581, 852, 977, 1159, 1207, 1374], "symmetri": [877, 884, 920, 939, 971], "sync": [49, 50, 51, 52, 971], "sync_on_clos": [49, 50, 51, 52, 971], "synchron": [154, 965], "synconclosemethod": [49, 50, 51, 52, 971], "syntact": [326, 357, 654, 655, 723, 767, 769, 771, 783, 785, 788, 798, 803, 804, 805, 815, 817, 819, 820, 822, 824, 825, 830, 833, 835, 837, 841, 843, 852, 937, 971, 1252, 1253, 1287, 1315, 1374], "syntax": [41, 123, 214, 237, 265, 277, 285, 357, 614, 698, 706, 707, 710, 721, 722, 806, 807, 848, 867, 889, 916, 926, 971, 1290, 1298, 1299, 1302, 1313, 1314, 1374, 1398, 1400], "system": [37, 152, 153, 357, 460, 874, 885, 913, 926, 971, 1078], "t": [37, 38, 40, 49, 66, 97, 147, 151, 152, 157, 163, 167, 246, 261, 265, 280, 322, 325, 357, 447, 456, 464, 482, 488, 501, 504, 506, 507, 562, 599, 640, 644, 706, 710, 721, 722, 732, 735, 738, 743, 842, 852, 893, 898, 912, 934, 971, 977, 1066, 1104, 1110, 1124, 1129, 1131, 1132, 1188, 1224, 1298, 1302, 1313, 1314, 1323, 1324, 1327, 1330, 1335, 1374, 1386, 1387, 1397], "t_": [323, 357, 505, 852, 935, 971, 1130, 1374], "t_0": [289, 357, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 852, 919, 971, 1130, 1374], "t_1": [289, 357, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 852, 919, 971, 1130, 1374], "t_a": [323, 357, 935, 971], "t_b": [323, 357, 935, 971], "t_c": [323, 357, 935, 971], "t_d": [323, 357, 935, 971], "t_i": [505, 852, 1130, 1374], "t_id": [262, 357, 899, 971], "t_n": [289, 357, 660, 664, 666, 668, 670, 672, 675, 677, 679, 852, 919, 971], "t_struct": [323, 357, 935, 971], "tab_spann": [357, 361], "tab_stub": [357, 361], "tab_styl": [357, 361], "tabl": [7, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 39, 40, 41, 42, 133, 140, 148, 156, 157, 163, 168, 169, 194, 197, 198, 200, 203, 204, 260, 262, 281, 304, 309, 316, 325, 326, 357, 361, 831, 864, 897, 899, 929, 937, 971, 1384, 1385, 1386, 1387, 1389, 1390, 1401, 1402], "table_id": 203, "table_nam": [39, 41, 157, 194, 198, 304, 357, 929, 971], "table_path": [40, 156, 168, 169, 357], "table_styl": [41, 357], "table_typ": 203, "tableinfo": [194, 197, 206], "tablemerg": [40, 357], "tablenotfounderror": [40, 357], "tables_scale_100": [142, 153], "tabletyp": [203, 206], "tail": [244, 248, 357, 373, 691, 852, 971, 1152, 1284, 1374], "take": [41, 97, 148, 157, 163, 184, 185, 208, 239, 240, 246, 270, 273, 280, 281, 286, 357, 383, 455, 467, 478, 514, 521, 522, 565, 566, 598, 625, 627, 629, 694, 775, 777, 797, 799, 808, 852, 891, 893, 909, 915, 917, 971, 996, 1073, 1085, 1100, 1144, 1145, 1191, 1192, 1365, 1374, 1392], "taken": [584, 725, 1210, 1317], "talkin": [743, 1335], "tan": [852, 1374, 1395], "tand": 1395, "tangent": [379, 380, 754, 755, 852, 992, 993, 1346, 1347, 1374, 1399], "tanh": [281, 357, 852, 1374], "target": [1, 39, 40, 41, 42, 63, 157, 266, 319, 357, 706, 721, 722, 735, 737, 738, 842, 904, 971, 977, 1298, 1313, 1314, 1327, 1329, 1330, 1397], "target_alia": [40, 357], "target_t": [39, 357], "task": [65, 875, 971], "tau": [504, 505, 852, 1129, 1130, 1374], "tb": [177, 179, 232, 357, 416, 1128, 1374], "tbl": [97, 140, 142, 153, 1404], "tbl0": 1389, "tbl1": [1387, 1389], "tbl2": [1387, 1389], "tbl3": 1387, "tbl4": 1387, "tbl_cell_numeric_align": [9, 11, 28], "tbl_col": 18, "tbl_format": [21, 208], "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "tbl_row": [26, 224, 357, 879, 971], "tbl_width_char": 796, "td": 488, "td1": 977, "td2": 977, "td3": 977, "tdf": [280, 357], "technic": 848, "tell": [699, 723, 1291, 1315], "tempor": [103, 217, 246, 258, 289, 291, 292, 311, 357, 437, 488, 535, 660, 664, 666, 668, 670, 672, 675, 677, 679, 810, 852, 864, 871, 893, 919, 971, 977, 1055, 1110, 1158, 1374, 1395, 1401], "temporalliter": [437, 810, 811, 852, 1055, 1089, 1090, 1374], "temporari": [39, 357], "temporarili": [190, 208, 246, 289, 357, 660, 852, 893, 919, 971], "tenant": 34, "tenant_id": 34, "tend": [177, 179], "tensor": [319, 357, 1357, 1374], "tensordataset": [319, 357], "term": [504, 506, 507, 712, 725, 736, 852, 1129, 1131, 1132, 1304, 1317, 1328, 1374], "termin": [38, 49, 357, 971], "terminologi": 202, "test": [0, 39, 154, 155, 157, 163, 169, 231, 281, 357, 864, 1127, 1374, 1397], "test1": 1389, "test2": 1389, "test3": 1389, "test_1": [281, 357], "test_1_math": [281, 357], "test_1_phys": [281, 357], "test_2": [281, 357], "test_2_math": [281, 357], "test_2_phys": [281, 357], "test_data": 154, "test_df_height": 184, "test_func": 813, "test_lf": [942, 971], "test_miscellan": 1405, "test_numer": 1405, "test_price_calcul": 1405, "test_series_len": 188, "test_tabl": 155, "test_unique_xyz": 182, "testdb": 155, "testing1234": 1389, "text": [151, 154, 201, 432, 433, 536, 704, 712, 716, 717, 718, 721, 722, 724, 725, 736, 832, 852, 915, 971, 1046, 1047, 1159, 1304, 1308, 1309, 1316, 1317, 1328, 1374, 1389, 1405], "text1": 722, "text2": 722, "textclaus": 154, "texttt": [691, 852, 1284, 1374], "th": [240, 357, 522, 566, 579, 691, 712, 736, 852, 891, 971, 1145, 1192, 1205, 1284, 1304, 1328, 1374, 1397], "than": [41, 49, 50, 51, 52, 55, 106, 129, 137, 139, 152, 153, 154, 157, 163, 167, 173, 218, 245, 258, 260, 261, 265, 279, 290, 291, 293, 325, 343, 357, 432, 518, 520, 523, 525, 535, 550, 578, 597, 599, 615, 647, 659, 682, 691, 712, 716, 719, 720, 728, 736, 745, 782, 814, 842, 852, 892, 897, 898, 954, 971, 1046, 1158, 1204, 1224, 1245, 1257, 1271, 1284, 1304, 1308, 1311, 1312, 1320, 1328, 1337, 1354, 1374, 1405], "the_aws_access_key_id": [40, 156, 168, 169, 357], "the_aws_region": [40, 357], "the_aws_secret_access_kei": [40, 156, 168, 169, 357], "thei": [38, 41, 49, 57, 65, 66, 98, 100, 136, 149, 167, 208, 261, 263, 292, 357, 640, 683, 723, 731, 732, 852, 874, 885, 898, 913, 926, 971, 975, 977, 1273, 1315, 1374], "them": [65, 133, 135, 136, 137, 139, 154, 155, 157, 161, 162, 163, 164, 167, 170, 171, 172, 208, 233, 234, 246, 261, 262, 273, 281, 289, 319, 327, 357, 395, 505, 535, 569, 632, 633, 640, 660, 780, 791, 792, 794, 795, 839, 840, 852, 875, 886, 893, 898, 899, 909, 919, 971, 977, 1008, 1130, 1135, 1195, 1233, 1234, 1374, 1392, 1402], "then1": 842, "then2": 842, "therebi": [167, 170, 171], "therefor": [55, 152, 158, 162, 164, 232, 357, 1128, 1374], "theta": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "thi": [1, 4, 5, 11, 13, 15, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 72, 73, 74, 75, 80, 90, 97, 99, 100, 107, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 204, 208, 210, 212, 213, 215, 216, 219, 220, 222, 224, 225, 228, 229, 232, 234, 238, 239, 244, 245, 246, 247, 251, 253, 255, 256, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 271, 272, 273, 274, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 302, 304, 305, 306, 309, 311, 314, 315, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 338, 343, 356, 357, 360, 361, 362, 370, 373, 374, 383, 395, 401, 402, 403, 408, 410, 427, 428, 431, 437, 447, 448, 450, 455, 456, 457, 467, 469, 475, 476, 478, 482, 485, 488, 499, 503, 510, 519, 520, 527, 529, 532, 533, 535, 536, 540, 562, 563, 569, 578, 579, 580, 581, 582, 583, 585, 590, 591, 595, 596, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 640, 647, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 684, 685, 686, 687, 692, 693, 694, 697, 699, 706, 709, 711, 713, 714, 718, 719, 720, 723, 730, 731, 732, 733, 734, 739, 743, 745, 747, 750, 757, 758, 760, 761, 762, 763, 767, 771, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 799, 800, 802, 804, 805, 808, 809, 810, 811, 814, 817, 819, 822, 824, 826, 830, 833, 837, 841, 842, 843, 848, 852, 864, 868, 869, 870, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 889, 892, 893, 895, 897, 898, 899, 901, 903, 904, 908, 909, 913, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 933, 934, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 949, 954, 968, 969, 970, 971, 975, 976, 977, 979, 986, 987, 996, 1008, 1014, 1015, 1016, 1021, 1023, 1040, 1041, 1044, 1050, 1055, 1056, 1066, 1067, 1073, 1074, 1075, 1077, 1085, 1087, 1097, 1098, 1100, 1104, 1107, 1110, 1121, 1123, 1126, 1128, 1134, 1135, 1143, 1145, 1147, 1151, 1153, 1159, 1164, 1173, 1188, 1189, 1195, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1217, 1222, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1236, 1239, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1285, 1286, 1288, 1289, 1291, 1298, 1301, 1303, 1305, 1306, 1310, 1311, 1312, 1315, 1322, 1323, 1324, 1331, 1335, 1337, 1338, 1340, 1343, 1344, 1348, 1350, 1352, 1353, 1354, 1355, 1357, 1358, 1359, 1360, 1362, 1363, 1364, 1374, 1379, 1383, 1384, 1385, 1389, 1397, 1400, 1401, 1402, 1403, 1405], "thing": [167, 175], "think": [475, 476, 1097, 1098], "third": [598, 852], "thoma": [273, 357, 909, 971], "those": [5, 31, 41, 152, 157, 237, 285, 292, 316, 326, 357, 518, 650, 706, 814, 852, 867, 916, 937, 971, 977, 1247, 1298, 1355, 1374], "though": [39, 152, 154, 246, 357, 848, 893, 971], "thought": 842, "thousand": [9, 28], "thousands_separ": [9, 11, 28], "thread": [15, 38, 49, 65, 142, 152, 153, 155, 190, 191, 303, 357, 562, 599, 694, 775, 852, 875, 928, 971, 1016, 1188, 1211, 1286, 1374], "thread_loc": [599, 852], "thread_pool_s": 191, "three": [41, 213, 289, 318, 357, 448, 647, 660, 683, 712, 721, 736, 852, 919, 971, 1020, 1067, 1216, 1245, 1304, 1314, 1328, 1374], "threshold": [295, 357, 921, 971], "through": [154, 266, 281, 357, 848, 904, 971, 977, 1374, 1389], "throughout": 208, "throw": [40, 135, 136, 139, 226, 286, 357, 714, 715, 871, 881, 917, 971, 1306, 1307, 1374], "thu": [41, 234, 357, 360, 782, 975, 1135, 1374], "thursdai": [246, 357, 455, 467, 777, 893, 971, 1073, 1085], "ti": [650, 852, 1247, 1374], "time": [13, 38, 40, 43, 47, 49, 50, 51, 52, 55, 63, 64, 65, 73, 75, 116, 156, 162, 164, 167, 168, 170, 171, 172, 184, 185, 188, 198, 224, 234, 246, 261, 262, 289, 327, 357, 427, 428, 456, 457, 459, 460, 461, 464, 465, 475, 476, 478, 481, 482, 483, 485, 487, 488, 496, 499, 505, 557, 590, 659, 660, 664, 666, 668, 670, 672, 675, 677, 679, 687, 735, 738, 742, 756, 757, 758, 780, 781, 791, 792, 793, 794, 795, 796, 802, 810, 839, 840, 852, 874, 875, 879, 893, 898, 899, 913, 919, 971, 977, 1040, 1041, 1074, 1075, 1077, 1078, 1082, 1083, 1100, 1103, 1104, 1105, 1107, 1109, 1110, 1118, 1121, 1130, 1135, 1183, 1257, 1280, 1327, 1330, 1334, 1356, 1358, 1359, 1374, 1383, 1389, 1398, 1405], "time_column": [327, 357], "time_format": [38, 49, 357, 971], "time_unit": [73, 75, 457, 459, 465, 487, 499, 738, 793, 794, 795, 796, 802, 976, 977, 1075, 1077, 1083, 1109, 1121, 1330], "time_unit_m": [457, 1075], "time_unit_n": [457, 1075], "time_unit_u": 499, "time_zon": [73, 460, 462, 482, 738, 793, 794, 795, 976, 977, 1074, 1078, 1082, 1104, 1330], "timedelta": [246, 261, 289, 327, 357, 478, 483, 488, 496, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 791, 792, 794, 795, 839, 840, 852, 893, 898, 919, 971, 976, 977, 1088, 1094, 1100, 1105, 1118, 1130, 1233, 1234, 1288, 1364, 1374], "timeout": [65, 875, 971], "timestamp": [140, 156, 168, 246, 357, 482, 483, 496, 802, 893, 971, 1104, 1105, 1118, 1395], "timestamp_m": 487, "timestamp_n": 1109, "timestamp_u": [487, 1109], "timestep": 802, "timeunit": [38, 49, 73, 75, 357, 457, 459, 487, 499, 738, 793, 794, 795, 796, 971, 977, 1075, 1077, 1109, 1121, 1330], "timezon": [56, 73, 156, 168, 462, 977, 1398], "tip": [599, 852], "titl": [41, 357, 360, 1374, 1379, 1383], "titlecas": [743, 1335], "tm": [459, 488, 977, 1398], "to_arrow": [259, 357, 1354, 1374, 1402], "to_batch": [259, 357], "to_dict": [217, 292, 357, 871, 971, 977], "to_dummi": [314, 319, 357, 1374], "to_fram": [431, 465, 483, 487, 496, 735, 976, 1067, 1245, 1272, 1274, 1319, 1320, 1327, 1374, 1379], "to_init_repr": [140, 357, 1374], "to_jax": [319, 357, 1374], "to_list": [140, 289, 357, 1290, 1302, 1374], "to_lowercas": 631, "to_numpi": [314, 319, 357, 598, 852, 1374], "to_panda": [357, 1374], "to_phys": [852, 1374], "to_python": 976, "to_seri": [59, 241, 357, 735, 776, 827, 1327, 1397], "to_sql": [39, 357], "to_str": [485, 1107], "to_struct": [357, 707], "to_torch": [314, 357, 1374], "to_uppercas": [369, 630, 708, 852], "togeth": [262, 357, 899, 971, 1397], "token": [38, 43, 47, 49, 50, 51, 52, 162, 164, 167, 169, 170, 171, 172, 193, 198, 357, 971], "tokyo": [140, 977], "tokyo_tz": 977, "toler": [177, 178, 179, 180, 261, 357, 536, 852, 898, 971, 1159, 1374], "tone": [41, 357], "tonight": [699, 723, 1291, 1315], "too": [15, 281, 357, 415, 640, 852, 971, 1028], "tooltip": [357, 360, 1374, 1379], "toomanyrowsreturnederror": [290, 357], "top": [41, 304, 320, 357, 360, 758, 852, 929, 933, 971, 1374, 1379, 1402], "top_col": [41, 357], "top_k": [216, 357, 427, 428, 758, 852, 869, 971, 1040, 1041, 1359, 1374], "top_k_bi": [427, 428, 757, 852, 1040, 1041, 1358, 1374], "top_row": [41, 357], "tor_id": 140, "torch": [176, 319, 357, 1357, 1374], "torchexporttyp": [319, 357], "total": [41, 232, 338, 357, 489, 490, 491, 492, 493, 494, 495, 551, 571, 852, 949, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1128, 1177, 1197, 1374], "total_gross": 1383, "toward": [338, 551, 571, 852, 949, 1177, 1197, 1374], "tp": [1, 61], "tpu": [314, 357, 1352, 1374], "tr15": [718, 1310], "trace": 76, "traceback": [177, 178, 179, 180, 315, 357, 655, 852, 1253, 1354, 1374], "tracebacktyp": 1402, "track": [156, 168, 169, 265, 357, 590, 1402], "trail": [29, 244, 357, 730, 731, 1322, 1323], "train": [319, 357], "train_lf": [942, 971], "transfer": 155, "transferencod": [412, 413, 701, 702, 1025, 1026, 1293, 1294], "transform": [265, 304, 357, 598, 743, 831, 852, 929, 971, 1335], "transform_dens": [1374, 1379], "transit": [237, 285, 357, 889, 916, 971], "translat": 154, "transpar": [874, 885, 913, 926, 971], "transpos": [281, 357], "travel": [156, 168], "travers": [663, 665, 667, 669, 671, 674, 676, 678, 852, 1260, 1261, 1263, 1266, 1267, 1268, 1374], "treat": [152, 153, 167, 210, 390, 505, 540, 558, 698, 700, 710, 721, 722, 842, 852, 979, 1003, 1130, 1164, 1184, 1290, 1292, 1302, 1313, 1314, 1374], "tree": [615, 885, 971], "tree_format": [885, 971], "trend": [41, 357], "tri": [265, 357], "triangl": [343, 954], "trigger": [40, 149, 263, 316, 357, 852, 1355, 1374], "trigonometri": [1395, 1401], "trim": [140, 1397], "trim_decimal_zero": 29, "trip": 154, "true": [7, 8, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 55, 64, 65, 66, 97, 133, 134, 135, 136, 138, 139, 140, 142, 143, 148, 149, 152, 153, 154, 156, 157, 158, 160, 163, 164, 167, 168, 170, 172, 173, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 193, 208, 212, 217, 218, 219, 224, 226, 231, 236, 237, 239, 241, 243, 244, 245, 246, 253, 254, 255, 258, 260, 261, 262, 263, 269, 270, 276, 277, 279, 281, 282, 285, 286, 290, 291, 292, 293, 303, 304, 307, 310, 312, 314, 315, 316, 319, 321, 322, 323, 325, 326, 327, 331, 337, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 360, 368, 369, 370, 371, 372, 373, 384, 386, 387, 390, 394, 395, 403, 407, 411, 412, 414, 417, 418, 423, 426, 428, 429, 430, 434, 442, 443, 444, 445, 446, 448, 455, 457, 460, 463, 465, 467, 468, 475, 476, 478, 479, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 506, 507, 514, 521, 523, 524, 525, 526, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 558, 565, 567, 569, 585, 590, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 634, 635, 637, 639, 642, 643, 647, 652, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 686, 687, 691, 693, 694, 697, 698, 699, 700, 701, 703, 709, 710, 711, 713, 714, 715, 721, 722, 726, 727, 729, 735, 737, 738, 740, 742, 746, 748, 749, 758, 760, 763, 766, 767, 768, 769, 770, 772, 775, 776, 777, 778, 782, 784, 791, 794, 800, 806, 810, 811, 818, 823, 824, 827, 830, 831, 834, 836, 839, 842, 843, 852, 871, 872, 873, 874, 875, 879, 881, 885, 888, 889, 892, 893, 897, 898, 899, 901, 903, 908, 913, 916, 917, 926, 928, 929, 934, 935, 936, 937, 940, 946, 948, 950, 952, 955, 956, 957, 958, 959, 960, 961, 970, 971, 976, 977, 984, 985, 997, 999, 1000, 1003, 1007, 1008, 1016, 1024, 1025, 1027, 1030, 1042, 1043, 1048, 1050, 1053, 1054, 1067, 1073, 1074, 1075, 1078, 1081, 1082, 1083, 1084, 1085, 1086, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1124, 1126, 1127, 1129, 1131, 1132, 1139, 1149, 1153, 1155, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1179, 1180, 1184, 1191, 1193, 1195, 1211, 1224, 1230, 1236, 1238, 1241, 1242, 1245, 1248, 1249, 1258, 1265, 1284, 1286, 1289, 1290, 1291, 1292, 1293, 1295, 1301, 1302, 1303, 1305, 1306, 1307, 1313, 1314, 1318, 1319, 1321, 1327, 1329, 1330, 1332, 1334, 1349, 1354, 1355, 1363, 1365, 1374, 1379, 1383, 1384, 1386, 1388, 1392, 1394, 1397, 1402, 1405], "truediv": [518, 852], "truncat": [21, 140, 152, 153, 167, 244, 246, 258, 291, 292, 311, 357, 893, 913, 971, 1401], "truncate_nod": [913, 971], "truncate_ragged_lin": [152, 153, 167], "truncate_str": 496, "truncate_td": 496, "trust": [450, 852, 880, 971], "try": [38, 43, 47, 49, 50, 51, 52, 64, 126, 152, 153, 158, 162, 164, 167, 170, 171, 172, 198, 357, 842, 874, 885, 913, 926, 971], "try_cast": 1395, "try_parse_d": [142, 152, 153, 167], "try_parse_hive_d": [164, 170, 172], "ts_local": [482, 1104], "tseri": [475, 476, 1097, 1098], "tstamp": 977, "tstamp_tokyo": 977, "tstamp_utc": 977, "tue": [357, 360], "tuesdai": [246, 357, 893, 971], "tupl": [41, 67, 155, 157, 163, 213, 214, 258, 265, 279, 290, 291, 292, 299, 319, 335, 357, 614, 656, 852, 913, 926, 971, 976, 977, 1254, 1276, 1374], "turn": [8, 64, 152, 153, 167, 260, 261, 357, 874, 885, 897, 898, 903, 913, 971], "twice": [41, 357], "two": [41, 57, 98, 100, 135, 137, 139, 155, 213, 237, 239, 261, 262, 272, 273, 285, 291, 318, 324, 337, 343, 357, 361, 368, 452, 459, 518, 521, 524, 536, 590, 647, 693, 773, 774, 780, 782, 784, 791, 794, 828, 829, 831, 852, 889, 898, 899, 908, 909, 916, 936, 948, 954, 971, 977, 1020, 1070, 1077, 1159, 1216, 1245, 1374, 1389, 1390, 1391, 1394, 1403], "two_a": 1402, "tworld": [732, 1322, 1324], "txt": [1, 13, 167, 698, 710, 1302, 1397], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 133, 135, 136, 137, 138, 139, 141, 152, 153, 154, 156, 157, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 210, 213, 214, 220, 230, 233, 239, 244, 246, 247, 259, 260, 265, 289, 294, 297, 309, 314, 315, 318, 319, 322, 334, 357, 362, 370, 372, 375, 376, 377, 378, 379, 380, 383, 388, 389, 390, 392, 395, 406, 407, 411, 412, 413, 414, 415, 416, 417, 429, 431, 432, 433, 437, 438, 439, 440, 441, 448, 449, 455, 456, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 505, 508, 510, 521, 524, 527, 535, 536, 537, 538, 539, 540, 541, 542, 551, 555, 556, 558, 563, 569, 571, 589, 590, 613, 647, 649, 653, 654, 655, 656, 658, 659, 660, 664, 666, 668, 670, 672, 675, 677, 679, 688, 689, 690, 697, 700, 701, 702, 705, 706, 707, 708, 711, 712, 713, 715, 716, 717, 725, 726, 727, 728, 735, 736, 740, 754, 755, 756, 763, 772, 780, 783, 790, 791, 792, 793, 794, 795, 796, 798, 806, 807, 809, 810, 811, 812, 813, 814, 824, 827, 838, 839, 840, 843, 848, 852, 864, 865, 874, 884, 885, 886, 893, 897, 913, 919, 920, 926, 934, 944, 971, 976, 977, 979, 984, 985, 997, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1029, 1042, 1044, 1046, 1047, 1055, 1067, 1068, 1073, 1074, 1076, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1127, 1130, 1134, 1151, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1179, 1180, 1181, 1182, 1184, 1189, 1195, 1197, 1215, 1216, 1238, 1245, 1251, 1252, 1253, 1254, 1256, 1257, 1279, 1281, 1289, 1290, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1303, 1304, 1305, 1307, 1308, 1309, 1317, 1318, 1319, 1320, 1327, 1328, 1332, 1353, 1354, 1356, 1365, 1374, 1383, 1390, 1395, 1397, 1401, 1402], "type_coercion": [64, 874, 885, 913, 926, 971], "type_json": 200, "type_nam": 200, "type_text": 200, "typeerror": [40, 214, 357], "typenam": [41, 357], "typic": [136, 154, 172, 265, 357, 464, 688, 852, 977, 1082, 1224, 1281, 1374], "tz": [738, 1330], "tzinfo": [73, 156, 168, 977], "u": [41, 73, 75, 172, 186, 261, 357, 457, 459, 465, 487, 499, 735, 738, 768, 770, 793, 794, 795, 796, 802, 898, 971, 976, 977, 1075, 1077, 1083, 1109, 1121, 1327, 1330, 1387, 1398], "u1": [315, 357], "u16": [167, 1400, 1405], "u32": [13, 154, 215, 217, 223, 278, 333, 334, 338, 342, 348, 350, 357, 368, 374, 381, 382, 383, 384, 385, 388, 389, 391, 400, 416, 432, 433, 441, 442, 529, 531, 551, 555, 556, 559, 571, 576, 622, 638, 650, 658, 659, 664, 666, 668, 670, 672, 675, 677, 679, 683, 700, 710, 711, 716, 717, 718, 756, 761, 763, 767, 771, 775, 776, 783, 785, 806, 809, 822, 852, 868, 871, 878, 911, 943, 944, 949, 953, 959, 961, 971, 977, 996, 997, 998, 1001, 1002, 1004, 1013, 1042, 1046, 1047, 1061, 1153, 1181, 1182, 1185, 1197, 1202, 1247, 1256, 1257, 1273, 1292, 1302, 1303, 1308, 1309, 1356, 1361, 1363, 1374, 1383, 1391, 1392, 1393, 1397, 1402], "u64": [247, 334, 357, 527, 652, 852, 913, 944, 971, 977, 1151, 1249, 1374], "u8": [217, 312, 313, 325, 357, 655, 766, 852, 871, 971, 977, 1253, 1349, 1374, 1405], "udf": [190, 265, 280, 343, 357, 450, 599, 644, 814, 852, 880, 912, 954, 971, 1224, 1374], "ufunc": 106, "uid": 154, "uint": 1405, "uint16": [167, 445, 446, 752, 852, 977, 1064, 1065, 1344, 1354, 1357, 1374], "uint2": 1400, "uint32": [141, 176, 217, 232, 289, 334, 357, 383, 388, 389, 416, 432, 433, 441, 505, 521, 524, 551, 555, 556, 571, 653, 658, 659, 660, 664, 666, 668, 670, 672, 675, 677, 679, 700, 711, 716, 717, 756, 783, 806, 809, 852, 871, 919, 944, 971, 977, 997, 1001, 1002, 1029, 1042, 1046, 1047, 1128, 1130, 1181, 1182, 1197, 1251, 1256, 1257, 1292, 1303, 1308, 1309, 1356, 1357, 1374], "uint4": 1402, "uint64": [141, 247, 289, 334, 357, 388, 389, 505, 527, 555, 556, 652, 660, 664, 666, 668, 670, 672, 675, 677, 679, 852, 919, 944, 971, 977, 1001, 1002, 1130, 1151, 1181, 1182, 1249, 1357, 1374], "uint8": [154, 217, 313, 314, 315, 325, 357, 445, 446, 655, 752, 766, 852, 871, 971, 976, 977, 1064, 1065, 1253, 1344, 1357, 1374, 1405], "uint8_pair": 1405, "uit": [725, 1317], "uk": [707, 1299], "unabl": [108, 157], "unalias": 605, "unari": [636, 852], "unbias": [506, 507, 852, 1131, 1132, 1374], "unchang": [232, 357, 654, 756, 852, 903, 954, 971, 1128, 1252, 1356, 1374], "uncompress": [36, 43, 44, 47, 50, 52, 158, 170, 357, 971], "undefin": [152, 759, 852], "under": [38, 43, 47, 49, 50, 51, 52, 57, 59, 60, 61, 62, 98, 100, 162, 164, 167, 170, 171, 172, 196, 197, 198, 281, 304, 357, 844, 845, 847, 848, 853, 854, 857, 859, 860, 861, 929, 971, 1366, 1368, 1370, 1375, 1380, 1381, 1382], "underestim": [232, 357, 1128, 1374], "underli": [1, 57, 72, 73, 75, 90, 100, 105, 115, 133, 135, 136, 137, 139, 154, 155, 157, 161, 162, 163, 164, 171, 181, 184, 188, 233, 234, 258, 259, 291, 309, 315, 357, 412, 457, 458, 459, 463, 466, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 482, 484, 488, 497, 498, 499, 500, 652, 680, 698, 701, 710, 852, 886, 971, 977, 1025, 1075, 1076, 1077, 1081, 1084, 1086, 1087, 1091, 1092, 1093, 1095, 1096, 1099, 1101, 1102, 1104, 1106, 1110, 1119, 1120, 1121, 1122, 1135, 1249, 1269, 1279, 1290, 1293, 1302, 1348, 1354, 1374, 1402], "understood": 814, "undo": [616, 623, 624, 626, 628, 630, 631], "unexpect": [115, 124, 154, 237, 285, 357, 598, 599, 852, 889, 916, 971, 1224, 1374], "unhelpfulli": [177, 179], "unicod": [21, 433, 712, 717, 718, 725, 736, 977, 1047, 1304, 1309, 1310, 1317, 1328, 1397], "unicodeform": [718, 1310], "unifi": [41, 314, 319, 357, 977], "uniform": [41, 357, 529, 647, 852, 1153, 1245, 1374], "unimod": [691, 852, 1284, 1374], "union": [64, 66, 582, 874, 885, 913, 926, 971, 977, 1208, 1401, 1402], "uniqu": [47, 52, 58, 76, 149, 157, 181, 182, 183, 186, 188, 215, 255, 260, 277, 281, 292, 348, 357, 374, 385, 400, 448, 547, 576, 622, 647, 735, 737, 738, 742, 761, 763, 771, 822, 852, 868, 897, 959, 971, 987, 998, 1013, 1067, 1172, 1202, 1231, 1245, 1327, 1329, 1330, 1334, 1361, 1363, 1374, 1390, 1392], "unique_column_valu": [281, 357], "unique_count": [852, 1374], "uniquekeepstrategi": [322, 357, 934, 971], "unit": [41, 73, 75, 149, 177, 178, 179, 180, 184, 188, 232, 357, 416, 457, 459, 465, 481, 487, 499, 505, 511, 596, 611, 735, 738, 762, 779, 793, 794, 795, 796, 802, 852, 913, 971, 977, 1029, 1075, 1077, 1083, 1103, 1109, 1121, 1128, 1130, 1136, 1222, 1327, 1330, 1362, 1374, 1405], "uniti": [193, 194, 196, 197, 198, 206, 864], "unity_catalog": 201, "univers": [210, 979], "unix": [72, 73, 465, 496, 802, 1083, 1118], "unknown": [590, 706, 812, 1298], "unless": [41, 58, 135, 152, 260, 314, 319, 357, 730, 731, 827, 897, 971, 1322, 1397], "unlik": [148, 246, 326, 357, 867, 893, 937, 971], "unnam": [708, 1300], "unnest": [148, 357, 448, 647, 658, 707, 708, 727, 728, 748, 750, 763, 842, 852, 971, 1020, 1067, 1216, 1245, 1256, 1319, 1320, 1374, 1395, 1401], "unpivot": [272, 357, 908, 971], "unregist": [1385, 1386, 1387, 1402, 1404], "unsaf": [149, 852], "unset": [39, 164, 170, 183, 342, 357, 420, 421, 422, 424, 425, 482, 590, 852, 953, 1033, 1034, 1035, 1037, 1038, 1104, 1374, 1383], "unsign": [91, 92, 93, 94, 652, 852, 977, 1249, 1374], "unsigned_integ": 977, "unstabl": [32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 99, 130, 132, 143, 144, 145, 146, 147, 148, 154, 156, 162, 164, 167, 168, 169, 170, 171, 172, 173, 174, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 266, 304, 314, 319, 326, 357, 360, 361, 362, 447, 448, 455, 467, 529, 599, 647, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 777, 779, 852, 874, 875, 885, 904, 913, 926, 929, 937, 945, 971, 977, 1050, 1066, 1067, 1073, 1085, 1153, 1245, 1258, 1259, 1262, 1264, 1265, 1352, 1357, 1374, 1379], "unstack": 357, "unstackdirect": [325, 357], "unsuit": 131, "unsupport": [40, 214, 357, 867], "until": [49, 50, 51, 52, 97, 98, 246, 263, 357, 719, 720, 745, 893, 971, 1311, 1312, 1337], "up": [11, 41, 89, 155, 258, 261, 281, 291, 292, 298, 311, 357, 436, 437, 599, 712, 721, 722, 736, 852, 897, 898, 903, 924, 971, 977, 1052, 1304, 1313, 1314, 1328, 1374], "upcast": [56, 266, 357, 373, 852, 904, 971], "upcast_integer_typ": [1, 61], "updat": [40, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 208, 224, 357, 879, 971], "updated_at": [199, 202, 203], "updated_bi": [199, 202, 203], "upgrad": 111, "upheld": [903, 971], "upon": 153, "upper": [152, 153, 154, 232, 246, 357, 437, 529, 535, 590, 625, 762, 772, 791, 792, 794, 795, 810, 811, 839, 840, 852, 893, 971, 1055, 1128, 1153, 1158, 1222, 1362, 1374, 1392, 1395], "upper_bound": [246, 357, 437, 535, 590, 852, 893, 971, 1055, 1158, 1222, 1374], "uppercas": [631, 744, 1336, 1397], "upsampl": [246, 357, 893, 971], "urandom": [416, 1029], "uri": [39, 40, 154, 155, 156, 168, 169, 357], "url": [154, 155, 164, 170, 172, 193, 706, 708, 1298, 1300], "urllib": 155, "us": [1, 7, 9, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 55, 57, 58, 64, 65, 66, 67, 73, 89, 98, 100, 103, 107, 130, 134, 136, 137, 139, 141, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 193, 214, 215, 216, 217, 220, 224, 226, 228, 229, 235, 236, 237, 239, 245, 246, 253, 255, 257, 258, 259, 261, 262, 265, 272, 276, 277, 279, 280, 281, 285, 289, 290, 291, 292, 293, 295, 296, 298, 303, 304, 305, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 333, 334, 336, 343, 357, 360, 362, 368, 370, 372, 374, 383, 384, 407, 412, 413, 415, 428, 430, 432, 433, 434, 437, 447, 450, 453, 454, 462, 481, 482, 483, 485, 488, 496, 499, 501, 504, 505, 506, 507, 508, 512, 513, 514, 518, 533, 534, 535, 548, 562, 578, 586, 590, 592, 598, 599, 602, 623, 626, 628, 630, 631, 640, 646, 647, 650, 652, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 682, 684, 686, 687, 691, 693, 694, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 710, 711, 714, 715, 716, 717, 718, 721, 722, 723, 725, 727, 729, 731, 732, 733, 734, 735, 737, 738, 742, 745, 746, 750, 752, 758, 764, 765, 767, 768, 769, 770, 771, 774, 775, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 800, 802, 806, 807, 809, 810, 812, 814, 815, 816, 818, 820, 821, 824, 827, 828, 829, 830, 831, 833, 834, 835, 836, 839, 840, 841, 842, 843, 848, 851, 852, 863, 864, 867, 868, 869, 870, 871, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 892, 893, 898, 899, 901, 908, 913, 916, 919, 920, 921, 922, 924, 926, 928, 929, 930, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 954, 971, 975, 976, 977, 984, 985, 987, 1016, 1020, 1025, 1026, 1028, 1041, 1046, 1047, 1050, 1066, 1068, 1071, 1072, 1080, 1089, 1090, 1103, 1104, 1105, 1107, 1110, 1118, 1121, 1124, 1129, 1130, 1131, 1132, 1137, 1138, 1144, 1150, 1157, 1158, 1174, 1188, 1204, 1211, 1216, 1224, 1244, 1245, 1247, 1249, 1252, 1254, 1256, 1257, 1258, 1259, 1271, 1272, 1274, 1275, 1278, 1284, 1286, 1288, 1289, 1290, 1291, 1293, 1294, 1297, 1298, 1299, 1301, 1302, 1303, 1308, 1309, 1310, 1313, 1314, 1315, 1317, 1319, 1327, 1329, 1330, 1334, 1337, 1344, 1348, 1349, 1351, 1354, 1355, 1359, 1364, 1374, 1383, 1384, 1385, 1386, 1387, 1389, 1390, 1397, 1398, 1402, 1404, 1405], "usag": [184, 188, 301, 357, 842, 977, 1279, 1374], "usd": [244, 357, 1405], "use_abs_path": 149, "use_pyarrow": [47, 52, 152, 156, 158, 160, 164, 168, 315, 357, 971, 1354, 1374], "use_pyarrow_extension_arrai": [316, 357, 1355, 1374], "use_pyarrow_write_to_dataset": [47, 357], "use_statist": [164, 172], "user": [39, 147, 149, 154, 155, 210, 265, 280, 343, 357, 598, 599, 644, 684, 786, 800, 814, 826, 852, 912, 954, 971, 975, 979, 1224, 1275, 1374], "user_conn": 154, "usernam": [152, 155, 158, 160], "userwarn": 1, "usr": 154, "usual": [107, 155, 208, 319, 357, 456, 1074], "utc": [156, 168, 456, 460, 462, 464, 482, 735, 738, 976, 977, 1074, 1078, 1082, 1104, 1327, 1330], "utc_tz": 977, "utf": [38, 49, 88, 357, 971], "utf8": [21, 152, 153, 167, 712, 725, 736, 1304, 1317, 1328], "utf8_borders_onli": 21, "utf8_ful": [21, 58, 140], "utf8_full_condens": [7, 21, 140], "utf8_horizontal_onli": 21, "utf8_no_bord": 21, "util": [319, 357, 802, 971], "uvloop": 154, "uvw": [707, 1299], "v": [8, 9, 10, 47, 232, 357, 683, 768, 770, 852, 1273, 1374, 1386, 1387], "v1": 33, "v2": [8, 10, 158, 170], "val": [41, 288, 357, 599, 644, 756, 842, 852, 918, 971], "valid": [38, 41, 49, 73, 97, 147, 152, 153, 154, 158, 160, 164, 167, 188, 208, 226, 232, 260, 261, 286, 357, 447, 698, 700, 706, 707, 708, 710, 715, 721, 722, 842, 852, 881, 897, 898, 917, 946, 971, 977, 1066, 1128, 1290, 1292, 1298, 1299, 1300, 1302, 1307, 1313, 1314, 1374, 1383, 1384], "validate_output_schema": [903, 971], "validate_schema": [97, 147], "vals_phys": [756, 852], "valu": [4, 5, 11, 12, 13, 14, 18, 21, 29, 31, 37, 38, 41, 47, 49, 52, 53, 55, 57, 58, 66, 67, 70, 76, 77, 85, 86, 95, 100, 109, 135, 136, 138, 139, 145, 152, 153, 154, 155, 164, 167, 170, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 208, 212, 214, 215, 216, 217, 224, 228, 229, 231, 234, 235, 236, 237, 241, 244, 246, 247, 248, 252, 256, 258, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 279, 281, 282, 283, 285, 286, 289, 290, 291, 292, 293, 300, 303, 305, 306, 307, 308, 310, 311, 312, 315, 316, 320, 321, 324, 325, 326, 327, 328, 335, 338, 339, 341, 344, 345, 347, 348, 357, 360, 361, 366, 367, 368, 370, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 446, 447, 448, 451, 453, 454, 459, 463, 474, 479, 488, 497, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 583, 585, 586, 587, 588, 590, 591, 592, 594, 596, 597, 598, 599, 600, 601, 602, 607, 618, 619, 620, 621, 622, 632, 633, 634, 635, 638, 640, 641, 644, 645, 646, 647, 648, 650, 653, 654, 655, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 688, 689, 690, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 736, 745, 747, 751, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 775, 778, 780, 781, 783, 785, 786, 787, 788, 789, 799, 800, 805, 806, 807, 808, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 835, 836, 842, 852, 868, 869, 879, 882, 883, 887, 888, 889, 893, 895, 896, 897, 898, 905, 906, 907, 908, 910, 911, 914, 915, 916, 917, 919, 925, 928, 930, 931, 933, 936, 937, 938, 949, 950, 952, 955, 956, 958, 959, 971, 977, 982, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1041, 1042, 1043, 1046, 1047, 1048, 1052, 1055, 1057, 1058, 1059, 1061, 1066, 1067, 1068, 1069, 1071, 1072, 1077, 1081, 1096, 1101, 1110, 1119, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1142, 1143, 1144, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1177, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1209, 1211, 1212, 1213, 1214, 1217, 1218, 1224, 1225, 1226, 1228, 1229, 1231, 1233, 1234, 1236, 1237, 1239, 1240, 1244, 1245, 1246, 1247, 1251, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1274, 1277, 1281, 1282, 1283, 1284, 1286, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1319, 1320, 1321, 1328, 1337, 1340, 1344, 1345, 1346, 1347, 1349, 1354, 1355, 1356, 1359, 1361, 1363, 1365, 1374, 1383, 1388, 1390, 1391, 1392, 1393, 1394, 1396, 1397, 1398, 1400, 1402, 1404, 1405], "value1": [694, 852], "value2": [694, 852], "value_a": 1402, "value_b": 1402, "value_count": [761, 852, 1374], "value_cum_sum": [446, 852], "value_cum_sum_all_fil": [446, 852], "value_nam": [272, 324, 357, 908, 936, 971], "value_var": [272, 324, 357, 908, 936, 971], "valueerror": [10, 16, 21, 214], "valueexcept": 812, "var": [41, 189, 357, 678, 679, 852, 971, 1374, 1391], "var_samp": 1391, "vari": [157, 163, 214, 456, 1074, 1405], "variabl": [31, 38, 43, 47, 49, 50, 51, 52, 64, 65, 85, 162, 164, 167, 170, 171, 172, 187, 190, 198, 272, 312, 324, 357, 874, 875, 885, 908, 913, 926, 936, 971, 1349, 1374, 1384, 1386, 1402], "variable_nam": [272, 324, 357, 908, 936, 971], "variad": 154, "varianc": [328, 357, 507, 548, 678, 679, 764, 841, 852, 938, 971, 1132, 1174, 1268, 1364, 1374, 1395], "variou": [154, 213, 220, 357, 852, 876, 971, 976, 977, 1374], "vector": [663, 665, 667, 669, 671, 674, 676, 678, 852, 1260, 1261, 1263, 1266, 1267, 1268, 1374], "vector_index_format": 201, "vectoris": [475, 476, 1097, 1098], "vein": 208, "verbos": [30, 177, 179, 208, 707, 1299], "veri": [154, 258, 321, 357, 599, 852, 954, 1396], "verifi": [261, 357, 898, 971], "versicolor": [357, 360], "version": [39, 40, 43, 44, 55, 63, 64, 67, 134, 140, 152, 153, 156, 157, 158, 160, 164, 167, 168, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 198, 212, 215, 216, 225, 246, 247, 260, 272, 281, 289, 297, 304, 309, 314, 315, 319, 320, 327, 333, 338, 357, 360, 428, 447, 450, 455, 462, 475, 476, 488, 499, 504, 506, 507, 520, 527, 598, 599, 606, 607, 613, 617, 654, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 697, 705, 739, 750, 758, 765, 774, 777, 782, 826, 828, 829, 831, 852, 868, 869, 874, 880, 885, 893, 897, 908, 913, 915, 919, 923, 926, 929, 933, 942, 943, 949, 971, 977, 1066, 1073, 1080, 1089, 1090, 1097, 1098, 1110, 1121, 1127, 1129, 1131, 1132, 1150, 1151, 1252, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1289, 1297, 1331, 1348, 1352, 1354, 1357, 1374, 1379, 1402], "versu": [224, 357, 879, 971], "vertic": [66, 234, 325, 329, 357, 697, 713, 1289, 1305], "vertical_relax": 66, "via": [31, 152, 153, 154, 158, 162, 164, 167, 170, 171, 172, 211, 213, 225, 258, 291, 357, 450, 599, 708, 852, 880, 915, 971, 980, 1300], "view": 205, "virtual": 149, "visibl": [18, 232, 357, 1128, 1374], "visit": [447, 852, 1066, 1374], "visual": [253, 255, 357, 614, 926, 971], "volk": 148, "vote": [706, 708, 1298, 1300], "vowel": [721, 722, 1313, 1314], "vstack": [66, 234, 357], "w": [41, 154, 246, 292, 357, 700, 704, 706, 708, 768, 770, 893, 971, 977, 1292, 1296, 1298, 1300, 1323, 1386, 1387, 1390], "w_i": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "wa": [39, 43, 44, 63, 107, 140, 152, 153, 157, 158, 160, 164, 167, 170, 171, 172, 177, 178, 179, 180, 216, 225, 246, 260, 281, 289, 309, 314, 315, 320, 327, 357, 360, 428, 447, 450, 504, 506, 507, 655, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 723, 758, 796, 828, 829, 852, 869, 880, 893, 897, 919, 933, 971, 977, 1066, 1127, 1129, 1131, 1132, 1253, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1315, 1348, 1354, 1374, 1379, 1397, 1402], "wai": [98, 100, 133, 135, 136, 137, 139, 161, 162, 171, 245, 259, 280, 303, 336, 357, 483, 644, 683, 694, 706, 783, 842, 848, 852, 877, 884, 892, 912, 920, 928, 939, 947, 954, 971, 975, 1105, 1273, 1298, 1374], "wait": [49, 50, 51, 52, 971], "walk": 781, "want": [65, 136, 138, 152, 153, 157, 158, 162, 164, 167, 208, 234, 265, 277, 289, 304, 357, 432, 455, 467, 514, 598, 599, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 687, 699, 716, 721, 722, 723, 777, 786, 791, 794, 800, 824, 827, 843, 852, 875, 929, 946, 971, 977, 1046, 1073, 1085, 1135, 1224, 1291, 1308, 1313, 1314, 1315, 1374, 1389], "warehous": 155, "warn": [102, 103, 106, 107, 110, 117, 119, 120, 130, 169, 640, 810, 811, 852, 1374], "watermark": [47, 357], "wb": [41, 357], "we": [47, 150, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 213, 224, 225, 246, 261, 281, 289, 327, 357, 360, 450, 478, 483, 496, 529, 562, 590, 598, 599, 660, 664, 666, 668, 670, 672, 675, 677, 679, 708, 721, 722, 740, 790, 791, 792, 793, 794, 795, 812, 839, 840, 842, 852, 879, 880, 889, 893, 898, 903, 916, 919, 971, 977, 1100, 1105, 1118, 1153, 1188, 1224, 1300, 1314, 1332, 1374, 1379, 1386], "weather": [721, 722, 1313, 1314], "wed": [357, 360], "wednesdai": [246, 357, 485, 488, 893, 971, 1107, 1110], "week": [246, 261, 289, 327, 357, 455, 467, 478, 483, 496, 498, 505, 660, 664, 666, 668, 670, 672, 675, 677, 679, 777, 791, 792, 794, 795, 796, 839, 840, 852, 893, 898, 919, 971, 977, 1073, 1085, 1100, 1105, 1118, 1120, 1130, 1374, 1398], "week_mask": [455, 467, 777, 1073, 1085], "weekdai": [463, 479], "weekend": [455, 467, 777, 1073, 1085], "weekli": [246, 357, 496, 893, 971, 1118], "weghorst": [708, 1300], "weight": [148, 504, 505, 506, 507, 662, 663, 665, 667, 669, 671, 674, 676, 678, 691, 852, 1129, 1130, 1131, 1132, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1284, 1374], "wei\u00df": 1397, "well": [41, 152, 153, 154, 167, 357, 535, 831, 852, 1158, 1374, 1402], "were": [208, 654, 655, 848, 852, 1252, 1253, 1374], "west": [76, 262, 357, 899, 971], "what": [53, 213, 266, 277, 357, 455, 598, 699, 723, 852, 904, 971, 1073, 1291, 1315], "whatev": 208, "when": [10, 11, 15, 18, 20, 24, 38, 39, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 73, 89, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 148, 152, 153, 154, 155, 157, 158, 160, 162, 163, 164, 167, 168, 170, 171, 172, 173, 177, 178, 179, 180, 184, 188, 208, 216, 224, 230, 232, 234, 236, 237, 239, 246, 260, 262, 265, 273, 280, 286, 290, 292, 295, 296, 300, 303, 309, 312, 314, 315, 319, 320, 322, 326, 332, 357, 402, 415, 432, 433, 437, 455, 467, 504, 506, 507, 513, 583, 590, 598, 611, 644, 646, 654, 655, 685, 693, 694, 699, 705, 709, 711, 712, 716, 717, 723, 725, 730, 731, 732, 735, 736, 752, 775, 777, 786, 800, 810, 835, 852, 869, 879, 888, 893, 897, 899, 903, 909, 917, 921, 922, 925, 928, 933, 934, 937, 941, 968, 971, 1015, 1028, 1046, 1047, 1055, 1068, 1073, 1085, 1128, 1129, 1131, 1132, 1135, 1138, 1164, 1209, 1252, 1253, 1272, 1274, 1277, 1291, 1297, 1301, 1303, 1304, 1308, 1309, 1315, 1317, 1322, 1323, 1324, 1327, 1328, 1348, 1349, 1354, 1374, 1389, 1402], "when1": 842, "when2": 842, "when_matched_update_al": [40, 357], "when_not_matched_insert_al": [40, 357], "where": [41, 55, 58, 107, 154, 155, 157, 214, 228, 229, 234, 237, 246, 258, 262, 272, 281, 285, 291, 304, 305, 314, 319, 324, 326, 328, 357, 384, 488, 498, 501, 503, 505, 514, 586, 592, 598, 635, 653, 683, 691, 694, 696, 723, 743, 764, 776, 782, 784, 828, 829, 831, 833, 841, 842, 852, 882, 883, 889, 893, 899, 908, 916, 929, 930, 936, 937, 938, 971, 997, 1110, 1120, 1124, 1126, 1130, 1135, 1139, 1236, 1251, 1273, 1284, 1288, 1315, 1335, 1364, 1365, 1374, 1383, 1391, 1401, 1402, 1404], "wherea": [152, 167, 289, 357, 430, 434, 483, 496, 632, 633, 660, 852, 919, 971, 1105, 1118, 1233, 1234, 1374], "wherev": [41, 265, 343, 357, 599, 852, 1224, 1374], "whether": [38, 49, 53, 55, 97, 137, 139, 147, 148, 157, 163, 164, 170, 172, 188, 192, 231, 257, 261, 298, 303, 357, 370, 372, 386, 387, 467, 468, 484, 526, 536, 553, 554, 640, 683, 684, 694, 709, 711, 775, 786, 800, 826, 852, 898, 903, 915, 924, 928, 971, 977, 984, 985, 999, 1000, 1045, 1050, 1085, 1086, 1106, 1127, 1149, 1150, 1159, 1179, 1180, 1273, 1301, 1303, 1374, 1386, 1402], "which": [1, 6, 10, 11, 21, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 66, 136, 138, 152, 153, 154, 155, 156, 157, 162, 163, 164, 167, 168, 169, 170, 171, 172, 184, 187, 189, 208, 216, 217, 224, 225, 228, 229, 232, 234, 245, 246, 251, 260, 261, 262, 281, 289, 297, 314, 315, 320, 322, 326, 327, 357, 370, 407, 415, 450, 455, 467, 478, 483, 485, 496, 505, 511, 535, 538, 541, 543, 544, 545, 546, 590, 598, 599, 611, 613, 660, 664, 666, 668, 670, 672, 675, 677, 679, 722, 740, 777, 791, 792, 794, 795, 796, 810, 811, 839, 840, 842, 852, 869, 871, 874, 877, 879, 880, 882, 884, 885, 893, 897, 898, 899, 913, 915, 919, 923, 926, 933, 934, 937, 939, 971, 977, 1020, 1028, 1073, 1085, 1100, 1105, 1107, 1118, 1128, 1130, 1135, 1136, 1158, 1162, 1165, 1167, 1168, 1169, 1170, 1216, 1274, 1332, 1352, 1354, 1374, 1384, 1390, 1402, 1405], "while": [40, 65, 153, 156, 157, 168, 172, 184, 188, 198, 208, 258, 272, 321, 324, 326, 357, 433, 654, 717, 852, 875, 908, 936, 937, 971, 1047, 1252, 1309, 1374], "white": [41, 357], "whitespac": [140, 730, 731, 732, 1322, 1323, 1324, 1397], "whole": [598, 693, 694, 706, 852, 954, 971, 1298], "whose": [58, 101, 261, 281, 357, 508, 798, 852, 898, 971, 977], "why": [874, 885, 913, 926, 971], "wide": [154, 244, 272, 281, 324, 325, 357, 908, 936, 971], "wider": 56, "width": [27, 41, 67, 152, 153, 167, 357, 360, 589, 779, 971, 977, 1215, 1374, 1379], "wiki": 21, "wikipedia": 21, "wildcard": [149, 508, 746, 786, 787, 800, 826, 848, 852, 977], "win_loss": [41, 357], "window": [152, 153, 167, 246, 289, 357, 447, 504, 506, 507, 599, 640, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 780, 828, 829, 852, 893, 919, 971, 1066, 1129, 1131, 1132, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374], "window_s": [661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 828, 829, 852, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1374], "windowmappingstrategi": [640, 852], "winter": [709, 711, 721, 722, 1301, 1303], "wise": [41, 58, 154, 239, 357, 375, 376, 377, 378, 379, 380, 438, 439, 440, 509, 594, 688, 689, 690, 754, 755, 800, 826, 852, 988, 989, 990, 991, 992, 993, 1057, 1058, 1059, 1133, 1220, 1221, 1281, 1282, 1283, 1346, 1347, 1374], "wish": [216, 320, 357, 427, 428, 757, 758, 852, 869, 933, 971, 1040, 1041, 1358, 1359, 1374], "with_column": [1, 13, 61, 64, 147, 214, 246, 280, 289, 319, 325, 332, 357, 362, 367, 369, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 400, 401, 402, 403, 407, 412, 413, 415, 416, 429, 430, 432, 433, 434, 437, 442, 443, 444, 445, 446, 448, 451, 455, 456, 458, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 497, 498, 500, 502, 503, 505, 512, 513, 518, 523, 525, 527, 533, 534, 535, 536, 539, 540, 542, 543, 544, 545, 546, 550, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 597, 598, 599, 619, 621, 623, 624, 626, 628, 630, 631, 634, 635, 636, 640, 641, 644, 645, 647, 650, 654, 655, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 685, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 739, 740, 741, 743, 744, 745, 747, 750, 751, 756, 759, 766, 768, 770, 773, 777, 778, 779, 780, 781, 785, 786, 787, 789, 790, 792, 793, 797, 807, 810, 811, 813, 816, 818, 821, 832, 836, 838, 840, 842, 848, 852, 874, 885, 893, 895, 912, 913, 919, 926, 941, 971, 977, 1067, 1104, 1245, 1303, 1374, 1402], "with_column_nam": 167, "with_columns_seq": [357, 971], "with_context": 971, "with_field": [599, 852], "with_replac": [293, 357, 578, 682, 852, 1204, 1271, 1374], "with_row_count": [357, 971], "with_row_index": [1, 289, 333, 357, 664, 666, 668, 670, 672, 675, 677, 679, 852, 943, 971, 1272, 1374, 1379], "within": [47, 53, 54, 55, 67, 77, 85, 177, 178, 179, 180, 199, 200, 202, 214, 245, 246, 247, 261, 289, 327, 357, 527, 650, 694, 852, 893, 898, 919, 971, 1151, 1374, 1402], "without": [1, 32, 33, 34, 35, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 74, 80, 99, 107, 110, 132, 140, 143, 144, 145, 146, 147, 148, 156, 159, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 181, 182, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 204, 260, 262, 266, 304, 314, 315, 319, 325, 326, 357, 360, 361, 362, 447, 448, 455, 467, 529, 599, 647, 661, 662, 664, 666, 668, 670, 672, 673, 675, 677, 679, 699, 709, 711, 723, 777, 779, 783, 810, 811, 830, 852, 874, 875, 885, 897, 899, 904, 913, 929, 937, 945, 971, 975, 977, 1050, 1066, 1067, 1073, 1085, 1153, 1245, 1258, 1259, 1262, 1264, 1265, 1291, 1301, 1303, 1315, 1352, 1354, 1357, 1374, 1379, 1404], "without_fil": [156, 168, 169], "wod": [732, 1324], "womp": [323, 357, 935, 971], "word": [155, 721, 722, 731, 732, 743, 1335, 1397], "work": [41, 74, 80, 152, 153, 158, 162, 164, 173, 296, 332, 357, 370, 372, 408, 432, 433, 436, 437, 508, 517, 562, 591, 599, 623, 624, 626, 628, 630, 631, 640, 712, 716, 717, 725, 736, 760, 810, 852, 915, 922, 941, 971, 975, 977, 984, 985, 1021, 1046, 1047, 1052, 1055, 1142, 1188, 1217, 1304, 1308, 1309, 1317, 1328, 1360, 1374], "workaround": 357, "workbook": [41, 157, 163, 357], "workday_raas_format": 201, "worker": [915, 971], "working_with_conditional_format": [41, 357], "working_with_sparklin": [41, 357], "worksheet": [41, 157, 163, 357], "workspac": 193, "workspace_url": 193, "world": [1, 21, 699, 723, 730, 731, 732, 977, 1195, 1291, 1315, 1322, 1323, 1324, 1385, 1388, 1397], "wors": [928, 971], "worth": [562, 1188], "worthwhil": [177, 179], "would": [106, 152, 153, 166, 167, 213, 315, 319, 357, 360, 383, 394, 455, 467, 567, 599, 610, 640, 646, 650, 752, 775, 777, 835, 852, 996, 1007, 1073, 1085, 1193, 1244, 1247, 1344, 1354, 1374, 1379, 1400], "wow": 977, "wrap": [87, 140, 429, 535, 598, 852, 1042, 1374], "wrap_numer": [429, 852, 1042, 1374], "wrapper": [65, 875, 971], "writabl": [36, 38, 43, 44, 45, 46, 47, 297, 315, 357, 1354, 1374], "write": [36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 143, 151, 153, 158, 208, 220, 357, 437, 614, 617, 852, 901, 926, 971, 977, 1055, 1374], "write_avro": 357, "write_clipboard": [151, 357], "write_csv": [37, 153, 167, 357], "write_databas": 357, "write_delta": 357, "write_excel": 357, "write_iceberg": 357, "write_ipc": [158, 357], "write_ipc_stream": 357, "write_json": 357, "write_markdown_frame_to_stdout": 208, "write_ndjson": [45, 357], "write_parquet": 357, "write_t": [47, 357], "write_to_dataset": [47, 357], "writeabl": [315, 357, 1354, 1374], "writer": [40, 357], "writer_properti": [40, 357], "writerproperti": [40, 357], "written": [6, 36, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 297, 357, 613, 923, 971], "ww": [1397, 1404], "www": [718, 748, 1310], "x": [28, 58, 66, 89, 109, 134, 140, 143, 152, 153, 155, 157, 163, 167, 181, 182, 184, 212, 232, 250, 253, 255, 260, 281, 291, 292, 321, 324, 325, 357, 360, 362, 367, 369, 371, 390, 395, 416, 442, 449, 502, 503, 518, 523, 525, 527, 550, 557, 569, 595, 597, 598, 599, 619, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 639, 645, 653, 654, 655, 659, 688, 691, 727, 750, 751, 756, 759, 766, 768, 770, 773, 774, 780, 784, 786, 787, 789, 800, 812, 813, 816, 818, 821, 826, 831, 836, 842, 852, 897, 903, 927, 929, 936, 971, 976, 977, 1008, 1061, 1138, 1157, 1224, 1252, 1253, 1281, 1284, 1319, 1352, 1356, 1357, 1374, 1379, 1386, 1387, 1390, 1396, 1397, 1402, 1404], "x00": [411, 412, 413, 414, 415, 417, 701, 1024, 1025, 1026, 1027, 1028, 1030, 1293], "x01": [415, 1028], "x05": [415, 1028], "x07": 416, "x1": 416, "x10": [415, 1028], "x80": 416, "x83": 416, "x88": 416, "x8e": 416, "x99": 416, "x_": [505, 852, 1130, 1374], "x_0": [325, 357, 504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374], "x_1": [325, 357, 505, 852, 1130, 1374], "x_2": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "x_i": [505, 852, 1130, 1374], "x_invers": [645, 852], "x_pow_8": 1396, "x_round": 1396, "x_round_1": 1396, "x_squar": [645, 852], "x_t": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "x_uniqu": [622, 852], "x_y": [395, 569], "xb": 416, "xb9neq": 416, "xbd": 416, "xc14": 416, "xd3": 416, "xdist": 1405, "xee": 416, "xf4v": 416, "xf9": 416, "xfb": 416, "xff": [411, 412, 413, 414, 417, 701, 1024, 1025, 1026, 1027, 1030, 1293], "xi": [707, 1299], "xl": 157, "xlog2": [621, 645, 852], "xlsb": 157, "xlsx": [41, 157, 357], "xlsx2csv": [157, 176], "xlsx2csv_option": 157, "xlsxwriter": [41, 176, 357], "xor": [426, 852, 1039, 1374, 1393], "xor_xi": [766, 852], "xx": [11, 59, 61, 188, 224, 251, 304, 357, 879, 971, 977, 1390, 1397, 1404], "xxx": [228, 357, 748, 882, 971], "xy": [59, 61], "xyz": [7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 367, 700, 707, 852, 1292, 1299, 1350, 1374, 1397], "y": [28, 58, 66, 89, 109, 134, 140, 143, 181, 182, 184, 212, 232, 253, 255, 260, 281, 291, 292, 321, 324, 325, 357, 360, 367, 369, 371, 390, 395, 416, 485, 488, 502, 503, 523, 525, 550, 557, 569, 597, 599, 622, 624, 626, 628, 630, 631, 634, 635, 639, 653, 654, 655, 659, 735, 737, 738, 750, 759, 766, 768, 770, 773, 774, 784, 789, 796, 812, 816, 818, 821, 831, 836, 852, 897, 927, 929, 936, 971, 976, 977, 1008, 1107, 1110, 1252, 1253, 1327, 1329, 1330, 1374, 1379, 1390, 1397, 1398, 1404], "y_": [504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374], "y_0": [325, 357, 504, 505, 506, 507, 852, 1129, 1130, 1131, 1132, 1374], "y_1": [325, 357], "y_i": [505, 852, 1130, 1374], "y_mul": 750, "y_t": [504, 506, 507, 852, 1129, 1131, 1132, 1374], "y_uniqu": [622, 852], "ya": [725, 1317], "ya29": 169, "ye": [143, 842], "year": [53, 55, 246, 261, 289, 304, 327, 357, 455, 467, 468, 469, 478, 479, 481, 483, 496, 497, 660, 664, 666, 668, 670, 672, 675, 677, 679, 777, 790, 791, 792, 793, 794, 795, 839, 840, 852, 893, 898, 919, 971, 977, 1073, 1085, 1086, 1087, 1100, 1101, 1103, 1105, 1118, 1119, 1398], "yellow": [357, 361, 411, 412, 413, 414, 417], "yield": [137, 139, 152, 153, 154, 167, 232, 234, 257, 321, 357, 518, 598, 640, 852, 971, 1128, 1135, 1374], "you": [1, 11, 15, 41, 47, 52, 58, 65, 66, 133, 135, 136, 137, 138, 139, 149, 152, 153, 154, 155, 157, 158, 161, 162, 164, 166, 167, 171, 173, 208, 216, 234, 237, 246, 257, 258, 261, 265, 277, 281, 285, 289, 290, 291, 292, 304, 311, 314, 320, 321, 322, 324, 343, 357, 360, 427, 428, 432, 455, 467, 475, 476, 478, 482, 485, 488, 508, 514, 535, 562, 590, 598, 599, 614, 640, 645, 646, 652, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 687, 699, 716, 721, 722, 723, 743, 746, 752, 757, 758, 777, 786, 791, 794, 796, 800, 810, 814, 824, 827, 831, 835, 843, 852, 869, 875, 889, 893, 898, 915, 916, 919, 926, 929, 933, 934, 936, 946, 954, 971, 975, 977, 1040, 1041, 1046, 1073, 1085, 1097, 1098, 1104, 1107, 1110, 1135, 1158, 1188, 1224, 1243, 1244, 1249, 1291, 1308, 1313, 1314, 1315, 1335, 1344, 1352, 1358, 1359, 1374, 1379, 1384, 1389, 1405], "your": [39, 41, 57, 58, 100, 147, 152, 153, 154, 155, 157, 173, 208, 258, 260, 265, 291, 292, 295, 311, 331, 336, 343, 357, 360, 460, 505, 520, 599, 708, 735, 737, 738, 745, 814, 852, 897, 903, 921, 940, 947, 954, 971, 975, 1078, 1130, 1224, 1300, 1327, 1329, 1330, 1337, 1374, 1379, 1405], "yy": [11, 59, 61, 188, 224, 251, 304, 357, 879, 971, 977, 1390, 1397, 1404], "yyi": [228, 357, 748, 882, 971], "yyyi": [41, 357], "yz": [59, 61], "z": [41, 66, 89, 140, 182, 232, 253, 255, 260, 291, 292, 321, 324, 325, 357, 367, 369, 371, 527, 557, 599, 624, 626, 628, 630, 631, 639, 653, 654, 655, 699, 707, 709, 711, 723, 735, 738, 768, 770, 789, 816, 818, 821, 827, 831, 836, 852, 897, 927, 929, 936, 971, 976, 977, 1138, 1252, 1253, 1291, 1299, 1301, 1303, 1315, 1327, 1330, 1374, 1386, 1390, 1402, 1404], "z_0": [325, 357], "z_1": [325, 357], "zap": 977, "zero": [29, 41, 133, 134, 150, 152, 153, 158, 160, 164, 183, 186, 212, 236, 246, 258, 290, 304, 309, 315, 316, 357, 513, 590, 595, 680, 683, 691, 745, 759, 852, 872, 888, 893, 971, 1054, 1138, 1216, 1284, 1337, 1348, 1354, 1355, 1374, 1396, 1402], "zero_copy_onli": [1354, 1374], "zfill": [720, 766, 852, 1312], "zip": 1405, "zip_with": [239, 357, 1374], "zone": [73, 184, 185, 188, 456, 460, 482, 505, 738, 793, 794, 795, 852, 977, 1074, 1078, 1104, 1130, 1330, 1374], "zoneinfo": [73, 977], "zoom": [41, 357], "zstd": [40, 43, 44, 47, 50, 52, 357, 971], "zz": [188, 224, 251, 304, 357, 879, 971, 1390, 1397, 1404], "zzz": 748, "\u03bc": [140, 217, 246, 258, 289, 291, 292, 311, 327, 357, 456, 457, 459, 460, 461, 462, 464, 466, 470, 472, 473, 475, 476, 477, 478, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 660, 664, 666, 668, 670, 672, 675, 677, 679, 735, 738, 793, 794, 795, 796, 802, 852, 871, 893, 919, 971, 977, 1074, 1075, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1090, 1091, 1095, 1097, 1098, 1099, 1100, 1104, 1105, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1121, 1327, 1330, 1397], "\u0441\u0438\u043d\u0438\u0439": 1397, "\u0967\u096f\u096f\u096f": 977, "\u0968\u0966\u096d\u096d": 977, "\u4eac\u90fd": 977, "\u5927\u962a": 977, "\u6771\u4eac": [432, 433, 716, 717, 977, 1046, 1047, 1308, 1309], "\u90fd\u5e02": 977, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [718, 1310], "\uff54\uff45\uff53\uff54": 1397, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1397, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1397, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1397, "\ud835\udf0b": 1396}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType.to_dtype_expr", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.dtype_of", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.self_dtype", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "DataType expressions", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_close", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_close", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1390, 1403], "IF": 1394, "__array__": [210, 979], "__arrow_c_stream__": [211, 980], "__dataframe__": 212, "__getitem__": [213, 867, 981], "__iter__": 335, "__setitem__": 214, "ab": [366, 982, 1396], "aco": 1399, "acosd": 1399, "add": 367, "add_business_dai": [455, 1073], "agg": [336, 947], "agg_group": 368, "aggreg": [209, 365, 866, 978, 1391], "alia": [369, 983], "alias": [1391, 1396, 1397], "align_fram": 58, "all": [337, 370, 386, 553, 767, 948, 984, 999, 1179, 1403], "all_horizont": 768, "and_": 371, "ani": [372, 387, 554, 769, 985, 1000, 1180], "any_horizont": 770, "api": [1, 59, 60, 61, 62, 864, 1402], "append": [373, 986], "approx_n_uniqu": [215, 374, 771, 868, 987], "arang": 772, "arcco": [375, 988], "arccosh": [376, 989], "arcsin": [377, 990], "arcsinh": [378, 991], "arctan": [379, 992], "arctan2": 773, "arctan2d": 774, "arctanh": [380, 993], "arg_max": [381, 388, 555, 994, 1001, 1181], "arg_min": [382, 389, 556, 995, 1002, 1182], "arg_sort": [383, 996], "arg_sort_bi": 775, "arg_tru": [384, 997], "arg_uniqu": [385, 998], "arg_wher": 776, "arr": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "arrai": [67, 844, 1366, 1392], "array_agg": 1392, "array_contain": 1392, "array_get": 1392, "array_length": 1392, "array_low": 1392, "array_mean": 1392, "array_revers": 1392, "array_sum": 1392, "array_to_str": 1392, "array_uniqu": 1392, "array_upp": 1392, "asin": 1399, "asind": 1399, "assert": 1405, "assert_frame_equ": 177, "assert_frame_not_equ": 178, "assert_series_equ": 179, "assert_series_not_equ": 180, "atan": 1399, "atan2": 1399, "atan2d": 1399, "atand": 1399, "attribut": [352, 966, 1367], "avail": 1, "avg": 1391, "avro": 865, "backward_fil": [410, 1023], "base_utc_offset": [456, 1074], "basepartitioncontext": 144, "batched_read": 142, "batchedcsvread": 142, "bin": [411, 412, 413, 414, 415, 416, 417, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "binari": [68, 845, 858, 1368], "bit_and": 1393, "bit_count": 1393, "bit_length": 1397, "bit_or": 1393, "bit_xor": 1393, "bitwis": 1393, "bitwise_and": [418, 1031], "bitwise_count_on": [419, 1032], "bitwise_count_zero": [420, 1033], "bitwise_leading_on": [421, 1034], "bitwise_leading_zero": [422, 1035], "bitwise_or": [423, 1036], "bitwise_trailing_on": [424, 1037], "bitwise_trailing_zero": [425, 1038], "bitwise_xor": [426, 1039], "boolean": [69, 846, 1369], "bottom_k": [216, 427, 869, 1040], "bottom_k_bi": [428, 1041], "build_info": 63, "business_day_count": 777, "cach": 870, "cancel": 963, "cast": [217, 429, 865, 871, 1042, 1400], "cast_time_unit": [457, 1075], "cat": [430, 431, 432, 433, 434, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "catalog": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "cataloginfo": 199, "categor": 70, "categori": [847, 1370], "categoricalremappingwarn": 102, "cbrt": [435, 1051, 1396], "ceil": [436, 1052, 1396], "centuri": [458, 1076], "chronoformatwarn": 103, "chunk_length": 1053, "claus": 1390, "clear": [218, 872, 1054], "clip": [437, 1055], "clipboard": 865, "clone": [219, 873, 1056], "cloud": 865, "co": [438, 1057, 1399], "coalesc": [778, 1394], "col": 848, "collect": 874, "collect_al": 64, "collect_all_async": 65, "collect_async": 875, "collect_schema": [220, 876], "column": [181, 182, 221, 849, 877], "columninfo": 200, "columnnotfounderror": 104, "combin": [459, 1077], "comparison": [858, 1378], "comput": [353, 850, 1371], "computeerror": 105, "concat": [66, 557, 697, 1183, 1289, 1397], "concat_arr": 779, "concat_list": 780, "concat_str": 781, "concat_w": 1397, "condit": 1394, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 208], "conjunct": 858, "contain": [390, 411, 558, 698, 1003, 1024, 1184, 1290], "contains_ani": [699, 1291], "context": 208, "convers": 863, "convert_time_zon": [460, 1078], "corr": [222, 782, 1391], "cosd": 1399, "cosh": [439, 1058], "cot": [440, 1059, 1399], "cotd": 1399, "count": [223, 338, 441, 783, 878, 949, 1060, 1391], "count_match": [391, 559, 700, 1004, 1185, 1292], "cov": 784, "creat": 1404, "create_list_strategi": 183, "credenti": 865, "credentialprovid": 32, "credentialprovideraw": 33, "credentialproviderazur": 34, "credentialprovidergcp": 35, "csv": [142, 865], "cum_count": [442, 785, 1061], "cum_fold": 786, "cum_max": [443, 1062], "cum_min": [444, 1063], "cum_prod": [445, 1064], "cum_reduc": 787, "cum_sum": [446, 788, 1065], "cum_sum_horizont": 789, "cumulative_ev": [447, 1066], "customufuncwarn": 106, "cut": [448, 1067], "dai": [463, 1081], "data": 363, "databas": 865, "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 184, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357], "dataorientationwarn": 107, "dataset": 865, "datasourceformat": 201, "datatyp": [48, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 362, 363], "date": [72, 461, 790, 1079, 1397], "date_part": 1398, "date_rang": [791, 792], "datetim": [73, 462, 793, 1080], "datetime_rang": [794, 795], "decim": 74, "decod": [412, 701, 1025, 1293], "decor": 208, "defer": 97, "degre": [449, 1399], "delet": 1404, "delta": 865, "describ": [224, 879, 1068], "descript": [354, 967, 1372], "deseri": [225, 450, 880], "diff": [451, 560, 1069, 1186], "disable_string_cach": 98, "distinct": 1390, "div": 1396, "document": 1402, "dot": [452, 1070], "drop": [226, 881, 1404], "drop_in_plac": 227, "drop_nan": [228, 453, 882, 1071], "drop_nul": [229, 454, 561, 883, 1072, 1187], "dst_offset": [464, 1082], "dt": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122], "dtype": [185, 230, 884, 1123], "dtype_of": 99, "duplicateerror": 108, "durat": [75, 796], "element": 797, "enable_string_cach": 100, "encod": [413, 702, 1026, 1294], "ends_with": [414, 430, 703, 1027, 1043, 1295, 1397], "engine_config": 946, "entropi": [501, 1124], "enum": 76, "epoch": [465, 1083], "eq": [502, 603, 1125], "eq_miss": [503, 1126], "equal": [231, 1127], "error": 364, "escape_regex": [101, 704, 1296], "estimated_s": [232, 1128], "eval": [562, 1188], "ewm_mean": [504, 1129], "ewm_mean_bi": [505, 1130], "ewm_std": [506, 1131], "ewm_var": [507, 1132], "exampl": [1, 977, 1405], "excel": 865, "except": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 364, 1403], "exclud": [508, 798], "execut": 1383, "execute_glob": 1384, "exp": [509, 1133, 1396], "explain": [885, 1404], "explain_al": 132, "explod": [233, 392, 510, 563, 705, 886, 1005, 1134, 1189, 1297], "export": [355, 1373], "expr": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766], "express": [362, 852, 975, 1402], "extend": [1, 234, 1135], "extend_const": [511, 1136], "extract": [706, 1298, 1398], "extract_al": [707, 1299], "extract_group": [708, 1300], "extract_mani": [709, 1301], "feather": 865, "fetch": 964, "fetch_block": 965, "field": [77, 746, 1338, 1339], "fill_nan": [235, 512, 887, 1137], "fill_nul": [236, 513, 888, 1138], "filter": [237, 514, 889, 1139], "find": [710, 1302], "find_mani": [711, 1303], "first": [339, 393, 515, 564, 799, 890, 950, 1006, 1140, 1190, 1391], "flag": [238, 1141], "flatten": 516, "float32": 78, "float64": 79, "floor": [517, 1142, 1396], "floordiv": 518, "fold": [239, 800], "format": 801, "forward_fil": [519, 1143], "frame": 1402, "from": 1390, "from_arrow": 133, "from_datafram": 134, "from_dict": [135, 136], "from_epoch": 802, "from_json": 520, "from_numpi": 137, "from_panda": 138, "from_record": 139, "from_repr": 140, "function": [1, 362, 851, 863, 977, 1395], "gather": [521, 565, 1144, 1191], "gather_everi": [240, 522, 566, 891, 1145, 1192], "ge": [523, 1146], "get": [394, 524, 567, 1007, 1193], "get_categori": [431, 1044], "get_chunk": 1147, "get_column": [241, 243], "get_column_index": 242, "get_index_typ": 141, "get_polars_schema": 204, "get_table_info": 194, "glimps": 244, "global": 1402, "gpuengin": [946, 968], "greatest": 1394, "group": [803, 1390], "group_bi": [245, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 892, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962], "group_by_dynam": [246, 893], "groupbi": [335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 356, 969], "gt": [525, 1148], "has_multiple_output": 604, "has_nul": [526, 1149], "has_valid": 1150, "hash": [527, 1151], "hash_row": 247, "have": 1390, "head": [248, 340, 528, 568, 712, 804, 894, 951, 1152, 1194, 1304], "height": 249, "helper": 1405, "hist": [529, 1153], "hour": [466, 1084], "hstack": 250, "iceberg": 865, "ifnul": 1394, "implod": [530, 805, 1154], "import": 977, "in_process": [963, 964, 965], "index": 0, "index_of": [531, 1155], "initcap": 1397, "inprocessqueri": [963, 964, 965, 970], "input": 865, "insert_column": 251, "inspect": [532, 895], "instanc": 208, "int128": 80, "int16": 81, "int32": 82, "int64": 83, "int8": 84, "int_rang": [806, 807], "interfac": 1401, "interpol": [252, 533, 896, 1156], "interpolate_bi": [534, 1157], "intersect": 1403, "introduct": 1402, "invalidoperationerror": 109, "io": [142, 143, 144, 145, 146, 147, 975], "ipc": 865, "is_between": [535, 1158], "is_business_dai": [467, 1085], "is_clos": [536, 1159], "is_column": 605, "is_column_select": 606, "is_dupl": [253, 537, 1160], "is_empti": [254, 1161], "is_finit": [538, 1162], "is_first_distinct": [539, 1163], "is_in": [540, 1164], "is_infinit": [541, 1165], "is_last_distinct": [542, 1166], "is_leap_year": [468, 1086], "is_liter": 607, "is_loc": 1045, "is_nan": [543, 1167], "is_not_nan": [544, 1168], "is_not_nul": [545, 1169], "is_nul": [546, 1170], "is_regex_project": 608, "is_sort": 1171, "is_uniqu": [255, 547, 1172], "iso_year": [469, 1087], "item": [256, 1173], "iter_column": 257, "iter_row": 258, "iter_slic": 259, "join": [260, 395, 569, 713, 897, 1008, 1195, 1305, 1390], "join_asof": [261, 898], "join_wher": [262, 899], "json": 865, "json_decod": [714, 1306], "json_encod": [747, 1340], "json_norm": 148, "json_path_match": [715, 1307], "keep": 623, "keyedpartit": 145, "keyedpartitioncontext": 146, "kurtosi": [548, 1174], "lake": 865, "last": [341, 396, 549, 570, 808, 900, 952, 1009, 1175, 1196, 1391], "lazi": [263, 901], "lazyfram": [49, 50, 51, 52, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 971], "lazygroupbi": [947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962], "le": [550, 1176], "least": 1394, "left": 1397, "len": [342, 551, 571, 809, 953, 1177, 1197], "len_byt": [432, 716, 1046, 1308], "len_char": [433, 717, 1047, 1309], "length": 1397, "limit": [264, 552, 902, 1178, 1390], "linear_spac": [810, 811], "list": [85, 186, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 853, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1375], "list_catalog": 195, "list_namespac": 196, "list_tabl": 197, "lit": 812, "ln": 1396, "load": [2, 208], "load_from_fil": 3, "load_profil": 187, "log": [593, 1219, 1396], "log10": [594, 1220, 1396], "log1p": [595, 1221, 1396], "log2": 1396, "lower": 1397, "lower_bound": [596, 1222], "lt": [597, 1223], "ltrim": 1397, "manag": 208, "manipul": [359, 856, 973, 1377], "map": 624, "map_batch": [598, 813, 903], "map_el": [599, 1224], "map_field": 625, "map_group": [343, 814, 954], "map_row": 265, "mapwithoutreturndtypewarn": 110, "match_to_schema": [266, 904], "math": 1396, "max": [267, 344, 397, 572, 600, 815, 905, 955, 1010, 1088, 1198, 1225, 1391], "max_horizont": [268, 816], "mean": [269, 345, 573, 601, 817, 906, 956, 1089, 1199, 1226], "mean_horizont": [270, 818], "median": [271, 346, 398, 574, 602, 819, 907, 957, 1011, 1090, 1200, 1227, 1391], "melt": [272, 908], "merge_sort": [273, 909], "meta": [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 854], "metadata": 974, "method": 1402, "microsecond": [470, 1091], "millennium": [471, 1092], "millisecond": [472, 1093], "min": [274, 347, 399, 575, 618, 820, 910, 958, 1012, 1094, 1201, 1228, 1391], "min_horizont": [275, 821], "minut": [473, 1095], "miscellan": [358, 855, 863, 972, 1376], "mod": [619, 1396], "mode": [620, 1229], "moduleupgraderequirederror": 111, "month": [474, 1096], "month_end": [475, 1097], "month_start": [476, 1098], "mul": 621, "multipl": [208, 863], "n_chunk": [276, 1230], "n_uniqu": [277, 348, 400, 576, 622, 822, 959, 1013, 1202, 1231], "name": [623, 624, 625, 626, 627, 628, 629, 630, 631, 849, 857, 1232, 1403], "namespaceinfo": 202, "nan_max": [632, 1233], "nan_min": [633, 1234], "nanosecond": [477, 1099], "ne": [609, 634, 1235], "ne_miss": [635, 1236], "neg": 636, "nest": 363, "new": 1, "new_from_index": 1237, "next_batch": 142, "nodataerror": 112, "normal": [718, 1310, 1397], "norowsreturnederror": 113, "not_": [637, 1238], "nth": 823, "null": 86, "null_count": [278, 638, 911, 1239], "nullif": 1394, "numer": [363, 858, 1378], "object": 87, "octet_length": 1397, "od": 865, "offset": 1390, "offset_bi": [478, 1100], "ones": 824, "oper": [858, 977, 1378, 1403, 1404], "option": [208, 865], "or_": 639, "order": 1390, "ordinal_dai": [479, 1101], "other": 363, "outofboundserror": 114, "output": 865, "output_nam": 610, "over": 640, "pad_end": [719, 1311], "pad_start": [720, 1312], "panic": 364, "panicexcept": 115, "parametercollisionerror": 116, "parametr": [181, 182, 183, 184, 185, 186, 187, 188, 189, 1405], "parquet": [143, 865], "parquetfieldoverwrit": 143, "partit": [144, 145, 146, 865], "partition_bi": 279, "partitionbykei": 53, "partitionmaxs": 54, "partitionpart": 55, "pct_chang": [641, 1240], "peak_max": [642, 1241], "peak_min": [643, 1242], "performancewarn": 117, "pi": 1396, "pipe": [280, 644, 912], "pivot": 281, "plot": [360, 1379], "plugin": [147, 149, 975], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1405], "polarserror": 118, "polarsinefficientmapwarn": 119, "polarswarn": 120, "pop": 611, "pow": [645, 1243, 1396], "prefix": 626, "prefix_field": 627, "product": [282, 646, 1244], "profil": [913, 1405], "provid": 1, "pyarrow": 865, "python": [864, 1402], "qcut": [647, 1245], "quantil": [283, 349, 648, 825, 914, 960, 1246], "quantile_cont": 1391, "quantile_disc": 1391, "quarter": [480, 1102], "queri": [863, 1402], "queryoptflag": 945, "radian": [649, 1399], "random": 863, "rank": [650, 1247], "read_avro": 150, "read_clipboard": 151, "read_csv": 152, "read_csv_batch": 153, "read_databas": 154, "read_database_uri": 155, "read_delta": 156, "read_excel": 157, "read_ipc": 158, "read_ipc_schema": 159, "read_ipc_stream": 160, "read_json": 161, "read_ndjson": 162, "read_od": 163, "read_parquet": 164, "read_parquet_metadata": 165, "read_parquet_schema": 166, "rechunk": [284, 651, 1248], "reduc": 826, "refer": 864, "regexp_lik": 1397, "regist": 1385, "register_dataframe_namespac": 59, "register_expr_namespac": 60, "register_glob": 1386, "register_io_sourc": 147, "register_lazyframe_namespac": 61, "register_mani": 1387, "register_plugin_funct": 149, "register_series_namespac": 62, "registr": 1, "reinterpret": [415, 652, 1028, 1249], "remot": 915, "remov": [285, 916], "renam": [286, 917, 1250], "rename_field": [748, 1341], "repeat": 827, "repeat_bi": [653, 1251], "replac": [481, 654, 721, 1103, 1252, 1313, 1397], "replace_al": [722, 1314], "replace_column": 287, "replace_mani": [723, 1315], "replace_strict": [655, 1253], "replace_time_zon": [482, 1104], "reshap": [656, 1254], "restore_default": 4, "revers": [288, 401, 577, 657, 724, 918, 1014, 1203, 1255, 1316, 1397], "right": 1397, "rle": [658, 1256], "rle_id": [659, 1257], "roll": [289, 660, 919], "rolling_corr": 828, "rolling_cov": 829, "rolling_kurtosi": [661, 1258], "rolling_map": [662, 1259], "rolling_max": [663, 1260], "rolling_max_bi": 664, "rolling_mean": [665, 1261], "rolling_mean_bi": 666, "rolling_median": [667, 1262], "rolling_median_bi": 668, "rolling_min": [669, 1263], "rolling_min_bi": 670, "rolling_quantil": [671, 1264], "rolling_quantile_bi": 672, "rolling_skew": [673, 1265], "rolling_std": [674, 1266], "rolling_std_bi": 675, "rolling_sum": [676, 1267], "rolling_sum_bi": 677, "rolling_var": [678, 1268], "rolling_var_bi": 679, "root_nam": 612, "round": [483, 680, 1105, 1269, 1396], "round_sig_fig": [681, 1270], "row": [290, 291], "rows_by_kei": 292, "rowserror": 121, "rtrim": 1397, "sampl": [293, 578, 682, 1204, 1271], "save": [5, 208], "save_to_fil": 6, "scan": 865, "scan_csv": 167, "scan_delta": 168, "scan_iceberg": 169, "scan_ipc": 170, "scan_ndjson": 171, "scan_parquet": 172, "scan_pyarrow_dataset": 173, "scan_tabl": 198, "scancastopt": 56, "scatter": 1272, "schema": [294, 920, 976, 1342], "schemaerror": 124, "schemafieldnotfounderror": 125, "search_sort": [683, 1273], "second": [484, 1106], "select": [295, 359, 830, 856, 921, 973, 1377, 1390], "select_seq": [296, 922], "selector": 977, "self_dtyp": 174, "seri": [188, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1374], "serial": [297, 358, 613, 923, 972], "set": [977, 1274, 1403], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [579, 1205], "set_engine_affin": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_intersect": [580, 1206], "set_profil": 189, "set_random_se": 175, "set_sort": [298, 684, 924, 1275], "set_streaming_chunk_s": 15, "set_symmetric_differ": [581, 1207], "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_union": [582, 1208], "set_verbos": 30, "shape": [299, 1276], "shapeerror": 126, "shift": [300, 402, 583, 685, 925, 1015, 1209, 1277], "show": 1404, "show_graph": [614, 926], "show_vers": 176, "shrink_dtyp": [686, 1278], "shrink_to_fit": [301, 1279], "shuffl": [687, 1280], "sign": [688, 1281, 1396], "sin": [689, 1282, 1399], "sind": 1399, "sinh": [690, 1283], "sink_csv": 49, "sink_ipc": 50, "sink_ndjson": 51, "sink_parquet": 52, "size": [416, 1029], "skew": [691, 1284], "slice": [302, 584, 692, 725, 927, 1210, 1285, 1317], "sort": [303, 403, 585, 693, 928, 1016, 1211, 1286], "sort_bi": 694, "split": [726, 1318], "split_exact": [727, 1319], "split_part": 1397, "splitn": [728, 1320], "sql": [304, 831, 929, 1390, 1395, 1401, 1402], "sql_expr": 832, "sqlcontext": [1383, 1384, 1385, 1386, 1387, 1388, 1389, 1402], "sqlinterfaceerror": 122, "sqlsyntaxerror": 123, "sqrt": [695, 1287, 1396], "starts_with": [417, 434, 729, 1030, 1048, 1321, 1397], "state": [31, 208], "std": [305, 404, 586, 696, 833, 930, 1017, 1212, 1288], "stddev": 1391, "str": [697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337], "strategi": 1405, "strftime": [485, 1107, 1398], "string": [88, 363, 859, 1380, 1397], "string_to_arrai": 1397, "stringcach": [57, 863], "stringcachemismatcherror": 127, "strip_char": [730, 1322], "strip_chars_end": [731, 1323], "strip_chars_start": [732, 1324], "strip_prefix": [733, 1325], "strip_suffix": [734, 1326], "strpo": 1397, "strptime": [735, 1327, 1397], "struct": [89, 746, 747, 748, 749, 750, 834, 860, 1338, 1339, 1340, 1341, 1342, 1343, 1381], "structfieldnotfounderror": 128, "style": 361, "sub": 751, "substr": 1397, "suffix": 628, "suffix_field": 629, "sum": [306, 350, 405, 587, 752, 835, 931, 961, 1018, 1213, 1344, 1391], "sum_horizont": [307, 836], "tabl": [1388, 1404], "tableinfo": [203, 204], "tabletyp": 205, "tail": [308, 351, 588, 736, 753, 837, 932, 962, 1214, 1328, 1345], "tan": [754, 1346, 1399], "tand": 1399, "tanh": [755, 1347], "tempor": [363, 861, 1382, 1398], "test": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 1405], "thread_pool_s": 190, "threadpool_s": 191, "time": [90, 486, 838, 1108], "time_rang": [839, 840], "timestamp": [487, 1109, 1397], "to_arrai": [589, 1215], "to_arrow": [309, 1348], "to_dat": [737, 1329], "to_datetim": [738, 1330], "to_decim": [739, 1331], "to_dict": [310, 311], "to_dtype_expr": 48, "to_dummi": [312, 1349], "to_fram": 1350, "to_init_repr": [313, 1351], "to_integ": [740, 1332], "to_jax": [314, 1352], "to_list": [406, 1019, 1353], "to_loc": 1049, "to_lowercas": [630, 741, 1333], "to_numpi": [315, 1354], "to_panda": [316, 1355], "to_phys": [756, 1356], "to_seri": 317, "to_str": [488, 1110], "to_struct": [318, 407, 590, 1020, 1216], "to_tim": [742, 1334], "to_titlecas": [743, 1335], "to_torch": [319, 1357], "to_uppercas": [631, 744, 1336], "toomanyrowsreturnederror": 129, "top_k": [320, 757, 933, 1358], "top_k_bi": [758, 1359], "total_dai": [489, 1111], "total_hour": [490, 1112], "total_microsecond": [491, 1113], "total_millisecond": [492, 1114], "total_minut": [493, 1115], "total_nanosecond": [494, 1116], "total_second": [495, 1117], "transpos": 321, "tree_format": 615, "trigonometri": 1399, "truediv": 759, "truncat": [496, 1118, 1404], "try_cast": 1400, "type": [363, 1400], "uint16": 91, "uint32": 92, "uint64": 93, "uint8": 94, "undo_alias": 616, "union": 1403, "uniqu": [322, 408, 591, 760, 934, 1021, 1217, 1360], "unique_count": [761, 1361], "uniti": [199, 200, 201, 202, 203, 204, 205, 207], "unknown": 95, "unnest": [323, 749, 935, 1343, 1392, 1404], "unpivot": [324, 936], "unregist": 1389, "unstablewarn": 130, "unstack": 325, "unsuitablesqlerror": 131, "updat": [326, 937], "upper": 1397, "upper_bound": [762, 1362], "upsampl": 327, "us": 208, "uses_lexical_ord": 1050, "using_string_cach": 192, "utf8": 96, "value_count": [763, 1363], "var": [328, 409, 592, 764, 841, 938, 1022, 1218, 1364], "varianc": 1391, "vstack": 329, "warn": 364, "week": [497, 1119], "weekdai": [498, 1120], "when": 842, "where": [765, 1390], "width": [330, 939], "window": 862, "with_column": [331, 940], "with_columns_seq": [332, 941], "with_context": 942, "with_field": 750, "with_row_count": [333, 943], "with_row_index": [334, 944], "with_time_unit": [499, 1121], "write_avro": 36, "write_clipboard": 37, "write_csv": 38, "write_databas": 39, "write_delta": 40, "write_excel": 41, "write_iceberg": 42, "write_ipc": 43, "write_ipc_stream": 44, "write_json": [45, 617], "write_ndjson": 46, "write_parquet": 47, "xor": 766, "year": [500, 1122], "zero": 843, "zfill": [745, 1337], "zip_with": 1365}})